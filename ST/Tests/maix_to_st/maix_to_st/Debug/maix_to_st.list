
maix_to_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007c50  08007c50  00017c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008060  08008060  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008060  08008060  00018060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008068  08008068  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800806c  0800806c  0001806c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d4  08008244  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08008244  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a48  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192a  00000000  00000000  00028c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b5  00000000  00000000  0002ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163a2  00000000  00000000  0002b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000097ff  00000000  00000000  0004169f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087346  00000000  00000000  0004ae9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003380  00000000  00000000  000d21e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000d5564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c34 	.word	0x08007c34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007c34 	.word	0x08007c34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a6 	b.w	8000fac <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9e08      	ldr	r6, [sp, #32]
 8000cea:	460d      	mov	r5, r1
 8000cec:	4604      	mov	r4, r0
 8000cee:	460f      	mov	r7, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <__udivmoddi4+0xa6>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4694      	mov	ip, r2
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0xe2>
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	b143      	cbz	r3, 8000d12 <__udivmoddi4+0x2e>
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	f1c3 0220 	rsb	r2, r3, #32
 8000d08:	409f      	lsls	r7, r3
 8000d0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	409c      	lsls	r4, r3
 8000d12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d16:	fa1f f58c 	uxth.w	r5, ip
 8000d1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d1e:	0c22      	lsrs	r2, r4, #16
 8000d20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d28:	fb01 f005 	mul.w	r0, r1, r5
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x62>
 8000d30:	eb1c 0202 	adds.w	r2, ip, r2
 8000d34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d38:	f080 811c 	bcs.w	8000f74 <__udivmoddi4+0x290>
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	f240 8119 	bls.w	8000f74 <__udivmoddi4+0x290>
 8000d42:	3902      	subs	r1, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a12      	subs	r2, r2, r0
 8000d48:	b2a4      	uxth	r4, r4
 8000d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d56:	fb00 f505 	mul.w	r5, r0, r5
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	d90a      	bls.n	8000d74 <__udivmoddi4+0x90>
 8000d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x294>
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x294>
 8000d70:	4464      	add	r4, ip
 8000d72:	3802      	subs	r0, #2
 8000d74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	b11e      	cbz	r6, 8000d86 <__udivmoddi4+0xa2>
 8000d7e:	40dc      	lsrs	r4, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	e9c6 4300 	strd	r4, r3, [r6]
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0xbc>
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f000 80ed 	beq.w	8000f6e <__udivmoddi4+0x28a>
 8000d94:	2100      	movs	r1, #0
 8000d96:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	fab3 f183 	clz	r1, r3
 8000da4:	2900      	cmp	r1, #0
 8000da6:	d149      	bne.n	8000e3c <__udivmoddi4+0x158>
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d302      	bcc.n	8000db2 <__udivmoddi4+0xce>
 8000dac:	4282      	cmp	r2, r0
 8000dae:	f200 80f8 	bhi.w	8000fa2 <__udivmoddi4+0x2be>
 8000db2:	1a84      	subs	r4, r0, r2
 8000db4:	eb65 0203 	sbc.w	r2, r5, r3
 8000db8:	2001      	movs	r0, #1
 8000dba:	4617      	mov	r7, r2
 8000dbc:	2e00      	cmp	r6, #0
 8000dbe:	d0e2      	beq.n	8000d86 <__udivmoddi4+0xa2>
 8000dc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc4:	e7df      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000dc6:	b902      	cbnz	r2, 8000dca <__udivmoddi4+0xe6>
 8000dc8:	deff      	udf	#255	; 0xff
 8000dca:	fab2 f382 	clz	r3, r2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 8090 	bne.w	8000ef4 <__udivmoddi4+0x210>
 8000dd4:	1a8a      	subs	r2, r1, r2
 8000dd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dda:	fa1f fe8c 	uxth.w	lr, ip
 8000dde:	2101      	movs	r1, #1
 8000de0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de4:	fb07 2015 	mls	r0, r7, r5, r2
 8000de8:	0c22      	lsrs	r2, r4, #16
 8000dea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dee:	fb0e f005 	mul.w	r0, lr, r5
 8000df2:	4290      	cmp	r0, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x124>
 8000df6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x122>
 8000e00:	4290      	cmp	r0, r2
 8000e02:	f200 80cb 	bhi.w	8000f9c <__udivmoddi4+0x2b8>
 8000e06:	4645      	mov	r5, r8
 8000e08:	1a12      	subs	r2, r2, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e10:	fb07 2210 	mls	r2, r7, r0, r2
 8000e14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e18:	fb0e fe00 	mul.w	lr, lr, r0
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x14e>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e28:	d202      	bcs.n	8000e30 <__udivmoddi4+0x14c>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	f200 80bb 	bhi.w	8000fa6 <__udivmoddi4+0x2c2>
 8000e30:	4610      	mov	r0, r2
 8000e32:	eba4 040e 	sub.w	r4, r4, lr
 8000e36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3a:	e79f      	b.n	8000d7c <__udivmoddi4+0x98>
 8000e3c:	f1c1 0720 	rsb	r7, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e52:	40fd      	lsrs	r5, r7
 8000e54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e58:	4323      	orrs	r3, r4
 8000e5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e5e:	fa1f fe8c 	uxth.w	lr, ip
 8000e62:	fb09 5518 	mls	r5, r9, r8, r5
 8000e66:	0c1c      	lsrs	r4, r3, #16
 8000e68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7a:	d90b      	bls.n	8000e94 <__udivmoddi4+0x1b0>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e84:	f080 8088 	bcs.w	8000f98 <__udivmoddi4+0x2b4>
 8000e88:	42a5      	cmp	r5, r4
 8000e8a:	f240 8085 	bls.w	8000f98 <__udivmoddi4+0x2b4>
 8000e8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e92:	4464      	add	r4, ip
 8000e94:	1b64      	subs	r4, r4, r5
 8000e96:	b29d      	uxth	r5, r3
 8000e98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x1da>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb4:	d26c      	bcs.n	8000f90 <__udivmoddi4+0x2ac>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	d96a      	bls.n	8000f90 <__udivmoddi4+0x2ac>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	46c8      	mov	r8, r9
 8000ece:	46ae      	mov	lr, r5
 8000ed0:	d356      	bcc.n	8000f80 <__udivmoddi4+0x29c>
 8000ed2:	d053      	beq.n	8000f7c <__udivmoddi4+0x298>
 8000ed4:	b156      	cbz	r6, 8000eec <__udivmoddi4+0x208>
 8000ed6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eda:	eb64 040e 	sbc.w	r4, r4, lr
 8000ede:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee2:	40ca      	lsrs	r2, r1
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	4317      	orrs	r7, r2
 8000ee8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eec:	4618      	mov	r0, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef4:	f1c3 0120 	rsb	r1, r3, #32
 8000ef8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000efc:	fa20 f201 	lsr.w	r2, r0, r1
 8000f00:	fa25 f101 	lsr.w	r1, r5, r1
 8000f04:	409d      	lsls	r5, r3
 8000f06:	432a      	orrs	r2, r5
 8000f08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f14:	fb07 1510 	mls	r5, r7, r0, r1
 8000f18:	0c11      	lsrs	r1, r2, #16
 8000f1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f22:	428d      	cmp	r5, r1
 8000f24:	fa04 f403 	lsl.w	r4, r4, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x258>
 8000f2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f32:	d22f      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f34:	428d      	cmp	r5, r1
 8000f36:	d92d      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1b49      	subs	r1, r1, r5
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f44:	fb07 1115 	mls	r1, r7, r5, r1
 8000f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f50:	4291      	cmp	r1, r2
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x282>
 8000f54:	eb1c 0202 	adds.w	r2, ip, r2
 8000f58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f5c:	d216      	bcs.n	8000f8c <__udivmoddi4+0x2a8>
 8000f5e:	4291      	cmp	r1, r2
 8000f60:	d914      	bls.n	8000f8c <__udivmoddi4+0x2a8>
 8000f62:	3d02      	subs	r5, #2
 8000f64:	4462      	add	r2, ip
 8000f66:	1a52      	subs	r2, r2, r1
 8000f68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f6c:	e738      	b.n	8000de0 <__udivmoddi4+0xfc>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e708      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000f74:	4639      	mov	r1, r7
 8000f76:	e6e6      	b.n	8000d46 <__udivmoddi4+0x62>
 8000f78:	4610      	mov	r0, r2
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x90>
 8000f7c:	4548      	cmp	r0, r9
 8000f7e:	d2a9      	bcs.n	8000ed4 <__udivmoddi4+0x1f0>
 8000f80:	ebb9 0802 	subs.w	r8, r9, r2
 8000f84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	e7a3      	b.n	8000ed4 <__udivmoddi4+0x1f0>
 8000f8c:	4645      	mov	r5, r8
 8000f8e:	e7ea      	b.n	8000f66 <__udivmoddi4+0x282>
 8000f90:	462b      	mov	r3, r5
 8000f92:	e794      	b.n	8000ebe <__udivmoddi4+0x1da>
 8000f94:	4640      	mov	r0, r8
 8000f96:	e7d1      	b.n	8000f3c <__udivmoddi4+0x258>
 8000f98:	46d0      	mov	r8, sl
 8000f9a:	e77b      	b.n	8000e94 <__udivmoddi4+0x1b0>
 8000f9c:	3d02      	subs	r5, #2
 8000f9e:	4462      	add	r2, ip
 8000fa0:	e732      	b.n	8000e08 <__udivmoddi4+0x124>
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	e70a      	b.n	8000dbc <__udivmoddi4+0xd8>
 8000fa6:	4464      	add	r4, ip
 8000fa8:	3802      	subs	r0, #2
 8000faa:	e742      	b.n	8000e32 <__udivmoddi4+0x14e>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000fb4:	f000 fb1a 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f84e 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 f8fe 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc0:	f000 f8dc 	bl	800117c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 f8b0 	bl	8001128 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, RxData, 10);
 8000fc8:	220a      	movs	r2, #10
 8000fca:	4904      	ldr	r1, [pc, #16]	; (8000fdc <main+0x2c>)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <main+0x30>)
 8000fce:	f001 fee0 	bl	8002d92 <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //sprintf(numarray, "%d", coordinate);
//	  HAL_UART_Transmit(&huart1, coordinate, 8, 1000);
	  HAL_Delay(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f000 fb7b 	bl	80016d0 <HAL_Delay>
 8000fda:	e7fa      	b.n	8000fd2 <main+0x22>
 8000fdc:	20000294 	.word	0x20000294
 8000fe0:	200001f0 	.word	0x200001f0

08000fe4 <HAL_UART_RxHalfCpltCallback>:
  * @brief System Clock Configuration
  * @retval None
  */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	counthalf++;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_UART_RxHalfCpltCallback+0x20>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_UART_RxHalfCpltCallback+0x20>)
 8000ff4:	6013      	str	r3, [r2, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200002b4 	.word	0x200002b4

08001008 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	countfull++;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_UART_RxCpltCallback+0x34>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <HAL_UART_RxCpltCallback+0x34>)
 8001018:	6013      	str	r3, [r2, #0]
	sscanf(RxData, "(%d,%d,%d)", &x_coordinate, &y_coordinate, &area);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_UART_RxCpltCallback+0x38>)
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_UART_RxCpltCallback+0x3c>)
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <HAL_UART_RxCpltCallback+0x40>)
 8001022:	490a      	ldr	r1, [pc, #40]	; (800104c <HAL_UART_RxCpltCallback+0x44>)
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <HAL_UART_RxCpltCallback+0x48>)
 8001026:	f003 fa3f 	bl	80044a8 <siscanf>
	HAL_UART_Receive_DMA(&huart1, RxData, 10);
 800102a:	220a      	movs	r2, #10
 800102c:	4908      	ldr	r1, [pc, #32]	; (8001050 <HAL_UART_RxCpltCallback+0x48>)
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_UART_RxCpltCallback+0x4c>)
 8001030:	f001 feaf 	bl	8002d92 <HAL_UART_Receive_DMA>
	//sscanf(RxData, "%f", &x_coordinate);
	//HAL_UART_Receive_DMA(&huart1, RxData, 3);
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200002b8 	.word	0x200002b8
 8001040:	200002c4 	.word	0x200002c4
 8001044:	200002c0 	.word	0x200002c0
 8001048:	200002bc 	.word	0x200002bc
 800104c:	08007c50 	.word	0x08007c50
 8001050:	20000294 	.word	0x20000294
 8001054:	200001f0 	.word	0x200001f0

08001058 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fa8f 	bl	800458a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <SystemClock_Config+0xc8>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a26      	ldr	r2, [pc, #152]	; (8001120 <SystemClock_Config+0xc8>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <SystemClock_Config+0xc8>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <SystemClock_Config+0xcc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a20      	ldr	r2, [pc, #128]	; (8001124 <SystemClock_Config+0xcc>)
 80010a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SystemClock_Config+0xcc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010bc:	2310      	movs	r3, #16
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c8:	2308      	movs	r3, #8
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 f9b3 	bl	8002448 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e8:	f000 f890 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2103      	movs	r1, #3
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fc15 	bl	8002938 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001114:	f000 f87a 	bl	800120c <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3750      	adds	r7, #80	; 0x50
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_USART1_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_USART1_UART_Init+0x4c>)
 8001160:	f001 fdca 	bl	8002cf8 <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f000 f84f 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001f0 	.word	0x200001f0
 8001178:	40011000 	.word	0x40011000

0800117c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <MX_DMA_Init+0x3c>)
 800118c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	203a      	movs	r0, #58	; 0x3a
 80011a4:	f000 fb93 	bl	80018ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011a8:	203a      	movs	r0, #58	; 0x3a
 80011aa:	f000 fbac 	bl	8001906 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_GPIO_Init+0x4c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <MX_GPIO_Init+0x4c>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_GPIO_Init+0x4c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_GPIO_Init+0x4c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <MX_GPIO_Init+0x4c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_GPIO_Init+0x4c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_UART_MspInit+0xf0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d162      	bne.n	8001350 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_UART_MspInit+0xf4>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <HAL_UART_MspInit+0xf4>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_UART_MspInit+0xf4>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_UART_MspInit+0xf4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a2b      	ldr	r2, [pc, #172]	; (800135c <HAL_UART_MspInit+0xf4>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_UART_MspInit+0xf4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d4:	2307      	movs	r3, #7
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4820      	ldr	r0, [pc, #128]	; (8001360 <HAL_UART_MspInit+0xf8>)
 80012e0:	f000 ff2e 	bl	8002140 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012e6:	4a20      	ldr	r2, [pc, #128]	; (8001368 <HAL_UART_MspInit+0x100>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_UART_MspInit+0xfc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001304:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_UART_MspInit+0xfc>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_UART_MspInit+0xfc>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001326:	f000 fb09 	bl	800193c <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001330:	f7ff ff6c 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_UART_MspInit+0xfc>)
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_UART_MspInit+0xfc>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2025      	movs	r0, #37	; 0x25
 8001346:	f000 fac2 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800134a:	2025      	movs	r0, #37	; 0x25
 800134c:	f000 fadb 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	20000234 	.word	0x20000234
 8001368:	40026440 	.word	0x40026440

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 f96a 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <USART1_IRQHandler+0x10>)
 80013c6:	f001 fd15 	bl	8002df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001f0 	.word	0x200001f0

080013d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA2_Stream2_IRQHandler+0x10>)
 80013da:	f000 fc47 	bl	8001c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000234 	.word	0x20000234

080013e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return 1;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_kill>:

int _kill(int pid, int sig)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001402:	f003 f911 	bl	8004628 <__errno>
 8001406:	4603      	mov	r3, r0
 8001408:	2216      	movs	r2, #22
 800140a:	601a      	str	r2, [r3, #0]
  return -1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_exit>:

void _exit (int status)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ffe7 	bl	80013f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800142a:	e7fe      	b.n	800142a <_exit+0x12>

0800142c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800143e:	f3af 8000 	nop.w
 8001442:	4601      	mov	r1, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60ba      	str	r2, [r7, #8]
 800144a:	b2ca      	uxtb	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf0      	blt.n	800143e <_read+0x12>
  }

  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e009      	b.n	800148c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf1      	blt.n	8001478 <_write+0x12>
  }
  return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_close>:

int _close(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c6:	605a      	str	r2, [r3, #4]
  return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_isatty>:

int _isatty(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f003 f876 	bl	8004628 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20020000 	.word	0x20020000
 8001568:	00000400 	.word	0x00000400
 800156c:	200002c8 	.word	0x200002c8
 8001570:	20000420 	.word	0x20000420

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800159e:	490e      	ldr	r1, [pc, #56]	; (80015d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015b4:	4c0b      	ldr	r4, [pc, #44]	; (80015e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c2:	f7ff ffd7 	bl	8001574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f003 f835 	bl	8004634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff fcf1 	bl	8000fb0 <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015dc:	08008070 	.word	0x08008070
  ldr r2, =_sbss
 80015e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015e4:	2000041c 	.word	0x2000041c

080015e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 f94f 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	200f      	movs	r0, #15
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fdfa 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f967 	bl	8001922 <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 f92f 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	20000008 	.word	0x20000008
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008
 80016b4:	200002cc 	.word	0x200002cc

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200002cc 	.word	0x200002cc

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff29 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff3e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff31 	bl	800177c <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff feb6 	bl	80016b8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e099      	b.n	8001a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001978:	e00f      	b.n	800199a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197a:	f7ff fe9d 	bl	80016b8 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b05      	cmp	r3, #5
 8001986:	d908      	bls.n	800199a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2220      	movs	r2, #32
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e078      	b.n	8001a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e8      	bne.n	800197a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_DMA_Init+0x158>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d107      	bne.n	8001a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4313      	orrs	r3, r2
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d117      	bne.n	8001a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fb01 	bl	8002048 <DMA_CheckFifoParam>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2240      	movs	r2, #64	; 0x40
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e016      	b.n	8001a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fab8 	bl	8001fdc <DMA_CalcBaseAndBitshift>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	223f      	movs	r2, #63	; 0x3f
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	f010803f 	.word	0xf010803f

08001a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_DMA_Start_IT+0x26>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e040      	b.n	8001b40 <HAL_DMA_Start_IT+0xa8>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d12f      	bne.n	8001b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fa4a 	bl	8001f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	223f      	movs	r2, #63	; 0x3f
 8001af2:	409a      	lsls	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0216 	orr.w	r2, r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0208 	orr.w	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e005      	b.n	8001b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b56:	f7ff fdaf 	bl	80016b8 <HAL_GetTick>
 8001b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e052      	b.n	8001c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0216 	bic.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_DMA_Abort+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0208 	bic.w	r2, r2, #8
 8001bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bca:	e013      	b.n	8001bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bcc:	f7ff fd74 	bl	80016b8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d90c      	bls.n	8001bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2203      	movs	r2, #3
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e015      	b.n	8001c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e4      	bne.n	8001bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	223f      	movs	r2, #63	; 0x3f
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d004      	beq.n	8001c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00c      	b.n	8001c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c78:	4b8e      	ldr	r3, [pc, #568]	; (8001eb4 <HAL_DMA_IRQHandler+0x248>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a8e      	ldr	r2, [pc, #568]	; (8001eb8 <HAL_DMA_IRQHandler+0x24c>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2208      	movs	r2, #8
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2201      	movs	r2, #1
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2204      	movs	r2, #4
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2204      	movs	r2, #4
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2210      	movs	r2, #16
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d043      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d03c      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2210      	movs	r2, #16
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d024      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	e01f      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0208 	bic.w	r2, r2, #8
 8001dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2220      	movs	r2, #32
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 808f 	beq.w	8001f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8087 	beq.w	8001f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2220      	movs	r2, #32
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d136      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0216 	bic.w	r2, r2, #22
 8001e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <HAL_DMA_IRQHandler+0x1da>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	223f      	movs	r2, #63	; 0x3f
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07e      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
        }
        return;
 8001e82:	e079      	b.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01d      	beq.n	8001ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10d      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d031      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
 8001eb0:	e02c      	b.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e01e      	b.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0210 	bic.w	r2, r2, #16
 8001eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d032      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d022      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2205      	movs	r2, #5
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d307      	bcc.n	8001f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f2      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x2cc>
 8001f52:	e000      	b.n	8001f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
 8001f76:	e000      	b.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f78:	bf00      	nop
    }
  }
}
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d108      	bne.n	8001fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fbe:	e007      	b.n	8001fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3b10      	subs	r3, #16
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <DMA_CalcBaseAndBitshift+0x64>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <DMA_CalcBaseAndBitshift+0x68>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d909      	bls.n	800201e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	1d1a      	adds	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	659a      	str	r2, [r3, #88]	; 0x58
 800201c:	e007      	b.n	800202e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	aaaaaaab 	.word	0xaaaaaaab
 8002044:	08007c80 	.word	0x08007c80

08002048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11f      	bne.n	80020a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d856      	bhi.n	8002116 <DMA_CheckFifoParam+0xce>
 8002068:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <DMA_CheckFifoParam+0x28>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002081 	.word	0x08002081
 8002074:	08002093 	.word	0x08002093
 8002078:	08002081 	.word	0x08002081
 800207c:	08002117 	.word	0x08002117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d046      	beq.n	800211a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002090:	e043      	b.n	800211a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800209a:	d140      	bne.n	800211e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e03d      	b.n	800211e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020aa:	d121      	bne.n	80020f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d837      	bhi.n	8002122 <DMA_CheckFifoParam+0xda>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <DMA_CheckFifoParam+0x70>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020cf 	.word	0x080020cf
 80020c0:	080020c9 	.word	0x080020c9
 80020c4:	080020e1 	.word	0x080020e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      break;
 80020cc:	e030      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d025      	beq.n	8002126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020de:	e022      	b.n	8002126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e8:	d11f      	bne.n	800212a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ee:	e01c      	b.n	800212a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d903      	bls.n	80020fe <DMA_CheckFifoParam+0xb6>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d003      	beq.n	8002104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020fc:	e018      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      break;
 8002102:	e015      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      break;
 8002114:	e00b      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 8002116:	bf00      	nop
 8002118:	e00a      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e008      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800211e:	bf00      	nop
 8002120:	e006      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
 8002124:	e004      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e002      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;   
 800212a:	bf00      	nop
 800212c:	e000      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
    }
  } 
  
  return status; 
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e159      	b.n	8002410 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8148 	bne.w	800240a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d005      	beq.n	8002192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218e:	2b02      	cmp	r3, #2
 8002190:	d130      	bne.n	80021f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 0201 	and.w	r2, r3, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d017      	beq.n	8002230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d123      	bne.n	8002284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80a2 	beq.w	800240a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b57      	ldr	r3, [pc, #348]	; (8002428 <HAL_GPIO_Init+0x2e8>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a56      	ldr	r2, [pc, #344]	; (8002428 <HAL_GPIO_Init+0x2e8>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b54      	ldr	r3, [pc, #336]	; (8002428 <HAL_GPIO_Init+0x2e8>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e2:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_GPIO_Init+0x2ec>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a49      	ldr	r2, [pc, #292]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x202>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a48      	ldr	r2, [pc, #288]	; (8002434 <HAL_GPIO_Init+0x2f4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x1fe>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a47      	ldr	r2, [pc, #284]	; (8002438 <HAL_GPIO_Init+0x2f8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1fa>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a46      	ldr	r2, [pc, #280]	; (800243c <HAL_GPIO_Init+0x2fc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1f6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a45      	ldr	r2, [pc, #276]	; (8002440 <HAL_GPIO_Init+0x300>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1f2>
 800232e:	2304      	movs	r3, #4
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002332:	2307      	movs	r3, #7
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x204>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x204>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x2ec>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_GPIO_Init+0x304>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002386:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x304>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_GPIO_Init+0x304>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b0:	4a24      	ldr	r2, [pc, #144]	; (8002444 <HAL_GPIO_Init+0x304>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_GPIO_Init+0x304>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023da:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x304>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_GPIO_Init+0x304>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002404:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <HAL_GPIO_Init+0x304>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f aea2 	bls.w	800215c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e267      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d075      	beq.n	8002552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e242      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x74>
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6f      	ldr	r2, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6c      	ldr	r2, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024e0:	4b69      	ldr	r3, [pc, #420]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f8da 	bl	80016b8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f8d6 	bl	80016b8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e207      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xc0>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff f8c6 	bl	80016b8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f8c2 	bl	80016b8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1f3      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xe8>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b44      	ldr	r3, [pc, #272]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c7      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4937      	ldr	r1, [pc, #220]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x244>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7ff f87b 	bl	80016b8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c6:	f7ff f877 	bl	80016b8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a8      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x244>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff f85a 	bl	80016b8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff f856 	bl	80016b8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e187      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x248>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7ff f83a 	bl	80016b8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff f836 	bl	80016b8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e167      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x240>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x200>
 8002666:	e01b      	b.n	80026a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x248>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff f823 	bl	80016b8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e00e      	b.n	8002694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff f81f 	bl	80016b8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d907      	bls.n	8002694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e150      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 8002688:	40023800 	.word	0x40023800
 800268c:	42470000 	.word	0x42470000
 8002690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ea      	bne.n	8002676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8097 	beq.w	80027dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b7d      	ldr	r3, [pc, #500]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a7c      	ldr	r2, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b7a      	ldr	r3, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b77      	ldr	r3, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b74      	ldr	r3, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a73      	ldr	r2, [pc, #460]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe ffdf 	bl	80016b8 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe ffdb 	bl	80016b8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e10c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0x474>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x2ea>
 8002724:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x30c>
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a5b      	ldr	r2, [pc, #364]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002754:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a54      	ldr	r2, [pc, #336]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe ffa0 	bl	80016b8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe ff9c 	bl	80016b8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0cb      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCC_OscConfig+0x334>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe ff8a 	bl	80016b8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe ff86 	bl	80016b8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0b5      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a1 	beq.w	8002928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d05c      	beq.n	80028ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d141      	bne.n	800287e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe ff5a 	bl	80016b8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe ff56 	bl	80016b8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e087      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	491b      	ldr	r1, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe ff2f 	bl	80016b8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe ff2b 	bl	80016b8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e05c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x416>
 800287c:	e054      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe ff18 	bl	80016b8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe ff14 	bl	80016b8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e045      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x470>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x444>
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e038      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x4ec>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d121      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11a      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fe46 	bl	80016b8 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe fe42 	bl	80016b8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f821 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fda6 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08007c68 	.word	0x08007c68
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b090      	sub	sp, #64	; 0x40
 8002b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b10:	2300      	movs	r3, #0
 8002b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b14:	2300      	movs	r3, #0
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x40>
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	f200 80a1 	bhi.w	8002c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x34>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b36:	e09b      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b3c:	e09b      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3e:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b42:	e098      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b44:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d028      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	627a      	str	r2, [r7, #36]	; 0x24
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b70:	fb03 f201 	mul.w	r2, r3, r1
 8002b74:	2300      	movs	r3, #0
 8002b76:	fb00 f303 	mul.w	r3, r0, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a43      	ldr	r2, [pc, #268]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b84:	460a      	mov	r2, r1
 8002b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	2200      	movs	r2, #0
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	61fa      	str	r2, [r7, #28]
 8002b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b9e:	f7fe f853 	bl	8000c48 <__aeabi_uldivmod>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002baa:	e053      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	617a      	str	r2, [r7, #20]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bbe:	f04f 0b00 	mov.w	fp, #0
 8002bc2:	4652      	mov	r2, sl
 8002bc4:	465b      	mov	r3, fp
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	ebb2 080a 	subs.w	r8, r2, sl
 8002bde:	eb63 090b 	sbc.w	r9, r3, fp
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8002bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	00eb      	lsls	r3, r5, #3
 8002c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c0c:	00e2      	lsls	r2, r4, #3
 8002c0e:	4614      	mov	r4, r2
 8002c10:	461d      	mov	r5, r3
 8002c12:	eb14 030a 	adds.w	r3, r4, sl
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	eb45 030b 	adc.w	r3, r5, fp
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	028b      	lsls	r3, r1, #10
 8002c2e:	4621      	mov	r1, r4
 8002c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c34:	4621      	mov	r1, r4
 8002c36:	028a      	lsls	r2, r1, #10
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	60fa      	str	r2, [r7, #12]
 8002c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c48:	f7fd fffe 	bl	8000c48 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4613      	mov	r3, r2
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3740      	adds	r7, #64	; 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	017d7840 	.word	0x017d7840

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08007c78 	.word	0x08007c78

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0b5b      	lsrs	r3, r3, #13
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4903      	ldr	r1, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08007c78 	.word	0x08007c78

08002cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e03f      	b.n	8002d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe faa2 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	; 0x24
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fe5f 	bl	8003a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d11d      	bne.n	8002de8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Receive_DMA+0x26>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e016      	b.n	8002dea <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Receive_DMA+0x38>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e00f      	b.n	8002dea <HAL_UART_Receive_DMA+0x58>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fbae 	bl	8003540 <UART_Start_Receive_DMA>
 8002de4:	4603      	mov	r3, r0
 8002de6:	e000      	b.n	8002dea <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0ba      	sub	sp, #232	; 0xe8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_UART_IRQHandler+0x66>
 8002e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fd19 	bl	800388a <UART_Receive_IT>
      return;
 8002e58:	e256      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80de 	beq.w	8003020 <HAL_UART_IRQHandler+0x22c>
 8002e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80d1 	beq.w	8003020 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xae>
 8002e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xd2>
 8002eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xf6>
 8002ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0204 	orr.w	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <HAL_UART_IRQHandler+0x126>
 8002ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0208 	orr.w	r2, r3, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 81ed 	beq.w	80032fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14e>
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fca4 	bl	800388a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <HAL_UART_IRQHandler+0x17a>
 8002f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d04f      	beq.n	800300e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fbac 	bl	80036cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d141      	bne.n	8003006 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1d9      	bne.n	8002f82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d013      	beq.n	8002ffe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4a7d      	ldr	r2, [pc, #500]	; (80031d0 <HAL_UART_IRQHandler+0x3dc>)
 8002fdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fe20 	bl	8001c28 <HAL_DMA_Abort_IT>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e00e      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f990 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e00a      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f98c 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	e006      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f988 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800301a:	e170      	b.n	80032fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	bf00      	nop
    return;
 800301e:	e16e      	b.n	80032fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 814a 	bne.w	80032be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8143 	beq.w	80032be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 813c 	beq.w	80032be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	f040 80b4 	bne.w	80031d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003078:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8140 	beq.w	8003302 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800308a:	429a      	cmp	r2, r3
 800308c:	f080 8139 	bcs.w	8003302 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003096:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a2:	f000 8088 	beq.w	80031b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1d9      	bne.n	80030a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003116:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800311a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800311e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e1      	bne.n	80030f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800313e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3314      	adds	r3, #20
 800314e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003152:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003154:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003158:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e3      	bne.n	800312e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003186:	f023 0310 	bic.w	r3, r3, #16
 800318a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003198:	65ba      	str	r2, [r7, #88]	; 0x58
 800319a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800319e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e3      	bne.n	8003174 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fcc9 	bl	8001b48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8b6 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031cc:	e099      	b.n	8003302 <HAL_UART_IRQHandler+0x50e>
 80031ce:	bf00      	nop
 80031d0:	08003793 	.word	0x08003793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 808b 	beq.w	8003306 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8086 	beq.w	8003306 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800321e:	647a      	str	r2, [r7, #68]	; 0x44
 8003220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e3      	bne.n	80031fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3314      	adds	r3, #20
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	623b      	str	r3, [r7, #32]
   return(result);
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003256:	633a      	str	r2, [r7, #48]	; 0x30
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800325c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e3      	bne.n	8003232 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	60fb      	str	r3, [r7, #12]
   return(result);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0310 	bic.w	r3, r3, #16
 800328e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	330c      	adds	r3, #12
 8003298:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800329c:	61fa      	str	r2, [r7, #28]
 800329e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	69b9      	ldr	r1, [r7, #24]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	617b      	str	r3, [r7, #20]
   return(result);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e3      	bne.n	8003278 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f83e 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032bc:	e023      	b.n	8003306 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_UART_IRQHandler+0x4ea>
 80032ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa6f 	bl	80037ba <UART_Transmit_IT>
    return;
 80032dc:	e014      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00e      	beq.n	8003308 <HAL_UART_IRQHandler+0x514>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 faaf 	bl	800385a <UART_EndTransmit_IT>
    return;
 80032fc:	e004      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
    return;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
      return;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
      return;
 8003306:	bf00      	nop
  }
}
 8003308:	37e8      	adds	r7, #232	; 0xe8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop

08003310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b09c      	sub	sp, #112	; 0x70
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d172      	bne.n	8003452 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800336c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336e:	2200      	movs	r2, #0
 8003370:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003392:	65ba      	str	r2, [r7, #88]	; 0x58
 8003394:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e5      	bne.n	8003372 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	667b      	str	r3, [r7, #100]	; 0x64
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80033c6:	647a      	str	r2, [r7, #68]	; 0x44
 80033c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e5      	bne.n	80033a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	623b      	str	r3, [r7, #32]
   return(result);
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033fa:	633a      	str	r2, [r7, #48]	; 0x30
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e5      	bne.n	80033da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800340e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	2b01      	cmp	r3, #1
 800341c:	d119      	bne.n	8003452 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	60fb      	str	r3, [r7, #12]
   return(result);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800343e:	61fa      	str	r2, [r7, #28]
 8003440:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	617b      	str	r3, [r7, #20]
   return(result);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e5      	bne.n	800341e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	2b01      	cmp	r3, #1
 8003458:	d106      	bne.n	8003468 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800345e:	4619      	mov	r1, r3
 8003460:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003462:	f7ff ff69 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003466:	e002      	b.n	800346e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003468:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800346a:	f7fd fdcd 	bl	8001008 <HAL_UART_RxCpltCallback>
}
 800346e:	bf00      	nop
 8003470:	3770      	adds	r7, #112	; 0x70
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	2b01      	cmp	r3, #1
 800348a:	d108      	bne.n	800349e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	b29b      	uxth	r3, r3
 8003494:	4619      	mov	r1, r3
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff ff4e 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800349c:	e002      	b.n	80034a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7fd fda0 	bl	8000fe4 <HAL_UART_RxHalfCpltCallback>
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b21      	cmp	r3, #33	; 0x21
 80034de:	d108      	bne.n	80034f2 <UART_DMAError+0x46>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2200      	movs	r2, #0
 80034ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80034ec:	68b8      	ldr	r0, [r7, #8]
 80034ee:	f000 f8c5 	bl	800367c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b22      	cmp	r3, #34	; 0x22
 8003512:	d108      	bne.n	8003526 <UART_DMAError+0x7a>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003520:	68b8      	ldr	r0, [r7, #8]
 8003522:	f000 f8d3 	bl	80036cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f043 0210 	orr.w	r2, r3, #16
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003532:	68b8      	ldr	r0, [r7, #8]
 8003534:	f7ff fef6 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b098      	sub	sp, #96	; 0x60
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2222      	movs	r2, #34	; 0x22
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	4a40      	ldr	r2, [pc, #256]	; (8003670 <UART_Start_Receive_DMA+0x130>)
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	4a3f      	ldr	r2, [pc, #252]	; (8003674 <UART_Start_Receive_DMA+0x134>)
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	4a3e      	ldr	r2, [pc, #248]	; (8003678 <UART_Start_Receive_DMA+0x138>)
 800357e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2200      	movs	r2, #0
 8003586:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	f7fe fa7a 	bl	8001a98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d019      	beq.n	80035fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80035f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80035f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e5      	bne.n	80035ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	657b      	str	r3, [r7, #84]	; 0x54
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3314      	adds	r3, #20
 800361c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800361e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e5      	bne.n	80035fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	617b      	str	r3, [r7, #20]
   return(result);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003648:	653b      	str	r3, [r7, #80]	; 0x50
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003652:	627a      	str	r2, [r7, #36]	; 0x24
 8003654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6a39      	ldr	r1, [r7, #32]
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3760      	adds	r7, #96	; 0x60
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	08003351 	.word	0x08003351
 8003674:	08003477 	.word	0x08003477
 8003678:	080034ad 	.word	0x080034ad

0800367c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	; 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	60bb      	str	r3, [r7, #8]
   return(result);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	61ba      	str	r2, [r7, #24]
 80036a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	6979      	ldr	r1, [r7, #20]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	613b      	str	r3, [r7, #16]
   return(result);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e5      	bne.n	8003684 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80036c0:	bf00      	nop
 80036c2:	3724      	adds	r7, #36	; 0x24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b095      	sub	sp, #84	; 0x54
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f4:	643a      	str	r2, [r7, #64]	; 0x40
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	61fb      	str	r3, [r7, #28]
   return(result);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3314      	adds	r3, #20
 8003726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	d119      	bne.n	8003778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	60bb      	str	r3, [r7, #8]
   return(result);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f023 0310 	bic.w	r3, r3, #16
 800375a:	647b      	str	r3, [r7, #68]	; 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003764:	61ba      	str	r2, [r7, #24]
 8003766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6979      	ldr	r1, [r7, #20]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	613b      	str	r3, [r7, #16]
   return(result);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e5      	bne.n	8003744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003786:	bf00      	nop
 8003788:	3754      	adds	r7, #84	; 0x54
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff fdb9 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b21      	cmp	r3, #33	; 0x21
 80037cc:	d13e      	bne.n	800384c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	d114      	bne.n	8003802 <UART_Transmit_IT+0x48>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d110      	bne.n	8003802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	1c9a      	adds	r2, r3, #2
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]
 8003800:	e008      	b.n	8003814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	1c59      	adds	r1, r3, #1
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6211      	str	r1, [r2, #32]
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29b      	uxth	r3, r3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4619      	mov	r1, r3
 8003822:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10f      	bne.n	8003848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fd48 	bl	8003310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b08c      	sub	sp, #48	; 0x30
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b22      	cmp	r3, #34	; 0x22
 800389c:	f040 80ab 	bne.w	80039f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d117      	bne.n	80038da <UART_Receive_IT+0x50>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
 80038d8:	e026      	b.n	8003928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	d007      	beq.n	80038fe <UART_Receive_IT+0x74>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <UART_Receive_IT+0x82>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e008      	b.n	800391e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003918:	b2da      	uxtb	r2, r3
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4619      	mov	r1, r3
 8003936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003938:	2b00      	cmp	r3, #0
 800393a:	d15a      	bne.n	80039f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0220 	bic.w	r2, r2, #32
 800394a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	2b01      	cmp	r3, #1
 800397a:	d135      	bne.n	80039e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	613b      	str	r3, [r7, #16]
   return(result);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f023 0310 	bic.w	r3, r3, #16
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	623a      	str	r2, [r7, #32]
 80039a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	69f9      	ldr	r1, [r7, #28]
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e5      	bne.n	8003982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d10a      	bne.n	80039da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fca9 	bl	8003338 <HAL_UARTEx_RxEventCallback>
 80039e6:	e002      	b.n	80039ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd fb0d 	bl	8001008 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e002      	b.n	80039f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3730      	adds	r7, #48	; 0x30
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a04:	b0c0      	sub	sp, #256	; 0x100
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	68d9      	ldr	r1, [r3, #12]
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	ea40 0301 	orr.w	r3, r0, r1
 8003a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a58:	f021 010c 	bic.w	r1, r1, #12
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a66:	430b      	orrs	r3, r1
 8003a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7a:	6999      	ldr	r1, [r3, #24]
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	ea40 0301 	orr.w	r3, r0, r1
 8003a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b8f      	ldr	r3, [pc, #572]	; (8003ccc <UART_SetConfig+0x2cc>)
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d005      	beq.n	8003aa0 <UART_SetConfig+0xa0>
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b8d      	ldr	r3, [pc, #564]	; (8003cd0 <UART_SetConfig+0x2d0>)
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d104      	bne.n	8003aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7ff f916 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aa8:	e003      	b.n	8003ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aaa:	f7ff f8fd 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abc:	f040 810c 	bne.w	8003cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	1891      	adds	r1, r2, r2
 8003ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ada:	415b      	adcs	r3, r3
 8003adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	eb12 0801 	adds.w	r8, r2, r1
 8003ae8:	4629      	mov	r1, r5
 8003aea:	eb43 0901 	adc.w	r9, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b02:	4690      	mov	r8, r2
 8003b04:	4699      	mov	r9, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb18 0303 	adds.w	r3, r8, r3
 8003b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b10:	462b      	mov	r3, r5
 8003b12:	eb49 0303 	adc.w	r3, r9, r3
 8003b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b2e:	460b      	mov	r3, r1
 8003b30:	18db      	adds	r3, r3, r3
 8003b32:	653b      	str	r3, [r7, #80]	; 0x50
 8003b34:	4613      	mov	r3, r2
 8003b36:	eb42 0303 	adc.w	r3, r2, r3
 8003b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b44:	f7fd f880 	bl	8000c48 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	011c      	lsls	r4, r3, #4
 8003b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b70:	415b      	adcs	r3, r3
 8003b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b78:	4641      	mov	r1, r8
 8003b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb43 0b01 	adc.w	fp, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b98:	4692      	mov	sl, r2
 8003b9a:	469b      	mov	fp, r3
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bda:	f7fd f835 	bl	8000c48 <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003be6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2264      	movs	r2, #100	; 0x64
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	1acb      	subs	r3, r1, r3
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bfa:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c08:	441c      	add	r4, r3
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c24:	415b      	adcs	r3, r3
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	6339      	str	r1, [r7, #48]	; 0x30
 8003c32:	4649      	mov	r1, r9
 8003c34:	414b      	adcs	r3, r1
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c44:	4659      	mov	r1, fp
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4e:	4651      	mov	r1, sl
 8003c50:	00ca      	lsls	r2, r1, #3
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c60:	464b      	mov	r3, r9
 8003c62:	460a      	mov	r2, r1
 8003c64:	eb42 0303 	adc.w	r3, r2, r3
 8003c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c80:	460b      	mov	r3, r1
 8003c82:	18db      	adds	r3, r3, r3
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	4613      	mov	r3, r2
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c96:	f7fc ffd7 	bl	8000c48 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	; 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3332      	adds	r3, #50	; 0x32
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 0207 	and.w	r2, r3, #7
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4422      	add	r2, r4
 8003cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc8:	e106      	b.n	8003ed8 <UART_SetConfig+0x4d8>
 8003cca:	bf00      	nop
 8003ccc:	40011000 	.word	0x40011000
 8003cd0:	40011400 	.word	0x40011400
 8003cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cea:	4642      	mov	r2, r8
 8003cec:	464b      	mov	r3, r9
 8003cee:	1891      	adds	r1, r2, r2
 8003cf0:	6239      	str	r1, [r7, #32]
 8003cf2:	415b      	adcs	r3, r3
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	1854      	adds	r4, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb43 0501 	adc.w	r5, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	00eb      	lsls	r3, r5, #3
 8003d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d12:	00e2      	lsls	r2, r4, #3
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	4643      	mov	r3, r8
 8003d1a:	18e3      	adds	r3, r4, r3
 8003d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d20:	464b      	mov	r3, r9
 8003d22:	eb45 0303 	adc.w	r3, r5, r3
 8003d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d46:	4629      	mov	r1, r5
 8003d48:	008b      	lsls	r3, r1, #2
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d50:	4621      	mov	r1, r4
 8003d52:	008a      	lsls	r2, r1, #2
 8003d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d58:	f7fc ff76 	bl	8000c48 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4b60      	ldr	r3, [pc, #384]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003d62:	fba3 2302 	umull	r2, r3, r3, r2
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	011c      	lsls	r4, r3, #4
 8003d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	1891      	adds	r1, r2, r2
 8003d82:	61b9      	str	r1, [r7, #24]
 8003d84:	415b      	adcs	r3, r3
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	1851      	adds	r1, r2, r1
 8003d90:	6139      	str	r1, [r7, #16]
 8003d92:	4649      	mov	r1, r9
 8003d94:	414b      	adcs	r3, r1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da4:	4659      	mov	r1, fp
 8003da6:	00cb      	lsls	r3, r1, #3
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dae:	4651      	mov	r1, sl
 8003db0:	00ca      	lsls	r2, r1, #3
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	4642      	mov	r2, r8
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	460a      	mov	r2, r1
 8003dc4:	eb42 0303 	adc.w	r3, r2, r3
 8003dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003de4:	4649      	mov	r1, r9
 8003de6:	008b      	lsls	r3, r1, #2
 8003de8:	4641      	mov	r1, r8
 8003dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dee:	4641      	mov	r1, r8
 8003df0:	008a      	lsls	r2, r1, #2
 8003df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003df6:	f7fc ff27 	bl	8000c48 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003e02:	fba3 2301 	umull	r2, r3, r3, r1
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2264      	movs	r2, #100	; 0x64
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	1acb      	subs	r3, r1, r3
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	3332      	adds	r3, #50	; 0x32
 8003e14:	4a33      	ldr	r2, [pc, #204]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e20:	441c      	add	r4, r3
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	673b      	str	r3, [r7, #112]	; 0x70
 8003e2a:	677a      	str	r2, [r7, #116]	; 0x74
 8003e2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e40:	4641      	mov	r1, r8
 8003e42:	1851      	adds	r1, r2, r1
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	4649      	mov	r1, r9
 8003e48:	414b      	adcs	r3, r1
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e58:	4659      	mov	r1, fp
 8003e5a:	00cb      	lsls	r3, r1, #3
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e62:	4651      	mov	r1, sl
 8003e64:	00ca      	lsls	r2, r1, #3
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e72:	464b      	mov	r3, r9
 8003e74:	460a      	mov	r2, r1
 8003e76:	eb42 0303 	adc.w	r3, r2, r3
 8003e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	663b      	str	r3, [r7, #96]	; 0x60
 8003e86:	667a      	str	r2, [r7, #100]	; 0x64
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e94:	4649      	mov	r1, r9
 8003e96:	008b      	lsls	r3, r1, #2
 8003e98:	4641      	mov	r1, r8
 8003e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	008a      	lsls	r2, r1, #2
 8003ea2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ea6:	f7fc fecf 	bl	8000c48 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4422      	add	r2, r4
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee4:	51eb851f 	.word	0x51eb851f

08003ee8 <_scanf_float>:
 8003ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eec:	b087      	sub	sp, #28
 8003eee:	4617      	mov	r7, r2
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	688b      	ldr	r3, [r1, #8]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003efa:	bf83      	ittte	hi
 8003efc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003f00:	195b      	addhi	r3, r3, r5
 8003f02:	9302      	strhi	r3, [sp, #8]
 8003f04:	2300      	movls	r3, #0
 8003f06:	bf86      	itte	hi
 8003f08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003f0c:	608b      	strhi	r3, [r1, #8]
 8003f0e:	9302      	strls	r3, [sp, #8]
 8003f10:	680b      	ldr	r3, [r1, #0]
 8003f12:	468b      	mov	fp, r1
 8003f14:	2500      	movs	r5, #0
 8003f16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003f1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8003f1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003f22:	4680      	mov	r8, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	465e      	mov	r6, fp
 8003f28:	46aa      	mov	sl, r5
 8003f2a:	46a9      	mov	r9, r5
 8003f2c:	9501      	str	r5, [sp, #4]
 8003f2e:	68a2      	ldr	r2, [r4, #8]
 8003f30:	b152      	cbz	r2, 8003f48 <_scanf_float+0x60>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b4e      	cmp	r3, #78	; 0x4e
 8003f38:	d864      	bhi.n	8004004 <_scanf_float+0x11c>
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d83c      	bhi.n	8003fb8 <_scanf_float+0xd0>
 8003f3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003f42:	b2c8      	uxtb	r0, r1
 8003f44:	280e      	cmp	r0, #14
 8003f46:	d93a      	bls.n	8003fbe <_scanf_float+0xd6>
 8003f48:	f1b9 0f00 	cmp.w	r9, #0
 8003f4c:	d003      	beq.n	8003f56 <_scanf_float+0x6e>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f5a:	f1ba 0f01 	cmp.w	sl, #1
 8003f5e:	f200 8113 	bhi.w	8004188 <_scanf_float+0x2a0>
 8003f62:	455e      	cmp	r6, fp
 8003f64:	f200 8105 	bhi.w	8004172 <_scanf_float+0x28a>
 8003f68:	2501      	movs	r5, #1
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	b007      	add	sp, #28
 8003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003f76:	2a0d      	cmp	r2, #13
 8003f78:	d8e6      	bhi.n	8003f48 <_scanf_float+0x60>
 8003f7a:	a101      	add	r1, pc, #4	; (adr r1, 8003f80 <_scanf_float+0x98>)
 8003f7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003f80:	080040bf 	.word	0x080040bf
 8003f84:	08003f49 	.word	0x08003f49
 8003f88:	08003f49 	.word	0x08003f49
 8003f8c:	08003f49 	.word	0x08003f49
 8003f90:	0800411f 	.word	0x0800411f
 8003f94:	080040f7 	.word	0x080040f7
 8003f98:	08003f49 	.word	0x08003f49
 8003f9c:	08003f49 	.word	0x08003f49
 8003fa0:	080040cd 	.word	0x080040cd
 8003fa4:	08003f49 	.word	0x08003f49
 8003fa8:	08003f49 	.word	0x08003f49
 8003fac:	08003f49 	.word	0x08003f49
 8003fb0:	08003f49 	.word	0x08003f49
 8003fb4:	08004085 	.word	0x08004085
 8003fb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003fbc:	e7db      	b.n	8003f76 <_scanf_float+0x8e>
 8003fbe:	290e      	cmp	r1, #14
 8003fc0:	d8c2      	bhi.n	8003f48 <_scanf_float+0x60>
 8003fc2:	a001      	add	r0, pc, #4	; (adr r0, 8003fc8 <_scanf_float+0xe0>)
 8003fc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003fc8:	08004077 	.word	0x08004077
 8003fcc:	08003f49 	.word	0x08003f49
 8003fd0:	08004077 	.word	0x08004077
 8003fd4:	0800410b 	.word	0x0800410b
 8003fd8:	08003f49 	.word	0x08003f49
 8003fdc:	08004025 	.word	0x08004025
 8003fe0:	08004061 	.word	0x08004061
 8003fe4:	08004061 	.word	0x08004061
 8003fe8:	08004061 	.word	0x08004061
 8003fec:	08004061 	.word	0x08004061
 8003ff0:	08004061 	.word	0x08004061
 8003ff4:	08004061 	.word	0x08004061
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004061 	.word	0x08004061
 8004004:	2b6e      	cmp	r3, #110	; 0x6e
 8004006:	d809      	bhi.n	800401c <_scanf_float+0x134>
 8004008:	2b60      	cmp	r3, #96	; 0x60
 800400a:	d8b2      	bhi.n	8003f72 <_scanf_float+0x8a>
 800400c:	2b54      	cmp	r3, #84	; 0x54
 800400e:	d077      	beq.n	8004100 <_scanf_float+0x218>
 8004010:	2b59      	cmp	r3, #89	; 0x59
 8004012:	d199      	bne.n	8003f48 <_scanf_float+0x60>
 8004014:	2d07      	cmp	r5, #7
 8004016:	d197      	bne.n	8003f48 <_scanf_float+0x60>
 8004018:	2508      	movs	r5, #8
 800401a:	e029      	b.n	8004070 <_scanf_float+0x188>
 800401c:	2b74      	cmp	r3, #116	; 0x74
 800401e:	d06f      	beq.n	8004100 <_scanf_float+0x218>
 8004020:	2b79      	cmp	r3, #121	; 0x79
 8004022:	e7f6      	b.n	8004012 <_scanf_float+0x12a>
 8004024:	6821      	ldr	r1, [r4, #0]
 8004026:	05c8      	lsls	r0, r1, #23
 8004028:	d51a      	bpl.n	8004060 <_scanf_float+0x178>
 800402a:	9b02      	ldr	r3, [sp, #8]
 800402c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004030:	6021      	str	r1, [r4, #0]
 8004032:	f109 0901 	add.w	r9, r9, #1
 8004036:	b11b      	cbz	r3, 8004040 <_scanf_float+0x158>
 8004038:	3b01      	subs	r3, #1
 800403a:	3201      	adds	r2, #1
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	60a2      	str	r2, [r4, #8]
 8004040:	68a3      	ldr	r3, [r4, #8]
 8004042:	3b01      	subs	r3, #1
 8004044:	60a3      	str	r3, [r4, #8]
 8004046:	6923      	ldr	r3, [r4, #16]
 8004048:	3301      	adds	r3, #1
 800404a:	6123      	str	r3, [r4, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	f340 8084 	ble.w	8004160 <_scanf_float+0x278>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	e766      	b.n	8003f2e <_scanf_float+0x46>
 8004060:	eb1a 0f05 	cmn.w	sl, r5
 8004064:	f47f af70 	bne.w	8003f48 <_scanf_float+0x60>
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800406e:	6022      	str	r2, [r4, #0]
 8004070:	f806 3b01 	strb.w	r3, [r6], #1
 8004074:	e7e4      	b.n	8004040 <_scanf_float+0x158>
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	0610      	lsls	r0, r2, #24
 800407a:	f57f af65 	bpl.w	8003f48 <_scanf_float+0x60>
 800407e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004082:	e7f4      	b.n	800406e <_scanf_float+0x186>
 8004084:	f1ba 0f00 	cmp.w	sl, #0
 8004088:	d10e      	bne.n	80040a8 <_scanf_float+0x1c0>
 800408a:	f1b9 0f00 	cmp.w	r9, #0
 800408e:	d10e      	bne.n	80040ae <_scanf_float+0x1c6>
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004096:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800409a:	d108      	bne.n	80040ae <_scanf_float+0x1c6>
 800409c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80040a0:	6022      	str	r2, [r4, #0]
 80040a2:	f04f 0a01 	mov.w	sl, #1
 80040a6:	e7e3      	b.n	8004070 <_scanf_float+0x188>
 80040a8:	f1ba 0f02 	cmp.w	sl, #2
 80040ac:	d055      	beq.n	800415a <_scanf_float+0x272>
 80040ae:	2d01      	cmp	r5, #1
 80040b0:	d002      	beq.n	80040b8 <_scanf_float+0x1d0>
 80040b2:	2d04      	cmp	r5, #4
 80040b4:	f47f af48 	bne.w	8003f48 <_scanf_float+0x60>
 80040b8:	3501      	adds	r5, #1
 80040ba:	b2ed      	uxtb	r5, r5
 80040bc:	e7d8      	b.n	8004070 <_scanf_float+0x188>
 80040be:	f1ba 0f01 	cmp.w	sl, #1
 80040c2:	f47f af41 	bne.w	8003f48 <_scanf_float+0x60>
 80040c6:	f04f 0a02 	mov.w	sl, #2
 80040ca:	e7d1      	b.n	8004070 <_scanf_float+0x188>
 80040cc:	b97d      	cbnz	r5, 80040ee <_scanf_float+0x206>
 80040ce:	f1b9 0f00 	cmp.w	r9, #0
 80040d2:	f47f af3c 	bne.w	8003f4e <_scanf_float+0x66>
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80040dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80040e0:	f47f af39 	bne.w	8003f56 <_scanf_float+0x6e>
 80040e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80040e8:	6022      	str	r2, [r4, #0]
 80040ea:	2501      	movs	r5, #1
 80040ec:	e7c0      	b.n	8004070 <_scanf_float+0x188>
 80040ee:	2d03      	cmp	r5, #3
 80040f0:	d0e2      	beq.n	80040b8 <_scanf_float+0x1d0>
 80040f2:	2d05      	cmp	r5, #5
 80040f4:	e7de      	b.n	80040b4 <_scanf_float+0x1cc>
 80040f6:	2d02      	cmp	r5, #2
 80040f8:	f47f af26 	bne.w	8003f48 <_scanf_float+0x60>
 80040fc:	2503      	movs	r5, #3
 80040fe:	e7b7      	b.n	8004070 <_scanf_float+0x188>
 8004100:	2d06      	cmp	r5, #6
 8004102:	f47f af21 	bne.w	8003f48 <_scanf_float+0x60>
 8004106:	2507      	movs	r5, #7
 8004108:	e7b2      	b.n	8004070 <_scanf_float+0x188>
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	0591      	lsls	r1, r2, #22
 800410e:	f57f af1b 	bpl.w	8003f48 <_scanf_float+0x60>
 8004112:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004116:	6022      	str	r2, [r4, #0]
 8004118:	f8cd 9004 	str.w	r9, [sp, #4]
 800411c:	e7a8      	b.n	8004070 <_scanf_float+0x188>
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004124:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004128:	d006      	beq.n	8004138 <_scanf_float+0x250>
 800412a:	0550      	lsls	r0, r2, #21
 800412c:	f57f af0c 	bpl.w	8003f48 <_scanf_float+0x60>
 8004130:	f1b9 0f00 	cmp.w	r9, #0
 8004134:	f43f af0f 	beq.w	8003f56 <_scanf_float+0x6e>
 8004138:	0591      	lsls	r1, r2, #22
 800413a:	bf58      	it	pl
 800413c:	9901      	ldrpl	r1, [sp, #4]
 800413e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004142:	bf58      	it	pl
 8004144:	eba9 0101 	subpl.w	r1, r9, r1
 8004148:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800414c:	bf58      	it	pl
 800414e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	f04f 0900 	mov.w	r9, #0
 8004158:	e78a      	b.n	8004070 <_scanf_float+0x188>
 800415a:	f04f 0a03 	mov.w	sl, #3
 800415e:	e787      	b.n	8004070 <_scanf_float+0x188>
 8004160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004164:	4639      	mov	r1, r7
 8004166:	4640      	mov	r0, r8
 8004168:	4798      	blx	r3
 800416a:	2800      	cmp	r0, #0
 800416c:	f43f aedf 	beq.w	8003f2e <_scanf_float+0x46>
 8004170:	e6ea      	b.n	8003f48 <_scanf_float+0x60>
 8004172:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004176:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800417a:	463a      	mov	r2, r7
 800417c:	4640      	mov	r0, r8
 800417e:	4798      	blx	r3
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	3b01      	subs	r3, #1
 8004184:	6123      	str	r3, [r4, #16]
 8004186:	e6ec      	b.n	8003f62 <_scanf_float+0x7a>
 8004188:	1e6b      	subs	r3, r5, #1
 800418a:	2b06      	cmp	r3, #6
 800418c:	d825      	bhi.n	80041da <_scanf_float+0x2f2>
 800418e:	2d02      	cmp	r5, #2
 8004190:	d836      	bhi.n	8004200 <_scanf_float+0x318>
 8004192:	455e      	cmp	r6, fp
 8004194:	f67f aee8 	bls.w	8003f68 <_scanf_float+0x80>
 8004198:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800419c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041a0:	463a      	mov	r2, r7
 80041a2:	4640      	mov	r0, r8
 80041a4:	4798      	blx	r3
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	e7f1      	b.n	8004192 <_scanf_float+0x2aa>
 80041ae:	9802      	ldr	r0, [sp, #8]
 80041b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80041b8:	9002      	str	r0, [sp, #8]
 80041ba:	463a      	mov	r2, r7
 80041bc:	4640      	mov	r0, r8
 80041be:	4798      	blx	r3
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041ca:	fa5f fa8a 	uxtb.w	sl, sl
 80041ce:	f1ba 0f02 	cmp.w	sl, #2
 80041d2:	d1ec      	bne.n	80041ae <_scanf_float+0x2c6>
 80041d4:	3d03      	subs	r5, #3
 80041d6:	b2ed      	uxtb	r5, r5
 80041d8:	1b76      	subs	r6, r6, r5
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	05da      	lsls	r2, r3, #23
 80041de:	d52f      	bpl.n	8004240 <_scanf_float+0x358>
 80041e0:	055b      	lsls	r3, r3, #21
 80041e2:	d510      	bpl.n	8004206 <_scanf_float+0x31e>
 80041e4:	455e      	cmp	r6, fp
 80041e6:	f67f aebf 	bls.w	8003f68 <_scanf_float+0x80>
 80041ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041f2:	463a      	mov	r2, r7
 80041f4:	4640      	mov	r0, r8
 80041f6:	4798      	blx	r3
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	e7f1      	b.n	80041e4 <_scanf_float+0x2fc>
 8004200:	46aa      	mov	sl, r5
 8004202:	9602      	str	r6, [sp, #8]
 8004204:	e7df      	b.n	80041c6 <_scanf_float+0x2de>
 8004206:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800420a:	6923      	ldr	r3, [r4, #16]
 800420c:	2965      	cmp	r1, #101	; 0x65
 800420e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004212:	f106 35ff 	add.w	r5, r6, #4294967295
 8004216:	6123      	str	r3, [r4, #16]
 8004218:	d00c      	beq.n	8004234 <_scanf_float+0x34c>
 800421a:	2945      	cmp	r1, #69	; 0x45
 800421c:	d00a      	beq.n	8004234 <_scanf_float+0x34c>
 800421e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004222:	463a      	mov	r2, r7
 8004224:	4640      	mov	r0, r8
 8004226:	4798      	blx	r3
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800422e:	3b01      	subs	r3, #1
 8004230:	1eb5      	subs	r5, r6, #2
 8004232:	6123      	str	r3, [r4, #16]
 8004234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004238:	463a      	mov	r2, r7
 800423a:	4640      	mov	r0, r8
 800423c:	4798      	blx	r3
 800423e:	462e      	mov	r6, r5
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	f015 0510 	ands.w	r5, r5, #16
 8004246:	d158      	bne.n	80042fa <_scanf_float+0x412>
 8004248:	7035      	strb	r5, [r6, #0]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	d11c      	bne.n	8004290 <_scanf_float+0x3a8>
 8004256:	9b01      	ldr	r3, [sp, #4]
 8004258:	454b      	cmp	r3, r9
 800425a:	eba3 0209 	sub.w	r2, r3, r9
 800425e:	d124      	bne.n	80042aa <_scanf_float+0x3c2>
 8004260:	2200      	movs	r2, #0
 8004262:	4659      	mov	r1, fp
 8004264:	4640      	mov	r0, r8
 8004266:	f001 f917 	bl	8005498 <_strtod_r>
 800426a:	9b03      	ldr	r3, [sp, #12]
 800426c:	6821      	ldr	r1, [r4, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f011 0f02 	tst.w	r1, #2
 8004274:	ec57 6b10 	vmov	r6, r7, d0
 8004278:	f103 0204 	add.w	r2, r3, #4
 800427c:	d020      	beq.n	80042c0 <_scanf_float+0x3d8>
 800427e:	9903      	ldr	r1, [sp, #12]
 8004280:	600a      	str	r2, [r1, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	e9c3 6700 	strd	r6, r7, [r3]
 8004288:	68e3      	ldr	r3, [r4, #12]
 800428a:	3301      	adds	r3, #1
 800428c:	60e3      	str	r3, [r4, #12]
 800428e:	e66c      	b.n	8003f6a <_scanf_float+0x82>
 8004290:	9b04      	ldr	r3, [sp, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0e4      	beq.n	8004260 <_scanf_float+0x378>
 8004296:	9905      	ldr	r1, [sp, #20]
 8004298:	230a      	movs	r3, #10
 800429a:	462a      	mov	r2, r5
 800429c:	3101      	adds	r1, #1
 800429e:	4640      	mov	r0, r8
 80042a0:	f001 f982 	bl	80055a8 <_strtol_r>
 80042a4:	9b04      	ldr	r3, [sp, #16]
 80042a6:	9e05      	ldr	r6, [sp, #20]
 80042a8:	1ac2      	subs	r2, r0, r3
 80042aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80042ae:	429e      	cmp	r6, r3
 80042b0:	bf28      	it	cs
 80042b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80042b6:	4912      	ldr	r1, [pc, #72]	; (8004300 <_scanf_float+0x418>)
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 f8d5 	bl	8004468 <siprintf>
 80042be:	e7cf      	b.n	8004260 <_scanf_float+0x378>
 80042c0:	f011 0f04 	tst.w	r1, #4
 80042c4:	9903      	ldr	r1, [sp, #12]
 80042c6:	600a      	str	r2, [r1, #0]
 80042c8:	d1db      	bne.n	8004282 <_scanf_float+0x39a>
 80042ca:	f8d3 8000 	ldr.w	r8, [r3]
 80042ce:	ee10 2a10 	vmov	r2, s0
 80042d2:	ee10 0a10 	vmov	r0, s0
 80042d6:	463b      	mov	r3, r7
 80042d8:	4639      	mov	r1, r7
 80042da:	f7fc fc2f 	bl	8000b3c <__aeabi_dcmpun>
 80042de:	b128      	cbz	r0, 80042ec <_scanf_float+0x404>
 80042e0:	4808      	ldr	r0, [pc, #32]	; (8004304 <_scanf_float+0x41c>)
 80042e2:	f000 f9cd 	bl	8004680 <nanf>
 80042e6:	ed88 0a00 	vstr	s0, [r8]
 80042ea:	e7cd      	b.n	8004288 <_scanf_float+0x3a0>
 80042ec:	4630      	mov	r0, r6
 80042ee:	4639      	mov	r1, r7
 80042f0:	f7fc fc5a 	bl	8000ba8 <__aeabi_d2f>
 80042f4:	f8c8 0000 	str.w	r0, [r8]
 80042f8:	e7c6      	b.n	8004288 <_scanf_float+0x3a0>
 80042fa:	2500      	movs	r5, #0
 80042fc:	e635      	b.n	8003f6a <_scanf_float+0x82>
 80042fe:	bf00      	nop
 8004300:	08007c88 	.word	0x08007c88
 8004304:	0800805f 	.word	0x0800805f

08004308 <std>:
 8004308:	2300      	movs	r3, #0
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	e9c0 3300 	strd	r3, r3, [r0]
 8004312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004316:	6083      	str	r3, [r0, #8]
 8004318:	8181      	strh	r1, [r0, #12]
 800431a:	6643      	str	r3, [r0, #100]	; 0x64
 800431c:	81c2      	strh	r2, [r0, #14]
 800431e:	6183      	str	r3, [r0, #24]
 8004320:	4619      	mov	r1, r3
 8004322:	2208      	movs	r2, #8
 8004324:	305c      	adds	r0, #92	; 0x5c
 8004326:	f000 f930 	bl	800458a <memset>
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <std+0x38>)
 800432c:	6263      	str	r3, [r4, #36]	; 0x24
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <std+0x3c>)
 8004330:	62a3      	str	r3, [r4, #40]	; 0x28
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <std+0x40>)
 8004334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <std+0x44>)
 8004338:	6224      	str	r4, [r4, #32]
 800433a:	6323      	str	r3, [r4, #48]	; 0x30
 800433c:	bd10      	pop	{r4, pc}
 800433e:	bf00      	nop
 8004340:	08004501 	.word	0x08004501
 8004344:	08004527 	.word	0x08004527
 8004348:	0800455f 	.word	0x0800455f
 800434c:	08004583 	.word	0x08004583

08004350 <stdio_exit_handler>:
 8004350:	4a02      	ldr	r2, [pc, #8]	; (800435c <stdio_exit_handler+0xc>)
 8004352:	4903      	ldr	r1, [pc, #12]	; (8004360 <stdio_exit_handler+0x10>)
 8004354:	4803      	ldr	r0, [pc, #12]	; (8004364 <stdio_exit_handler+0x14>)
 8004356:	f000 b869 	b.w	800442c <_fwalk_sglue>
 800435a:	bf00      	nop
 800435c:	2000000c 	.word	0x2000000c
 8004360:	080062c9 	.word	0x080062c9
 8004364:	20000018 	.word	0x20000018

08004368 <cleanup_stdio>:
 8004368:	6841      	ldr	r1, [r0, #4]
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <cleanup_stdio+0x34>)
 800436c:	4299      	cmp	r1, r3
 800436e:	b510      	push	{r4, lr}
 8004370:	4604      	mov	r4, r0
 8004372:	d001      	beq.n	8004378 <cleanup_stdio+0x10>
 8004374:	f001 ffa8 	bl	80062c8 <_fflush_r>
 8004378:	68a1      	ldr	r1, [r4, #8]
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <cleanup_stdio+0x38>)
 800437c:	4299      	cmp	r1, r3
 800437e:	d002      	beq.n	8004386 <cleanup_stdio+0x1e>
 8004380:	4620      	mov	r0, r4
 8004382:	f001 ffa1 	bl	80062c8 <_fflush_r>
 8004386:	68e1      	ldr	r1, [r4, #12]
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <cleanup_stdio+0x3c>)
 800438a:	4299      	cmp	r1, r3
 800438c:	d004      	beq.n	8004398 <cleanup_stdio+0x30>
 800438e:	4620      	mov	r0, r4
 8004390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004394:	f001 bf98 	b.w	80062c8 <_fflush_r>
 8004398:	bd10      	pop	{r4, pc}
 800439a:	bf00      	nop
 800439c:	200002d0 	.word	0x200002d0
 80043a0:	20000338 	.word	0x20000338
 80043a4:	200003a0 	.word	0x200003a0

080043a8 <global_stdio_init.part.0>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <global_stdio_init.part.0+0x30>)
 80043ac:	4c0b      	ldr	r4, [pc, #44]	; (80043dc <global_stdio_init.part.0+0x34>)
 80043ae:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <global_stdio_init.part.0+0x38>)
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	4620      	mov	r0, r4
 80043b4:	2200      	movs	r2, #0
 80043b6:	2104      	movs	r1, #4
 80043b8:	f7ff ffa6 	bl	8004308 <std>
 80043bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80043c0:	2201      	movs	r2, #1
 80043c2:	2109      	movs	r1, #9
 80043c4:	f7ff ffa0 	bl	8004308 <std>
 80043c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80043cc:	2202      	movs	r2, #2
 80043ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d2:	2112      	movs	r1, #18
 80043d4:	f7ff bf98 	b.w	8004308 <std>
 80043d8:	20000408 	.word	0x20000408
 80043dc:	200002d0 	.word	0x200002d0
 80043e0:	08004351 	.word	0x08004351

080043e4 <__sfp_lock_acquire>:
 80043e4:	4801      	ldr	r0, [pc, #4]	; (80043ec <__sfp_lock_acquire+0x8>)
 80043e6:	f000 b949 	b.w	800467c <__retarget_lock_acquire_recursive>
 80043ea:	bf00      	nop
 80043ec:	20000411 	.word	0x20000411

080043f0 <__sfp_lock_release>:
 80043f0:	4801      	ldr	r0, [pc, #4]	; (80043f8 <__sfp_lock_release+0x8>)
 80043f2:	f000 b944 	b.w	800467e <__retarget_lock_release_recursive>
 80043f6:	bf00      	nop
 80043f8:	20000411 	.word	0x20000411

080043fc <__sinit>:
 80043fc:	b510      	push	{r4, lr}
 80043fe:	4604      	mov	r4, r0
 8004400:	f7ff fff0 	bl	80043e4 <__sfp_lock_acquire>
 8004404:	6a23      	ldr	r3, [r4, #32]
 8004406:	b11b      	cbz	r3, 8004410 <__sinit+0x14>
 8004408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440c:	f7ff bff0 	b.w	80043f0 <__sfp_lock_release>
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <__sinit+0x28>)
 8004412:	6223      	str	r3, [r4, #32]
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <__sinit+0x2c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f5      	bne.n	8004408 <__sinit+0xc>
 800441c:	f7ff ffc4 	bl	80043a8 <global_stdio_init.part.0>
 8004420:	e7f2      	b.n	8004408 <__sinit+0xc>
 8004422:	bf00      	nop
 8004424:	08004369 	.word	0x08004369
 8004428:	20000408 	.word	0x20000408

0800442c <_fwalk_sglue>:
 800442c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004430:	4607      	mov	r7, r0
 8004432:	4688      	mov	r8, r1
 8004434:	4614      	mov	r4, r2
 8004436:	2600      	movs	r6, #0
 8004438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800443c:	f1b9 0901 	subs.w	r9, r9, #1
 8004440:	d505      	bpl.n	800444e <_fwalk_sglue+0x22>
 8004442:	6824      	ldr	r4, [r4, #0]
 8004444:	2c00      	cmp	r4, #0
 8004446:	d1f7      	bne.n	8004438 <_fwalk_sglue+0xc>
 8004448:	4630      	mov	r0, r6
 800444a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800444e:	89ab      	ldrh	r3, [r5, #12]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d907      	bls.n	8004464 <_fwalk_sglue+0x38>
 8004454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004458:	3301      	adds	r3, #1
 800445a:	d003      	beq.n	8004464 <_fwalk_sglue+0x38>
 800445c:	4629      	mov	r1, r5
 800445e:	4638      	mov	r0, r7
 8004460:	47c0      	blx	r8
 8004462:	4306      	orrs	r6, r0
 8004464:	3568      	adds	r5, #104	; 0x68
 8004466:	e7e9      	b.n	800443c <_fwalk_sglue+0x10>

08004468 <siprintf>:
 8004468:	b40e      	push	{r1, r2, r3}
 800446a:	b500      	push	{lr}
 800446c:	b09c      	sub	sp, #112	; 0x70
 800446e:	ab1d      	add	r3, sp, #116	; 0x74
 8004470:	9002      	str	r0, [sp, #8]
 8004472:	9006      	str	r0, [sp, #24]
 8004474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004478:	4809      	ldr	r0, [pc, #36]	; (80044a0 <siprintf+0x38>)
 800447a:	9107      	str	r1, [sp, #28]
 800447c:	9104      	str	r1, [sp, #16]
 800447e:	4909      	ldr	r1, [pc, #36]	; (80044a4 <siprintf+0x3c>)
 8004480:	f853 2b04 	ldr.w	r2, [r3], #4
 8004484:	9105      	str	r1, [sp, #20]
 8004486:	6800      	ldr	r0, [r0, #0]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	a902      	add	r1, sp, #8
 800448c:	f001 f8e8 	bl	8005660 <_svfiprintf_r>
 8004490:	9b02      	ldr	r3, [sp, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	b01c      	add	sp, #112	; 0x70
 8004498:	f85d eb04 	ldr.w	lr, [sp], #4
 800449c:	b003      	add	sp, #12
 800449e:	4770      	bx	lr
 80044a0:	20000064 	.word	0x20000064
 80044a4:	ffff0208 	.word	0xffff0208

080044a8 <siscanf>:
 80044a8:	b40e      	push	{r1, r2, r3}
 80044aa:	b510      	push	{r4, lr}
 80044ac:	b09f      	sub	sp, #124	; 0x7c
 80044ae:	ac21      	add	r4, sp, #132	; 0x84
 80044b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80044b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80044b8:	9201      	str	r2, [sp, #4]
 80044ba:	f8ad 101c 	strh.w	r1, [sp, #28]
 80044be:	9004      	str	r0, [sp, #16]
 80044c0:	9008      	str	r0, [sp, #32]
 80044c2:	f7fb fe8d 	bl	80001e0 <strlen>
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <siscanf+0x50>)
 80044c8:	9005      	str	r0, [sp, #20]
 80044ca:	9009      	str	r0, [sp, #36]	; 0x24
 80044cc:	930d      	str	r3, [sp, #52]	; 0x34
 80044ce:	480b      	ldr	r0, [pc, #44]	; (80044fc <siscanf+0x54>)
 80044d0:	9a01      	ldr	r2, [sp, #4]
 80044d2:	6800      	ldr	r0, [r0, #0]
 80044d4:	9403      	str	r4, [sp, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	9311      	str	r3, [sp, #68]	; 0x44
 80044da:	9316      	str	r3, [sp, #88]	; 0x58
 80044dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80044e4:	a904      	add	r1, sp, #16
 80044e6:	4623      	mov	r3, r4
 80044e8:	f001 fa12 	bl	8005910 <__ssvfiscanf_r>
 80044ec:	b01f      	add	sp, #124	; 0x7c
 80044ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f2:	b003      	add	sp, #12
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	08004523 	.word	0x08004523
 80044fc:	20000064 	.word	0x20000064

08004500 <__sread>:
 8004500:	b510      	push	{r4, lr}
 8004502:	460c      	mov	r4, r1
 8004504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004508:	f000 f86a 	bl	80045e0 <_read_r>
 800450c:	2800      	cmp	r0, #0
 800450e:	bfab      	itete	ge
 8004510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004512:	89a3      	ldrhlt	r3, [r4, #12]
 8004514:	181b      	addge	r3, r3, r0
 8004516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800451a:	bfac      	ite	ge
 800451c:	6563      	strge	r3, [r4, #84]	; 0x54
 800451e:	81a3      	strhlt	r3, [r4, #12]
 8004520:	bd10      	pop	{r4, pc}

08004522 <__seofread>:
 8004522:	2000      	movs	r0, #0
 8004524:	4770      	bx	lr

08004526 <__swrite>:
 8004526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800452a:	461f      	mov	r7, r3
 800452c:	898b      	ldrh	r3, [r1, #12]
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	4605      	mov	r5, r0
 8004532:	460c      	mov	r4, r1
 8004534:	4616      	mov	r6, r2
 8004536:	d505      	bpl.n	8004544 <__swrite+0x1e>
 8004538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453c:	2302      	movs	r3, #2
 800453e:	2200      	movs	r2, #0
 8004540:	f000 f83c 	bl	80045bc <_lseek_r>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800454a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	4632      	mov	r2, r6
 8004552:	463b      	mov	r3, r7
 8004554:	4628      	mov	r0, r5
 8004556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	f000 b853 	b.w	8004604 <_write_r>

0800455e <__sseek>:
 800455e:	b510      	push	{r4, lr}
 8004560:	460c      	mov	r4, r1
 8004562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004566:	f000 f829 	bl	80045bc <_lseek_r>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	bf15      	itete	ne
 8004570:	6560      	strne	r0, [r4, #84]	; 0x54
 8004572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800457a:	81a3      	strheq	r3, [r4, #12]
 800457c:	bf18      	it	ne
 800457e:	81a3      	strhne	r3, [r4, #12]
 8004580:	bd10      	pop	{r4, pc}

08004582 <__sclose>:
 8004582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004586:	f000 b809 	b.w	800459c <_close_r>

0800458a <memset>:
 800458a:	4402      	add	r2, r0
 800458c:	4603      	mov	r3, r0
 800458e:	4293      	cmp	r3, r2
 8004590:	d100      	bne.n	8004594 <memset+0xa>
 8004592:	4770      	bx	lr
 8004594:	f803 1b01 	strb.w	r1, [r3], #1
 8004598:	e7f9      	b.n	800458e <memset+0x4>
	...

0800459c <_close_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d06      	ldr	r5, [pc, #24]	; (80045b8 <_close_r+0x1c>)
 80045a0:	2300      	movs	r3, #0
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc ff79 	bl	800149e <_close>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_close_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_close_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	2000040c 	.word	0x2000040c

080045bc <_lseek_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d07      	ldr	r5, [pc, #28]	; (80045dc <_lseek_r+0x20>)
 80045c0:	4604      	mov	r4, r0
 80045c2:	4608      	mov	r0, r1
 80045c4:	4611      	mov	r1, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	602a      	str	r2, [r5, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f7fc ff8e 	bl	80014ec <_lseek>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_lseek_r+0x1e>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_lseek_r+0x1e>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	2000040c 	.word	0x2000040c

080045e0 <_read_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d07      	ldr	r5, [pc, #28]	; (8004600 <_read_r+0x20>)
 80045e4:	4604      	mov	r4, r0
 80045e6:	4608      	mov	r0, r1
 80045e8:	4611      	mov	r1, r2
 80045ea:	2200      	movs	r2, #0
 80045ec:	602a      	str	r2, [r5, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f7fc ff1c 	bl	800142c <_read>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_read_r+0x1e>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_read_r+0x1e>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	2000040c 	.word	0x2000040c

08004604 <_write_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d07      	ldr	r5, [pc, #28]	; (8004624 <_write_r+0x20>)
 8004608:	4604      	mov	r4, r0
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	2200      	movs	r2, #0
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	f7fc ff27 	bl	8001466 <_write>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_write_r+0x1e>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_write_r+0x1e>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	2000040c 	.word	0x2000040c

08004628 <__errno>:
 8004628:	4b01      	ldr	r3, [pc, #4]	; (8004630 <__errno+0x8>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000064 	.word	0x20000064

08004634 <__libc_init_array>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4d0d      	ldr	r5, [pc, #52]	; (800466c <__libc_init_array+0x38>)
 8004638:	4c0d      	ldr	r4, [pc, #52]	; (8004670 <__libc_init_array+0x3c>)
 800463a:	1b64      	subs	r4, r4, r5
 800463c:	10a4      	asrs	r4, r4, #2
 800463e:	2600      	movs	r6, #0
 8004640:	42a6      	cmp	r6, r4
 8004642:	d109      	bne.n	8004658 <__libc_init_array+0x24>
 8004644:	4d0b      	ldr	r5, [pc, #44]	; (8004674 <__libc_init_array+0x40>)
 8004646:	4c0c      	ldr	r4, [pc, #48]	; (8004678 <__libc_init_array+0x44>)
 8004648:	f003 faf4 	bl	8007c34 <_init>
 800464c:	1b64      	subs	r4, r4, r5
 800464e:	10a4      	asrs	r4, r4, #2
 8004650:	2600      	movs	r6, #0
 8004652:	42a6      	cmp	r6, r4
 8004654:	d105      	bne.n	8004662 <__libc_init_array+0x2e>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	f855 3b04 	ldr.w	r3, [r5], #4
 800465c:	4798      	blx	r3
 800465e:	3601      	adds	r6, #1
 8004660:	e7ee      	b.n	8004640 <__libc_init_array+0xc>
 8004662:	f855 3b04 	ldr.w	r3, [r5], #4
 8004666:	4798      	blx	r3
 8004668:	3601      	adds	r6, #1
 800466a:	e7f2      	b.n	8004652 <__libc_init_array+0x1e>
 800466c:	08008068 	.word	0x08008068
 8004670:	08008068 	.word	0x08008068
 8004674:	08008068 	.word	0x08008068
 8004678:	0800806c 	.word	0x0800806c

0800467c <__retarget_lock_acquire_recursive>:
 800467c:	4770      	bx	lr

0800467e <__retarget_lock_release_recursive>:
 800467e:	4770      	bx	lr

08004680 <nanf>:
 8004680:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004688 <nanf+0x8>
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	7fc00000 	.word	0x7fc00000

0800468c <_free_r>:
 800468c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800468e:	2900      	cmp	r1, #0
 8004690:	d044      	beq.n	800471c <_free_r+0x90>
 8004692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004696:	9001      	str	r0, [sp, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f1a1 0404 	sub.w	r4, r1, #4
 800469e:	bfb8      	it	lt
 80046a0:	18e4      	addlt	r4, r4, r3
 80046a2:	f000 f8df 	bl	8004864 <__malloc_lock>
 80046a6:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <_free_r+0x94>)
 80046a8:	9801      	ldr	r0, [sp, #4]
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	b933      	cbnz	r3, 80046bc <_free_r+0x30>
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	6014      	str	r4, [r2, #0]
 80046b2:	b003      	add	sp, #12
 80046b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046b8:	f000 b8da 	b.w	8004870 <__malloc_unlock>
 80046bc:	42a3      	cmp	r3, r4
 80046be:	d908      	bls.n	80046d2 <_free_r+0x46>
 80046c0:	6825      	ldr	r5, [r4, #0]
 80046c2:	1961      	adds	r1, r4, r5
 80046c4:	428b      	cmp	r3, r1
 80046c6:	bf01      	itttt	eq
 80046c8:	6819      	ldreq	r1, [r3, #0]
 80046ca:	685b      	ldreq	r3, [r3, #4]
 80046cc:	1949      	addeq	r1, r1, r5
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	e7ed      	b.n	80046ae <_free_r+0x22>
 80046d2:	461a      	mov	r2, r3
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b10b      	cbz	r3, 80046dc <_free_r+0x50>
 80046d8:	42a3      	cmp	r3, r4
 80046da:	d9fa      	bls.n	80046d2 <_free_r+0x46>
 80046dc:	6811      	ldr	r1, [r2, #0]
 80046de:	1855      	adds	r5, r2, r1
 80046e0:	42a5      	cmp	r5, r4
 80046e2:	d10b      	bne.n	80046fc <_free_r+0x70>
 80046e4:	6824      	ldr	r4, [r4, #0]
 80046e6:	4421      	add	r1, r4
 80046e8:	1854      	adds	r4, r2, r1
 80046ea:	42a3      	cmp	r3, r4
 80046ec:	6011      	str	r1, [r2, #0]
 80046ee:	d1e0      	bne.n	80046b2 <_free_r+0x26>
 80046f0:	681c      	ldr	r4, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	6053      	str	r3, [r2, #4]
 80046f6:	440c      	add	r4, r1
 80046f8:	6014      	str	r4, [r2, #0]
 80046fa:	e7da      	b.n	80046b2 <_free_r+0x26>
 80046fc:	d902      	bls.n	8004704 <_free_r+0x78>
 80046fe:	230c      	movs	r3, #12
 8004700:	6003      	str	r3, [r0, #0]
 8004702:	e7d6      	b.n	80046b2 <_free_r+0x26>
 8004704:	6825      	ldr	r5, [r4, #0]
 8004706:	1961      	adds	r1, r4, r5
 8004708:	428b      	cmp	r3, r1
 800470a:	bf04      	itt	eq
 800470c:	6819      	ldreq	r1, [r3, #0]
 800470e:	685b      	ldreq	r3, [r3, #4]
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	bf04      	itt	eq
 8004714:	1949      	addeq	r1, r1, r5
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	6054      	str	r4, [r2, #4]
 800471a:	e7ca      	b.n	80046b2 <_free_r+0x26>
 800471c:	b003      	add	sp, #12
 800471e:	bd30      	pop	{r4, r5, pc}
 8004720:	20000414 	.word	0x20000414

08004724 <sbrk_aligned>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4e0e      	ldr	r6, [pc, #56]	; (8004760 <sbrk_aligned+0x3c>)
 8004728:	460c      	mov	r4, r1
 800472a:	6831      	ldr	r1, [r6, #0]
 800472c:	4605      	mov	r5, r0
 800472e:	b911      	cbnz	r1, 8004736 <sbrk_aligned+0x12>
 8004730:	f001 fe92 	bl	8006458 <_sbrk_r>
 8004734:	6030      	str	r0, [r6, #0]
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	f001 fe8d 	bl	8006458 <_sbrk_r>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d00a      	beq.n	8004758 <sbrk_aligned+0x34>
 8004742:	1cc4      	adds	r4, r0, #3
 8004744:	f024 0403 	bic.w	r4, r4, #3
 8004748:	42a0      	cmp	r0, r4
 800474a:	d007      	beq.n	800475c <sbrk_aligned+0x38>
 800474c:	1a21      	subs	r1, r4, r0
 800474e:	4628      	mov	r0, r5
 8004750:	f001 fe82 	bl	8006458 <_sbrk_r>
 8004754:	3001      	adds	r0, #1
 8004756:	d101      	bne.n	800475c <sbrk_aligned+0x38>
 8004758:	f04f 34ff 	mov.w	r4, #4294967295
 800475c:	4620      	mov	r0, r4
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	20000418 	.word	0x20000418

08004764 <_malloc_r>:
 8004764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004768:	1ccd      	adds	r5, r1, #3
 800476a:	f025 0503 	bic.w	r5, r5, #3
 800476e:	3508      	adds	r5, #8
 8004770:	2d0c      	cmp	r5, #12
 8004772:	bf38      	it	cc
 8004774:	250c      	movcc	r5, #12
 8004776:	2d00      	cmp	r5, #0
 8004778:	4607      	mov	r7, r0
 800477a:	db01      	blt.n	8004780 <_malloc_r+0x1c>
 800477c:	42a9      	cmp	r1, r5
 800477e:	d905      	bls.n	800478c <_malloc_r+0x28>
 8004780:	230c      	movs	r3, #12
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	2600      	movs	r6, #0
 8004786:	4630      	mov	r0, r6
 8004788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800478c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004860 <_malloc_r+0xfc>
 8004790:	f000 f868 	bl	8004864 <__malloc_lock>
 8004794:	f8d8 3000 	ldr.w	r3, [r8]
 8004798:	461c      	mov	r4, r3
 800479a:	bb5c      	cbnz	r4, 80047f4 <_malloc_r+0x90>
 800479c:	4629      	mov	r1, r5
 800479e:	4638      	mov	r0, r7
 80047a0:	f7ff ffc0 	bl	8004724 <sbrk_aligned>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	4604      	mov	r4, r0
 80047a8:	d155      	bne.n	8004856 <_malloc_r+0xf2>
 80047aa:	f8d8 4000 	ldr.w	r4, [r8]
 80047ae:	4626      	mov	r6, r4
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	d145      	bne.n	8004840 <_malloc_r+0xdc>
 80047b4:	2c00      	cmp	r4, #0
 80047b6:	d048      	beq.n	800484a <_malloc_r+0xe6>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	4631      	mov	r1, r6
 80047bc:	4638      	mov	r0, r7
 80047be:	eb04 0903 	add.w	r9, r4, r3
 80047c2:	f001 fe49 	bl	8006458 <_sbrk_r>
 80047c6:	4581      	cmp	r9, r0
 80047c8:	d13f      	bne.n	800484a <_malloc_r+0xe6>
 80047ca:	6821      	ldr	r1, [r4, #0]
 80047cc:	1a6d      	subs	r5, r5, r1
 80047ce:	4629      	mov	r1, r5
 80047d0:	4638      	mov	r0, r7
 80047d2:	f7ff ffa7 	bl	8004724 <sbrk_aligned>
 80047d6:	3001      	adds	r0, #1
 80047d8:	d037      	beq.n	800484a <_malloc_r+0xe6>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	442b      	add	r3, r5
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	f8d8 3000 	ldr.w	r3, [r8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d038      	beq.n	800485a <_malloc_r+0xf6>
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	42a2      	cmp	r2, r4
 80047ec:	d12b      	bne.n	8004846 <_malloc_r+0xe2>
 80047ee:	2200      	movs	r2, #0
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	e00f      	b.n	8004814 <_malloc_r+0xb0>
 80047f4:	6822      	ldr	r2, [r4, #0]
 80047f6:	1b52      	subs	r2, r2, r5
 80047f8:	d41f      	bmi.n	800483a <_malloc_r+0xd6>
 80047fa:	2a0b      	cmp	r2, #11
 80047fc:	d917      	bls.n	800482e <_malloc_r+0xca>
 80047fe:	1961      	adds	r1, r4, r5
 8004800:	42a3      	cmp	r3, r4
 8004802:	6025      	str	r5, [r4, #0]
 8004804:	bf18      	it	ne
 8004806:	6059      	strne	r1, [r3, #4]
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	bf08      	it	eq
 800480c:	f8c8 1000 	streq.w	r1, [r8]
 8004810:	5162      	str	r2, [r4, r5]
 8004812:	604b      	str	r3, [r1, #4]
 8004814:	4638      	mov	r0, r7
 8004816:	f104 060b 	add.w	r6, r4, #11
 800481a:	f000 f829 	bl	8004870 <__malloc_unlock>
 800481e:	f026 0607 	bic.w	r6, r6, #7
 8004822:	1d23      	adds	r3, r4, #4
 8004824:	1af2      	subs	r2, r6, r3
 8004826:	d0ae      	beq.n	8004786 <_malloc_r+0x22>
 8004828:	1b9b      	subs	r3, r3, r6
 800482a:	50a3      	str	r3, [r4, r2]
 800482c:	e7ab      	b.n	8004786 <_malloc_r+0x22>
 800482e:	42a3      	cmp	r3, r4
 8004830:	6862      	ldr	r2, [r4, #4]
 8004832:	d1dd      	bne.n	80047f0 <_malloc_r+0x8c>
 8004834:	f8c8 2000 	str.w	r2, [r8]
 8004838:	e7ec      	b.n	8004814 <_malloc_r+0xb0>
 800483a:	4623      	mov	r3, r4
 800483c:	6864      	ldr	r4, [r4, #4]
 800483e:	e7ac      	b.n	800479a <_malloc_r+0x36>
 8004840:	4634      	mov	r4, r6
 8004842:	6876      	ldr	r6, [r6, #4]
 8004844:	e7b4      	b.n	80047b0 <_malloc_r+0x4c>
 8004846:	4613      	mov	r3, r2
 8004848:	e7cc      	b.n	80047e4 <_malloc_r+0x80>
 800484a:	230c      	movs	r3, #12
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4638      	mov	r0, r7
 8004850:	f000 f80e 	bl	8004870 <__malloc_unlock>
 8004854:	e797      	b.n	8004786 <_malloc_r+0x22>
 8004856:	6025      	str	r5, [r4, #0]
 8004858:	e7dc      	b.n	8004814 <_malloc_r+0xb0>
 800485a:	605b      	str	r3, [r3, #4]
 800485c:	deff      	udf	#255	; 0xff
 800485e:	bf00      	nop
 8004860:	20000414 	.word	0x20000414

08004864 <__malloc_lock>:
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <__malloc_lock+0x8>)
 8004866:	f7ff bf09 	b.w	800467c <__retarget_lock_acquire_recursive>
 800486a:	bf00      	nop
 800486c:	20000410 	.word	0x20000410

08004870 <__malloc_unlock>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__malloc_unlock+0x8>)
 8004872:	f7ff bf04 	b.w	800467e <__retarget_lock_release_recursive>
 8004876:	bf00      	nop
 8004878:	20000410 	.word	0x20000410

0800487c <sulp>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4604      	mov	r4, r0
 8004880:	460d      	mov	r5, r1
 8004882:	ec45 4b10 	vmov	d0, r4, r5
 8004886:	4616      	mov	r6, r2
 8004888:	f002 fce4 	bl	8007254 <__ulp>
 800488c:	ec51 0b10 	vmov	r0, r1, d0
 8004890:	b17e      	cbz	r6, 80048b2 <sulp+0x36>
 8004892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004896:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800489a:	2b00      	cmp	r3, #0
 800489c:	dd09      	ble.n	80048b2 <sulp+0x36>
 800489e:	051b      	lsls	r3, r3, #20
 80048a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80048a4:	2400      	movs	r4, #0
 80048a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80048aa:	4622      	mov	r2, r4
 80048ac:	462b      	mov	r3, r5
 80048ae:	f7fb feab 	bl	8000608 <__aeabi_dmul>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	0000      	movs	r0, r0
	...

080048b8 <_strtod_l>:
 80048b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048bc:	ed2d 8b02 	vpush	{d8}
 80048c0:	b09b      	sub	sp, #108	; 0x6c
 80048c2:	4604      	mov	r4, r0
 80048c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80048c6:	2200      	movs	r2, #0
 80048c8:	9216      	str	r2, [sp, #88]	; 0x58
 80048ca:	460d      	mov	r5, r1
 80048cc:	f04f 0800 	mov.w	r8, #0
 80048d0:	f04f 0900 	mov.w	r9, #0
 80048d4:	460a      	mov	r2, r1
 80048d6:	9215      	str	r2, [sp, #84]	; 0x54
 80048d8:	7811      	ldrb	r1, [r2, #0]
 80048da:	292b      	cmp	r1, #43	; 0x2b
 80048dc:	d04c      	beq.n	8004978 <_strtod_l+0xc0>
 80048de:	d83a      	bhi.n	8004956 <_strtod_l+0x9e>
 80048e0:	290d      	cmp	r1, #13
 80048e2:	d834      	bhi.n	800494e <_strtod_l+0x96>
 80048e4:	2908      	cmp	r1, #8
 80048e6:	d834      	bhi.n	8004952 <_strtod_l+0x9a>
 80048e8:	2900      	cmp	r1, #0
 80048ea:	d03d      	beq.n	8004968 <_strtod_l+0xb0>
 80048ec:	2200      	movs	r2, #0
 80048ee:	920a      	str	r2, [sp, #40]	; 0x28
 80048f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80048f2:	7832      	ldrb	r2, [r6, #0]
 80048f4:	2a30      	cmp	r2, #48	; 0x30
 80048f6:	f040 80b4 	bne.w	8004a62 <_strtod_l+0x1aa>
 80048fa:	7872      	ldrb	r2, [r6, #1]
 80048fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004900:	2a58      	cmp	r2, #88	; 0x58
 8004902:	d170      	bne.n	80049e6 <_strtod_l+0x12e>
 8004904:	9302      	str	r3, [sp, #8]
 8004906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004908:	9301      	str	r3, [sp, #4]
 800490a:	ab16      	add	r3, sp, #88	; 0x58
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	4a8e      	ldr	r2, [pc, #568]	; (8004b48 <_strtod_l+0x290>)
 8004910:	ab17      	add	r3, sp, #92	; 0x5c
 8004912:	a915      	add	r1, sp, #84	; 0x54
 8004914:	4620      	mov	r0, r4
 8004916:	f001 fe2f 	bl	8006578 <__gethex>
 800491a:	f010 070f 	ands.w	r7, r0, #15
 800491e:	4605      	mov	r5, r0
 8004920:	d005      	beq.n	800492e <_strtod_l+0x76>
 8004922:	2f06      	cmp	r7, #6
 8004924:	d12a      	bne.n	800497c <_strtod_l+0xc4>
 8004926:	3601      	adds	r6, #1
 8004928:	2300      	movs	r3, #0
 800492a:	9615      	str	r6, [sp, #84]	; 0x54
 800492c:	930a      	str	r3, [sp, #40]	; 0x28
 800492e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 857f 	bne.w	8005434 <_strtod_l+0xb7c>
 8004936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004938:	b1db      	cbz	r3, 8004972 <_strtod_l+0xba>
 800493a:	4642      	mov	r2, r8
 800493c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004940:	ec43 2b10 	vmov	d0, r2, r3
 8004944:	b01b      	add	sp, #108	; 0x6c
 8004946:	ecbd 8b02 	vpop	{d8}
 800494a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494e:	2920      	cmp	r1, #32
 8004950:	d1cc      	bne.n	80048ec <_strtod_l+0x34>
 8004952:	3201      	adds	r2, #1
 8004954:	e7bf      	b.n	80048d6 <_strtod_l+0x1e>
 8004956:	292d      	cmp	r1, #45	; 0x2d
 8004958:	d1c8      	bne.n	80048ec <_strtod_l+0x34>
 800495a:	2101      	movs	r1, #1
 800495c:	910a      	str	r1, [sp, #40]	; 0x28
 800495e:	1c51      	adds	r1, r2, #1
 8004960:	9115      	str	r1, [sp, #84]	; 0x54
 8004962:	7852      	ldrb	r2, [r2, #1]
 8004964:	2a00      	cmp	r2, #0
 8004966:	d1c3      	bne.n	80048f0 <_strtod_l+0x38>
 8004968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800496a:	9515      	str	r5, [sp, #84]	; 0x54
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 855f 	bne.w	8005430 <_strtod_l+0xb78>
 8004972:	4642      	mov	r2, r8
 8004974:	464b      	mov	r3, r9
 8004976:	e7e3      	b.n	8004940 <_strtod_l+0x88>
 8004978:	2100      	movs	r1, #0
 800497a:	e7ef      	b.n	800495c <_strtod_l+0xa4>
 800497c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800497e:	b13a      	cbz	r2, 8004990 <_strtod_l+0xd8>
 8004980:	2135      	movs	r1, #53	; 0x35
 8004982:	a818      	add	r0, sp, #96	; 0x60
 8004984:	f002 fd63 	bl	800744e <__copybits>
 8004988:	9916      	ldr	r1, [sp, #88]	; 0x58
 800498a:	4620      	mov	r0, r4
 800498c:	f002 f936 	bl	8006bfc <_Bfree>
 8004990:	3f01      	subs	r7, #1
 8004992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004994:	2f04      	cmp	r7, #4
 8004996:	d806      	bhi.n	80049a6 <_strtod_l+0xee>
 8004998:	e8df f007 	tbb	[pc, r7]
 800499c:	201d0314 	.word	0x201d0314
 80049a0:	14          	.byte	0x14
 80049a1:	00          	.byte	0x00
 80049a2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80049a6:	05e9      	lsls	r1, r5, #23
 80049a8:	bf48      	it	mi
 80049aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80049ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049b2:	0d1b      	lsrs	r3, r3, #20
 80049b4:	051b      	lsls	r3, r3, #20
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1b9      	bne.n	800492e <_strtod_l+0x76>
 80049ba:	f7ff fe35 	bl	8004628 <__errno>
 80049be:	2322      	movs	r3, #34	; 0x22
 80049c0:	6003      	str	r3, [r0, #0]
 80049c2:	e7b4      	b.n	800492e <_strtod_l+0x76>
 80049c4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80049c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80049cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80049d4:	e7e7      	b.n	80049a6 <_strtod_l+0xee>
 80049d6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004b50 <_strtod_l+0x298>
 80049da:	e7e4      	b.n	80049a6 <_strtod_l+0xee>
 80049dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80049e0:	f04f 38ff 	mov.w	r8, #4294967295
 80049e4:	e7df      	b.n	80049a6 <_strtod_l+0xee>
 80049e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	9215      	str	r2, [sp, #84]	; 0x54
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b30      	cmp	r3, #48	; 0x30
 80049f0:	d0f9      	beq.n	80049e6 <_strtod_l+0x12e>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d09b      	beq.n	800492e <_strtod_l+0x76>
 80049f6:	2301      	movs	r3, #1
 80049f8:	f04f 0a00 	mov.w	sl, #0
 80049fc:	9304      	str	r3, [sp, #16]
 80049fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a02:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004a06:	46d3      	mov	fp, sl
 8004a08:	220a      	movs	r2, #10
 8004a0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004a0c:	7806      	ldrb	r6, [r0, #0]
 8004a0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004a12:	b2d9      	uxtb	r1, r3
 8004a14:	2909      	cmp	r1, #9
 8004a16:	d926      	bls.n	8004a66 <_strtod_l+0x1ae>
 8004a18:	494c      	ldr	r1, [pc, #304]	; (8004b4c <_strtod_l+0x294>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f001 fd09 	bl	8006432 <strncmp>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d030      	beq.n	8004a86 <_strtod_l+0x1ce>
 8004a24:	2000      	movs	r0, #0
 8004a26:	4632      	mov	r2, r6
 8004a28:	9005      	str	r0, [sp, #20]
 8004a2a:	465e      	mov	r6, fp
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2a65      	cmp	r2, #101	; 0x65
 8004a30:	d001      	beq.n	8004a36 <_strtod_l+0x17e>
 8004a32:	2a45      	cmp	r2, #69	; 0x45
 8004a34:	d113      	bne.n	8004a5e <_strtod_l+0x1a6>
 8004a36:	b91e      	cbnz	r6, 8004a40 <_strtod_l+0x188>
 8004a38:	9a04      	ldr	r2, [sp, #16]
 8004a3a:	4302      	orrs	r2, r0
 8004a3c:	d094      	beq.n	8004968 <_strtod_l+0xb0>
 8004a3e:	2600      	movs	r6, #0
 8004a40:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004a42:	1c6a      	adds	r2, r5, #1
 8004a44:	9215      	str	r2, [sp, #84]	; 0x54
 8004a46:	786a      	ldrb	r2, [r5, #1]
 8004a48:	2a2b      	cmp	r2, #43	; 0x2b
 8004a4a:	d074      	beq.n	8004b36 <_strtod_l+0x27e>
 8004a4c:	2a2d      	cmp	r2, #45	; 0x2d
 8004a4e:	d078      	beq.n	8004b42 <_strtod_l+0x28a>
 8004a50:	f04f 0c00 	mov.w	ip, #0
 8004a54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004a58:	2909      	cmp	r1, #9
 8004a5a:	d97f      	bls.n	8004b5c <_strtod_l+0x2a4>
 8004a5c:	9515      	str	r5, [sp, #84]	; 0x54
 8004a5e:	2700      	movs	r7, #0
 8004a60:	e09e      	b.n	8004ba0 <_strtod_l+0x2e8>
 8004a62:	2300      	movs	r3, #0
 8004a64:	e7c8      	b.n	80049f8 <_strtod_l+0x140>
 8004a66:	f1bb 0f08 	cmp.w	fp, #8
 8004a6a:	bfd8      	it	le
 8004a6c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004a6e:	f100 0001 	add.w	r0, r0, #1
 8004a72:	bfda      	itte	le
 8004a74:	fb02 3301 	mlale	r3, r2, r1, r3
 8004a78:	9309      	strle	r3, [sp, #36]	; 0x24
 8004a7a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004a7e:	f10b 0b01 	add.w	fp, fp, #1
 8004a82:	9015      	str	r0, [sp, #84]	; 0x54
 8004a84:	e7c1      	b.n	8004a0a <_strtod_l+0x152>
 8004a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	9215      	str	r2, [sp, #84]	; 0x54
 8004a8c:	785a      	ldrb	r2, [r3, #1]
 8004a8e:	f1bb 0f00 	cmp.w	fp, #0
 8004a92:	d037      	beq.n	8004b04 <_strtod_l+0x24c>
 8004a94:	9005      	str	r0, [sp, #20]
 8004a96:	465e      	mov	r6, fp
 8004a98:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	d912      	bls.n	8004ac6 <_strtod_l+0x20e>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e7c4      	b.n	8004a2e <_strtod_l+0x176>
 8004aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	9215      	str	r2, [sp, #84]	; 0x54
 8004aaa:	785a      	ldrb	r2, [r3, #1]
 8004aac:	3001      	adds	r0, #1
 8004aae:	2a30      	cmp	r2, #48	; 0x30
 8004ab0:	d0f8      	beq.n	8004aa4 <_strtod_l+0x1ec>
 8004ab2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	f200 84c1 	bhi.w	800543e <_strtod_l+0xb86>
 8004abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004abe:	9005      	str	r0, [sp, #20]
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	3a30      	subs	r2, #48	; 0x30
 8004ac8:	f100 0301 	add.w	r3, r0, #1
 8004acc:	d014      	beq.n	8004af8 <_strtod_l+0x240>
 8004ace:	9905      	ldr	r1, [sp, #20]
 8004ad0:	4419      	add	r1, r3
 8004ad2:	9105      	str	r1, [sp, #20]
 8004ad4:	4633      	mov	r3, r6
 8004ad6:	eb00 0c06 	add.w	ip, r0, r6
 8004ada:	210a      	movs	r1, #10
 8004adc:	4563      	cmp	r3, ip
 8004ade:	d113      	bne.n	8004b08 <_strtod_l+0x250>
 8004ae0:	1833      	adds	r3, r6, r0
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	f106 0601 	add.w	r6, r6, #1
 8004ae8:	4406      	add	r6, r0
 8004aea:	dc1a      	bgt.n	8004b22 <_strtod_l+0x26a>
 8004aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004aee:	230a      	movs	r3, #10
 8004af0:	fb03 2301 	mla	r3, r3, r1, r2
 8004af4:	9309      	str	r3, [sp, #36]	; 0x24
 8004af6:	2300      	movs	r3, #0
 8004af8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004afa:	1c51      	adds	r1, r2, #1
 8004afc:	9115      	str	r1, [sp, #84]	; 0x54
 8004afe:	7852      	ldrb	r2, [r2, #1]
 8004b00:	4618      	mov	r0, r3
 8004b02:	e7c9      	b.n	8004a98 <_strtod_l+0x1e0>
 8004b04:	4658      	mov	r0, fp
 8004b06:	e7d2      	b.n	8004aae <_strtod_l+0x1f6>
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	f103 0301 	add.w	r3, r3, #1
 8004b0e:	dc03      	bgt.n	8004b18 <_strtod_l+0x260>
 8004b10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b12:	434f      	muls	r7, r1
 8004b14:	9709      	str	r7, [sp, #36]	; 0x24
 8004b16:	e7e1      	b.n	8004adc <_strtod_l+0x224>
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	bfd8      	it	le
 8004b1c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004b20:	e7dc      	b.n	8004adc <_strtod_l+0x224>
 8004b22:	2e10      	cmp	r6, #16
 8004b24:	bfdc      	itt	le
 8004b26:	230a      	movle	r3, #10
 8004b28:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004b2c:	e7e3      	b.n	8004af6 <_strtod_l+0x23e>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9305      	str	r3, [sp, #20]
 8004b32:	2301      	movs	r3, #1
 8004b34:	e780      	b.n	8004a38 <_strtod_l+0x180>
 8004b36:	f04f 0c00 	mov.w	ip, #0
 8004b3a:	1caa      	adds	r2, r5, #2
 8004b3c:	9215      	str	r2, [sp, #84]	; 0x54
 8004b3e:	78aa      	ldrb	r2, [r5, #2]
 8004b40:	e788      	b.n	8004a54 <_strtod_l+0x19c>
 8004b42:	f04f 0c01 	mov.w	ip, #1
 8004b46:	e7f8      	b.n	8004b3a <_strtod_l+0x282>
 8004b48:	08007c9c 	.word	0x08007c9c
 8004b4c:	08007c8d 	.word	0x08007c8d
 8004b50:	7ff00000 	.word	0x7ff00000
 8004b54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b56:	1c51      	adds	r1, r2, #1
 8004b58:	9115      	str	r1, [sp, #84]	; 0x54
 8004b5a:	7852      	ldrb	r2, [r2, #1]
 8004b5c:	2a30      	cmp	r2, #48	; 0x30
 8004b5e:	d0f9      	beq.n	8004b54 <_strtod_l+0x29c>
 8004b60:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004b64:	2908      	cmp	r1, #8
 8004b66:	f63f af7a 	bhi.w	8004a5e <_strtod_l+0x1a6>
 8004b6a:	3a30      	subs	r2, #48	; 0x30
 8004b6c:	9208      	str	r2, [sp, #32]
 8004b6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b70:	920c      	str	r2, [sp, #48]	; 0x30
 8004b72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b74:	1c57      	adds	r7, r2, #1
 8004b76:	9715      	str	r7, [sp, #84]	; 0x54
 8004b78:	7852      	ldrb	r2, [r2, #1]
 8004b7a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004b7e:	f1be 0f09 	cmp.w	lr, #9
 8004b82:	d938      	bls.n	8004bf6 <_strtod_l+0x33e>
 8004b84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b86:	1a7f      	subs	r7, r7, r1
 8004b88:	2f08      	cmp	r7, #8
 8004b8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004b8e:	dc03      	bgt.n	8004b98 <_strtod_l+0x2e0>
 8004b90:	9908      	ldr	r1, [sp, #32]
 8004b92:	428f      	cmp	r7, r1
 8004b94:	bfa8      	it	ge
 8004b96:	460f      	movge	r7, r1
 8004b98:	f1bc 0f00 	cmp.w	ip, #0
 8004b9c:	d000      	beq.n	8004ba0 <_strtod_l+0x2e8>
 8004b9e:	427f      	negs	r7, r7
 8004ba0:	2e00      	cmp	r6, #0
 8004ba2:	d14f      	bne.n	8004c44 <_strtod_l+0x38c>
 8004ba4:	9904      	ldr	r1, [sp, #16]
 8004ba6:	4301      	orrs	r1, r0
 8004ba8:	f47f aec1 	bne.w	800492e <_strtod_l+0x76>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f47f aedb 	bne.w	8004968 <_strtod_l+0xb0>
 8004bb2:	2a69      	cmp	r2, #105	; 0x69
 8004bb4:	d029      	beq.n	8004c0a <_strtod_l+0x352>
 8004bb6:	dc26      	bgt.n	8004c06 <_strtod_l+0x34e>
 8004bb8:	2a49      	cmp	r2, #73	; 0x49
 8004bba:	d026      	beq.n	8004c0a <_strtod_l+0x352>
 8004bbc:	2a4e      	cmp	r2, #78	; 0x4e
 8004bbe:	f47f aed3 	bne.w	8004968 <_strtod_l+0xb0>
 8004bc2:	499b      	ldr	r1, [pc, #620]	; (8004e30 <_strtod_l+0x578>)
 8004bc4:	a815      	add	r0, sp, #84	; 0x54
 8004bc6:	f001 ff17 	bl	80069f8 <__match>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	f43f aecc 	beq.w	8004968 <_strtod_l+0xb0>
 8004bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b28      	cmp	r3, #40	; 0x28
 8004bd6:	d12f      	bne.n	8004c38 <_strtod_l+0x380>
 8004bd8:	4996      	ldr	r1, [pc, #600]	; (8004e34 <_strtod_l+0x57c>)
 8004bda:	aa18      	add	r2, sp, #96	; 0x60
 8004bdc:	a815      	add	r0, sp, #84	; 0x54
 8004bde:	f001 ff1f 	bl	8006a20 <__hexnan>
 8004be2:	2805      	cmp	r0, #5
 8004be4:	d128      	bne.n	8004c38 <_strtod_l+0x380>
 8004be6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004be8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004bf0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004bf4:	e69b      	b.n	800492e <_strtod_l+0x76>
 8004bf6:	9f08      	ldr	r7, [sp, #32]
 8004bf8:	210a      	movs	r1, #10
 8004bfa:	fb01 2107 	mla	r1, r1, r7, r2
 8004bfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004c02:	9208      	str	r2, [sp, #32]
 8004c04:	e7b5      	b.n	8004b72 <_strtod_l+0x2ba>
 8004c06:	2a6e      	cmp	r2, #110	; 0x6e
 8004c08:	e7d9      	b.n	8004bbe <_strtod_l+0x306>
 8004c0a:	498b      	ldr	r1, [pc, #556]	; (8004e38 <_strtod_l+0x580>)
 8004c0c:	a815      	add	r0, sp, #84	; 0x54
 8004c0e:	f001 fef3 	bl	80069f8 <__match>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	f43f aea8 	beq.w	8004968 <_strtod_l+0xb0>
 8004c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c1a:	4988      	ldr	r1, [pc, #544]	; (8004e3c <_strtod_l+0x584>)
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	a815      	add	r0, sp, #84	; 0x54
 8004c20:	9315      	str	r3, [sp, #84]	; 0x54
 8004c22:	f001 fee9 	bl	80069f8 <__match>
 8004c26:	b910      	cbnz	r0, 8004c2e <_strtod_l+0x376>
 8004c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	9315      	str	r3, [sp, #84]	; 0x54
 8004c2e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004e4c <_strtod_l+0x594>
 8004c32:	f04f 0800 	mov.w	r8, #0
 8004c36:	e67a      	b.n	800492e <_strtod_l+0x76>
 8004c38:	4881      	ldr	r0, [pc, #516]	; (8004e40 <_strtod_l+0x588>)
 8004c3a:	f001 fc2d 	bl	8006498 <nan>
 8004c3e:	ec59 8b10 	vmov	r8, r9, d0
 8004c42:	e674      	b.n	800492e <_strtod_l+0x76>
 8004c44:	9b05      	ldr	r3, [sp, #20]
 8004c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c48:	1afb      	subs	r3, r7, r3
 8004c4a:	f1bb 0f00 	cmp.w	fp, #0
 8004c4e:	bf08      	it	eq
 8004c50:	46b3      	moveq	fp, r6
 8004c52:	2e10      	cmp	r6, #16
 8004c54:	9308      	str	r3, [sp, #32]
 8004c56:	4635      	mov	r5, r6
 8004c58:	bfa8      	it	ge
 8004c5a:	2510      	movge	r5, #16
 8004c5c:	f7fb fc5a 	bl	8000514 <__aeabi_ui2d>
 8004c60:	2e09      	cmp	r6, #9
 8004c62:	4680      	mov	r8, r0
 8004c64:	4689      	mov	r9, r1
 8004c66:	dd13      	ble.n	8004c90 <_strtod_l+0x3d8>
 8004c68:	4b76      	ldr	r3, [pc, #472]	; (8004e44 <_strtod_l+0x58c>)
 8004c6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004c72:	f7fb fcc9 	bl	8000608 <__aeabi_dmul>
 8004c76:	4680      	mov	r8, r0
 8004c78:	4650      	mov	r0, sl
 8004c7a:	4689      	mov	r9, r1
 8004c7c:	f7fb fc4a 	bl	8000514 <__aeabi_ui2d>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb fb08 	bl	800029c <__adddf3>
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	4689      	mov	r9, r1
 8004c90:	2e0f      	cmp	r6, #15
 8004c92:	dc38      	bgt.n	8004d06 <_strtod_l+0x44e>
 8004c94:	9b08      	ldr	r3, [sp, #32]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f43f ae49 	beq.w	800492e <_strtod_l+0x76>
 8004c9c:	dd24      	ble.n	8004ce8 <_strtod_l+0x430>
 8004c9e:	2b16      	cmp	r3, #22
 8004ca0:	dc0b      	bgt.n	8004cba <_strtod_l+0x402>
 8004ca2:	4968      	ldr	r1, [pc, #416]	; (8004e44 <_strtod_l+0x58c>)
 8004ca4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	f7fb fcaa 	bl	8000608 <__aeabi_dmul>
 8004cb4:	4680      	mov	r8, r0
 8004cb6:	4689      	mov	r9, r1
 8004cb8:	e639      	b.n	800492e <_strtod_l+0x76>
 8004cba:	9a08      	ldr	r2, [sp, #32]
 8004cbc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	db20      	blt.n	8004d06 <_strtod_l+0x44e>
 8004cc4:	4c5f      	ldr	r4, [pc, #380]	; (8004e44 <_strtod_l+0x58c>)
 8004cc6:	f1c6 060f 	rsb	r6, r6, #15
 8004cca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8004cce:	4642      	mov	r2, r8
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cd6:	f7fb fc97 	bl	8000608 <__aeabi_dmul>
 8004cda:	9b08      	ldr	r3, [sp, #32]
 8004cdc:	1b9e      	subs	r6, r3, r6
 8004cde:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8004ce2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ce6:	e7e3      	b.n	8004cb0 <_strtod_l+0x3f8>
 8004ce8:	9b08      	ldr	r3, [sp, #32]
 8004cea:	3316      	adds	r3, #22
 8004cec:	db0b      	blt.n	8004d06 <_strtod_l+0x44e>
 8004cee:	9b05      	ldr	r3, [sp, #20]
 8004cf0:	1bdf      	subs	r7, r3, r7
 8004cf2:	4b54      	ldr	r3, [pc, #336]	; (8004e44 <_strtod_l+0x58c>)
 8004cf4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	f7fb fdac 	bl	800085c <__aeabi_ddiv>
 8004d04:	e7d6      	b.n	8004cb4 <_strtod_l+0x3fc>
 8004d06:	9b08      	ldr	r3, [sp, #32]
 8004d08:	1b75      	subs	r5, r6, r5
 8004d0a:	441d      	add	r5, r3
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	dd70      	ble.n	8004df2 <_strtod_l+0x53a>
 8004d10:	f015 030f 	ands.w	r3, r5, #15
 8004d14:	d00a      	beq.n	8004d2c <_strtod_l+0x474>
 8004d16:	494b      	ldr	r1, [pc, #300]	; (8004e44 <_strtod_l+0x58c>)
 8004d18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d24:	f7fb fc70 	bl	8000608 <__aeabi_dmul>
 8004d28:	4680      	mov	r8, r0
 8004d2a:	4689      	mov	r9, r1
 8004d2c:	f035 050f 	bics.w	r5, r5, #15
 8004d30:	d04d      	beq.n	8004dce <_strtod_l+0x516>
 8004d32:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8004d36:	dd22      	ble.n	8004d7e <_strtod_l+0x4c6>
 8004d38:	2500      	movs	r5, #0
 8004d3a:	46ab      	mov	fp, r5
 8004d3c:	9509      	str	r5, [sp, #36]	; 0x24
 8004d3e:	9505      	str	r5, [sp, #20]
 8004d40:	2322      	movs	r3, #34	; 0x22
 8004d42:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004e4c <_strtod_l+0x594>
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	f04f 0800 	mov.w	r8, #0
 8004d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f43f aded 	beq.w	800492e <_strtod_l+0x76>
 8004d54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004d56:	4620      	mov	r0, r4
 8004d58:	f001 ff50 	bl	8006bfc <_Bfree>
 8004d5c:	9905      	ldr	r1, [sp, #20]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f001 ff4c 	bl	8006bfc <_Bfree>
 8004d64:	4659      	mov	r1, fp
 8004d66:	4620      	mov	r0, r4
 8004d68:	f001 ff48 	bl	8006bfc <_Bfree>
 8004d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f001 ff44 	bl	8006bfc <_Bfree>
 8004d74:	4629      	mov	r1, r5
 8004d76:	4620      	mov	r0, r4
 8004d78:	f001 ff40 	bl	8006bfc <_Bfree>
 8004d7c:	e5d7      	b.n	800492e <_strtod_l+0x76>
 8004d7e:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <_strtod_l+0x590>)
 8004d80:	9304      	str	r3, [sp, #16]
 8004d82:	2300      	movs	r3, #0
 8004d84:	112d      	asrs	r5, r5, #4
 8004d86:	4640      	mov	r0, r8
 8004d88:	4649      	mov	r1, r9
 8004d8a:	469a      	mov	sl, r3
 8004d8c:	2d01      	cmp	r5, #1
 8004d8e:	dc21      	bgt.n	8004dd4 <_strtod_l+0x51c>
 8004d90:	b10b      	cbz	r3, 8004d96 <_strtod_l+0x4de>
 8004d92:	4680      	mov	r8, r0
 8004d94:	4689      	mov	r9, r1
 8004d96:	492c      	ldr	r1, [pc, #176]	; (8004e48 <_strtod_l+0x590>)
 8004d98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004d9c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da8:	f7fb fc2e 	bl	8000608 <__aeabi_dmul>
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <_strtod_l+0x594>)
 8004dae:	460a      	mov	r2, r1
 8004db0:	400b      	ands	r3, r1
 8004db2:	4927      	ldr	r1, [pc, #156]	; (8004e50 <_strtod_l+0x598>)
 8004db4:	428b      	cmp	r3, r1
 8004db6:	4680      	mov	r8, r0
 8004db8:	d8be      	bhi.n	8004d38 <_strtod_l+0x480>
 8004dba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004dbe:	428b      	cmp	r3, r1
 8004dc0:	bf86      	itte	hi
 8004dc2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8004e54 <_strtod_l+0x59c>
 8004dc6:	f04f 38ff 	movhi.w	r8, #4294967295
 8004dca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	e07b      	b.n	8004ecc <_strtod_l+0x614>
 8004dd4:	07ea      	lsls	r2, r5, #31
 8004dd6:	d505      	bpl.n	8004de4 <_strtod_l+0x52c>
 8004dd8:	9b04      	ldr	r3, [sp, #16]
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f7fb fc13 	bl	8000608 <__aeabi_dmul>
 8004de2:	2301      	movs	r3, #1
 8004de4:	9a04      	ldr	r2, [sp, #16]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f10a 0a01 	add.w	sl, sl, #1
 8004dec:	106d      	asrs	r5, r5, #1
 8004dee:	9204      	str	r2, [sp, #16]
 8004df0:	e7cc      	b.n	8004d8c <_strtod_l+0x4d4>
 8004df2:	d0ec      	beq.n	8004dce <_strtod_l+0x516>
 8004df4:	426d      	negs	r5, r5
 8004df6:	f015 020f 	ands.w	r2, r5, #15
 8004dfa:	d00a      	beq.n	8004e12 <_strtod_l+0x55a>
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <_strtod_l+0x58c>)
 8004dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e02:	4640      	mov	r0, r8
 8004e04:	4649      	mov	r1, r9
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f7fb fd27 	bl	800085c <__aeabi_ddiv>
 8004e0e:	4680      	mov	r8, r0
 8004e10:	4689      	mov	r9, r1
 8004e12:	112d      	asrs	r5, r5, #4
 8004e14:	d0db      	beq.n	8004dce <_strtod_l+0x516>
 8004e16:	2d1f      	cmp	r5, #31
 8004e18:	dd1e      	ble.n	8004e58 <_strtod_l+0x5a0>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	46ab      	mov	fp, r5
 8004e1e:	9509      	str	r5, [sp, #36]	; 0x24
 8004e20:	9505      	str	r5, [sp, #20]
 8004e22:	2322      	movs	r3, #34	; 0x22
 8004e24:	f04f 0800 	mov.w	r8, #0
 8004e28:	f04f 0900 	mov.w	r9, #0
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	e78d      	b.n	8004d4c <_strtod_l+0x494>
 8004e30:	08007c98 	.word	0x08007c98
 8004e34:	08007cb0 	.word	0x08007cb0
 8004e38:	08007c8f 	.word	0x08007c8f
 8004e3c:	08007c92 	.word	0x08007c92
 8004e40:	0800805f 	.word	0x0800805f
 8004e44:	08007f50 	.word	0x08007f50
 8004e48:	08007f28 	.word	0x08007f28
 8004e4c:	7ff00000 	.word	0x7ff00000
 8004e50:	7ca00000 	.word	0x7ca00000
 8004e54:	7fefffff 	.word	0x7fefffff
 8004e58:	f015 0310 	ands.w	r3, r5, #16
 8004e5c:	bf18      	it	ne
 8004e5e:	236a      	movne	r3, #106	; 0x6a
 8004e60:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8005204 <_strtod_l+0x94c>
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	4640      	mov	r0, r8
 8004e68:	4649      	mov	r1, r9
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	07ea      	lsls	r2, r5, #31
 8004e6e:	d504      	bpl.n	8004e7a <_strtod_l+0x5c2>
 8004e70:	e9da 2300 	ldrd	r2, r3, [sl]
 8004e74:	f7fb fbc8 	bl	8000608 <__aeabi_dmul>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	106d      	asrs	r5, r5, #1
 8004e7c:	f10a 0a08 	add.w	sl, sl, #8
 8004e80:	d1f4      	bne.n	8004e6c <_strtod_l+0x5b4>
 8004e82:	b10b      	cbz	r3, 8004e88 <_strtod_l+0x5d0>
 8004e84:	4680      	mov	r8, r0
 8004e86:	4689      	mov	r9, r1
 8004e88:	9b04      	ldr	r3, [sp, #16]
 8004e8a:	b1bb      	cbz	r3, 8004ebc <_strtod_l+0x604>
 8004e8c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004e90:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	4649      	mov	r1, r9
 8004e98:	dd10      	ble.n	8004ebc <_strtod_l+0x604>
 8004e9a:	2b1f      	cmp	r3, #31
 8004e9c:	f340 811e 	ble.w	80050dc <_strtod_l+0x824>
 8004ea0:	2b34      	cmp	r3, #52	; 0x34
 8004ea2:	bfde      	ittt	le
 8004ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8004ea8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004eac:	4093      	lslle	r3, r2
 8004eae:	f04f 0800 	mov.w	r8, #0
 8004eb2:	bfcc      	ite	gt
 8004eb4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004eb8:	ea03 0901 	andle.w	r9, r3, r1
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	f7fb fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d1a6      	bne.n	8004e1a <_strtod_l+0x562>
 8004ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ed2:	4633      	mov	r3, r6
 8004ed4:	465a      	mov	r2, fp
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f001 fef8 	bl	8006ccc <__s2b>
 8004edc:	9009      	str	r0, [sp, #36]	; 0x24
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f43f af2a 	beq.w	8004d38 <_strtod_l+0x480>
 8004ee4:	9a08      	ldr	r2, [sp, #32]
 8004ee6:	9b05      	ldr	r3, [sp, #20]
 8004ee8:	2a00      	cmp	r2, #0
 8004eea:	eba3 0307 	sub.w	r3, r3, r7
 8004eee:	bfa8      	it	ge
 8004ef0:	2300      	movge	r3, #0
 8004ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004efa:	9312      	str	r3, [sp, #72]	; 0x48
 8004efc:	46ab      	mov	fp, r5
 8004efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f00:	4620      	mov	r0, r4
 8004f02:	6859      	ldr	r1, [r3, #4]
 8004f04:	f001 fe3a 	bl	8006b7c <_Balloc>
 8004f08:	9005      	str	r0, [sp, #20]
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f43f af18 	beq.w	8004d40 <_strtod_l+0x488>
 8004f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	3202      	adds	r2, #2
 8004f16:	f103 010c 	add.w	r1, r3, #12
 8004f1a:	0092      	lsls	r2, r2, #2
 8004f1c:	300c      	adds	r0, #12
 8004f1e:	f001 faab 	bl	8006478 <memcpy>
 8004f22:	ec49 8b10 	vmov	d0, r8, r9
 8004f26:	aa18      	add	r2, sp, #96	; 0x60
 8004f28:	a917      	add	r1, sp, #92	; 0x5c
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f002 fa02 	bl	8007334 <__d2b>
 8004f30:	ec49 8b18 	vmov	d8, r8, r9
 8004f34:	9016      	str	r0, [sp, #88]	; 0x58
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f43f af02 	beq.w	8004d40 <_strtod_l+0x488>
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f001 ff5c 	bl	8006dfc <__i2b>
 8004f44:	4683      	mov	fp, r0
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f43f aefa 	beq.w	8004d40 <_strtod_l+0x488>
 8004f4c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004f4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	bfab      	itete	ge
 8004f54:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8004f56:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8004f58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004f5a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8004f5e:	bfac      	ite	ge
 8004f60:	eb06 0a03 	addge.w	sl, r6, r3
 8004f64:	1b9f      	sublt	r7, r3, r6
 8004f66:	9b04      	ldr	r3, [sp, #16]
 8004f68:	1af6      	subs	r6, r6, r3
 8004f6a:	4416      	add	r6, r2
 8004f6c:	4ba0      	ldr	r3, [pc, #640]	; (80051f0 <_strtod_l+0x938>)
 8004f6e:	3e01      	subs	r6, #1
 8004f70:	429e      	cmp	r6, r3
 8004f72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004f76:	f280 80c4 	bge.w	8005102 <_strtod_l+0x84a>
 8004f7a:	1b9b      	subs	r3, r3, r6
 8004f7c:	2b1f      	cmp	r3, #31
 8004f7e:	eba2 0203 	sub.w	r2, r2, r3
 8004f82:	f04f 0101 	mov.w	r1, #1
 8004f86:	f300 80b0 	bgt.w	80050ea <_strtod_l+0x832>
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	930e      	str	r3, [sp, #56]	; 0x38
 8004f90:	2300      	movs	r3, #0
 8004f92:	930d      	str	r3, [sp, #52]	; 0x34
 8004f94:	eb0a 0602 	add.w	r6, sl, r2
 8004f98:	9b04      	ldr	r3, [sp, #16]
 8004f9a:	45b2      	cmp	sl, r6
 8004f9c:	4417      	add	r7, r2
 8004f9e:	441f      	add	r7, r3
 8004fa0:	4653      	mov	r3, sl
 8004fa2:	bfa8      	it	ge
 8004fa4:	4633      	movge	r3, r6
 8004fa6:	42bb      	cmp	r3, r7
 8004fa8:	bfa8      	it	ge
 8004faa:	463b      	movge	r3, r7
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfc2      	ittt	gt
 8004fb0:	1af6      	subgt	r6, r6, r3
 8004fb2:	1aff      	subgt	r7, r7, r3
 8004fb4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8004fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	dd17      	ble.n	8004fee <_strtod_l+0x736>
 8004fbe:	4659      	mov	r1, fp
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f001 ffda 	bl	8006f7c <__pow5mult>
 8004fc8:	4683      	mov	fp, r0
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	f43f aeb8 	beq.w	8004d40 <_strtod_l+0x488>
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f001 ff27 	bl	8006e28 <__multiply>
 8004fda:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	f43f aeaf 	beq.w	8004d40 <_strtod_l+0x488>
 8004fe2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f001 fe09 	bl	8006bfc <_Bfree>
 8004fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fec:	9316      	str	r3, [sp, #88]	; 0x58
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	f300 808c 	bgt.w	800510c <_strtod_l+0x854>
 8004ff4:	9b08      	ldr	r3, [sp, #32]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	dd08      	ble.n	800500c <_strtod_l+0x754>
 8004ffa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ffc:	9905      	ldr	r1, [sp, #20]
 8004ffe:	4620      	mov	r0, r4
 8005000:	f001 ffbc 	bl	8006f7c <__pow5mult>
 8005004:	9005      	str	r0, [sp, #20]
 8005006:	2800      	cmp	r0, #0
 8005008:	f43f ae9a 	beq.w	8004d40 <_strtod_l+0x488>
 800500c:	2f00      	cmp	r7, #0
 800500e:	dd08      	ble.n	8005022 <_strtod_l+0x76a>
 8005010:	9905      	ldr	r1, [sp, #20]
 8005012:	463a      	mov	r2, r7
 8005014:	4620      	mov	r0, r4
 8005016:	f002 f80b 	bl	8007030 <__lshift>
 800501a:	9005      	str	r0, [sp, #20]
 800501c:	2800      	cmp	r0, #0
 800501e:	f43f ae8f 	beq.w	8004d40 <_strtod_l+0x488>
 8005022:	f1ba 0f00 	cmp.w	sl, #0
 8005026:	dd08      	ble.n	800503a <_strtod_l+0x782>
 8005028:	4659      	mov	r1, fp
 800502a:	4652      	mov	r2, sl
 800502c:	4620      	mov	r0, r4
 800502e:	f001 ffff 	bl	8007030 <__lshift>
 8005032:	4683      	mov	fp, r0
 8005034:	2800      	cmp	r0, #0
 8005036:	f43f ae83 	beq.w	8004d40 <_strtod_l+0x488>
 800503a:	9a05      	ldr	r2, [sp, #20]
 800503c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800503e:	4620      	mov	r0, r4
 8005040:	f002 f87e 	bl	8007140 <__mdiff>
 8005044:	4605      	mov	r5, r0
 8005046:	2800      	cmp	r0, #0
 8005048:	f43f ae7a 	beq.w	8004d40 <_strtod_l+0x488>
 800504c:	68c3      	ldr	r3, [r0, #12]
 800504e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005050:	2300      	movs	r3, #0
 8005052:	60c3      	str	r3, [r0, #12]
 8005054:	4659      	mov	r1, fp
 8005056:	f002 f857 	bl	8007108 <__mcmp>
 800505a:	2800      	cmp	r0, #0
 800505c:	da60      	bge.n	8005120 <_strtod_l+0x868>
 800505e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005060:	ea53 0308 	orrs.w	r3, r3, r8
 8005064:	f040 8084 	bne.w	8005170 <_strtod_l+0x8b8>
 8005068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800506c:	2b00      	cmp	r3, #0
 800506e:	d17f      	bne.n	8005170 <_strtod_l+0x8b8>
 8005070:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005074:	0d1b      	lsrs	r3, r3, #20
 8005076:	051b      	lsls	r3, r3, #20
 8005078:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800507c:	d978      	bls.n	8005170 <_strtod_l+0x8b8>
 800507e:	696b      	ldr	r3, [r5, #20]
 8005080:	b913      	cbnz	r3, 8005088 <_strtod_l+0x7d0>
 8005082:	692b      	ldr	r3, [r5, #16]
 8005084:	2b01      	cmp	r3, #1
 8005086:	dd73      	ble.n	8005170 <_strtod_l+0x8b8>
 8005088:	4629      	mov	r1, r5
 800508a:	2201      	movs	r2, #1
 800508c:	4620      	mov	r0, r4
 800508e:	f001 ffcf 	bl	8007030 <__lshift>
 8005092:	4659      	mov	r1, fp
 8005094:	4605      	mov	r5, r0
 8005096:	f002 f837 	bl	8007108 <__mcmp>
 800509a:	2800      	cmp	r0, #0
 800509c:	dd68      	ble.n	8005170 <_strtod_l+0x8b8>
 800509e:	9904      	ldr	r1, [sp, #16]
 80050a0:	4a54      	ldr	r2, [pc, #336]	; (80051f4 <_strtod_l+0x93c>)
 80050a2:	464b      	mov	r3, r9
 80050a4:	2900      	cmp	r1, #0
 80050a6:	f000 8084 	beq.w	80051b2 <_strtod_l+0x8fa>
 80050aa:	ea02 0109 	and.w	r1, r2, r9
 80050ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80050b2:	dc7e      	bgt.n	80051b2 <_strtod_l+0x8fa>
 80050b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80050b8:	f77f aeb3 	ble.w	8004e22 <_strtod_l+0x56a>
 80050bc:	4b4e      	ldr	r3, [pc, #312]	; (80051f8 <_strtod_l+0x940>)
 80050be:	4640      	mov	r0, r8
 80050c0:	4649      	mov	r1, r9
 80050c2:	2200      	movs	r2, #0
 80050c4:	f7fb faa0 	bl	8000608 <__aeabi_dmul>
 80050c8:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <_strtod_l+0x93c>)
 80050ca:	400b      	ands	r3, r1
 80050cc:	4680      	mov	r8, r0
 80050ce:	4689      	mov	r9, r1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f47f ae3f 	bne.w	8004d54 <_strtod_l+0x49c>
 80050d6:	2322      	movs	r3, #34	; 0x22
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	e63b      	b.n	8004d54 <_strtod_l+0x49c>
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	ea03 0808 	and.w	r8, r3, r8
 80050e8:	e6e8      	b.n	8004ebc <_strtod_l+0x604>
 80050ea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80050ee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80050f2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80050f6:	36e2      	adds	r6, #226	; 0xe2
 80050f8:	fa01 f306 	lsl.w	r3, r1, r6
 80050fc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8005100:	e748      	b.n	8004f94 <_strtod_l+0x6dc>
 8005102:	2100      	movs	r1, #0
 8005104:	2301      	movs	r3, #1
 8005106:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800510a:	e743      	b.n	8004f94 <_strtod_l+0x6dc>
 800510c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800510e:	4632      	mov	r2, r6
 8005110:	4620      	mov	r0, r4
 8005112:	f001 ff8d 	bl	8007030 <__lshift>
 8005116:	9016      	str	r0, [sp, #88]	; 0x58
 8005118:	2800      	cmp	r0, #0
 800511a:	f47f af6b 	bne.w	8004ff4 <_strtod_l+0x73c>
 800511e:	e60f      	b.n	8004d40 <_strtod_l+0x488>
 8005120:	46ca      	mov	sl, r9
 8005122:	d171      	bne.n	8005208 <_strtod_l+0x950>
 8005124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800512a:	b352      	cbz	r2, 8005182 <_strtod_l+0x8ca>
 800512c:	4a33      	ldr	r2, [pc, #204]	; (80051fc <_strtod_l+0x944>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d12a      	bne.n	8005188 <_strtod_l+0x8d0>
 8005132:	9b04      	ldr	r3, [sp, #16]
 8005134:	4641      	mov	r1, r8
 8005136:	b1fb      	cbz	r3, 8005178 <_strtod_l+0x8c0>
 8005138:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <_strtod_l+0x93c>)
 800513a:	ea09 0303 	and.w	r3, r9, r3
 800513e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	d81a      	bhi.n	800517e <_strtod_l+0x8c6>
 8005148:	0d1b      	lsrs	r3, r3, #20
 800514a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	4299      	cmp	r1, r3
 8005154:	d118      	bne.n	8005188 <_strtod_l+0x8d0>
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <_strtod_l+0x948>)
 8005158:	459a      	cmp	sl, r3
 800515a:	d102      	bne.n	8005162 <_strtod_l+0x8aa>
 800515c:	3101      	adds	r1, #1
 800515e:	f43f adef 	beq.w	8004d40 <_strtod_l+0x488>
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <_strtod_l+0x93c>)
 8005164:	ea0a 0303 	and.w	r3, sl, r3
 8005168:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800516c:	f04f 0800 	mov.w	r8, #0
 8005170:	9b04      	ldr	r3, [sp, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1a2      	bne.n	80050bc <_strtod_l+0x804>
 8005176:	e5ed      	b.n	8004d54 <_strtod_l+0x49c>
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
 800517c:	e7e9      	b.n	8005152 <_strtod_l+0x89a>
 800517e:	4613      	mov	r3, r2
 8005180:	e7e7      	b.n	8005152 <_strtod_l+0x89a>
 8005182:	ea53 0308 	orrs.w	r3, r3, r8
 8005186:	d08a      	beq.n	800509e <_strtod_l+0x7e6>
 8005188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800518a:	b1e3      	cbz	r3, 80051c6 <_strtod_l+0x90e>
 800518c:	ea13 0f0a 	tst.w	r3, sl
 8005190:	d0ee      	beq.n	8005170 <_strtod_l+0x8b8>
 8005192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005194:	9a04      	ldr	r2, [sp, #16]
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	b1c3      	cbz	r3, 80051ce <_strtod_l+0x916>
 800519c:	f7ff fb6e 	bl	800487c <sulp>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	ec51 0b18 	vmov	r0, r1, d8
 80051a8:	f7fb f878 	bl	800029c <__adddf3>
 80051ac:	4680      	mov	r8, r0
 80051ae:	4689      	mov	r9, r1
 80051b0:	e7de      	b.n	8005170 <_strtod_l+0x8b8>
 80051b2:	4013      	ands	r3, r2
 80051b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80051b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80051bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80051c0:	f04f 38ff 	mov.w	r8, #4294967295
 80051c4:	e7d4      	b.n	8005170 <_strtod_l+0x8b8>
 80051c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051c8:	ea13 0f08 	tst.w	r3, r8
 80051cc:	e7e0      	b.n	8005190 <_strtod_l+0x8d8>
 80051ce:	f7ff fb55 	bl	800487c <sulp>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	ec51 0b18 	vmov	r0, r1, d8
 80051da:	f7fb f85d 	bl	8000298 <__aeabi_dsub>
 80051de:	2200      	movs	r2, #0
 80051e0:	2300      	movs	r3, #0
 80051e2:	4680      	mov	r8, r0
 80051e4:	4689      	mov	r9, r1
 80051e6:	f7fb fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d0c0      	beq.n	8005170 <_strtod_l+0x8b8>
 80051ee:	e618      	b.n	8004e22 <_strtod_l+0x56a>
 80051f0:	fffffc02 	.word	0xfffffc02
 80051f4:	7ff00000 	.word	0x7ff00000
 80051f8:	39500000 	.word	0x39500000
 80051fc:	000fffff 	.word	0x000fffff
 8005200:	7fefffff 	.word	0x7fefffff
 8005204:	08007cc8 	.word	0x08007cc8
 8005208:	4659      	mov	r1, fp
 800520a:	4628      	mov	r0, r5
 800520c:	f002 f8ec 	bl	80073e8 <__ratio>
 8005210:	ec57 6b10 	vmov	r6, r7, d0
 8005214:	ee10 0a10 	vmov	r0, s0
 8005218:	2200      	movs	r2, #0
 800521a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800521e:	4639      	mov	r1, r7
 8005220:	f7fb fc6e 	bl	8000b00 <__aeabi_dcmple>
 8005224:	2800      	cmp	r0, #0
 8005226:	d071      	beq.n	800530c <_strtod_l+0xa54>
 8005228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d17c      	bne.n	8005328 <_strtod_l+0xa70>
 800522e:	f1b8 0f00 	cmp.w	r8, #0
 8005232:	d15a      	bne.n	80052ea <_strtod_l+0xa32>
 8005234:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005238:	2b00      	cmp	r3, #0
 800523a:	d15d      	bne.n	80052f8 <_strtod_l+0xa40>
 800523c:	4b90      	ldr	r3, [pc, #576]	; (8005480 <_strtod_l+0xbc8>)
 800523e:	2200      	movs	r2, #0
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb fc52 	bl	8000aec <__aeabi_dcmplt>
 8005248:	2800      	cmp	r0, #0
 800524a:	d15c      	bne.n	8005306 <_strtod_l+0xa4e>
 800524c:	4630      	mov	r0, r6
 800524e:	4639      	mov	r1, r7
 8005250:	4b8c      	ldr	r3, [pc, #560]	; (8005484 <_strtod_l+0xbcc>)
 8005252:	2200      	movs	r2, #0
 8005254:	f7fb f9d8 	bl	8000608 <__aeabi_dmul>
 8005258:	4606      	mov	r6, r0
 800525a:	460f      	mov	r7, r1
 800525c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005260:	9606      	str	r6, [sp, #24]
 8005262:	9307      	str	r3, [sp, #28]
 8005264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005268:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800526c:	4b86      	ldr	r3, [pc, #536]	; (8005488 <_strtod_l+0xbd0>)
 800526e:	ea0a 0303 	and.w	r3, sl, r3
 8005272:	930d      	str	r3, [sp, #52]	; 0x34
 8005274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005276:	4b85      	ldr	r3, [pc, #532]	; (800548c <_strtod_l+0xbd4>)
 8005278:	429a      	cmp	r2, r3
 800527a:	f040 8090 	bne.w	800539e <_strtod_l+0xae6>
 800527e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005282:	ec49 8b10 	vmov	d0, r8, r9
 8005286:	f001 ffe5 	bl	8007254 <__ulp>
 800528a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800528e:	ec51 0b10 	vmov	r0, r1, d0
 8005292:	f7fb f9b9 	bl	8000608 <__aeabi_dmul>
 8005296:	4642      	mov	r2, r8
 8005298:	464b      	mov	r3, r9
 800529a:	f7fa ffff 	bl	800029c <__adddf3>
 800529e:	460b      	mov	r3, r1
 80052a0:	4979      	ldr	r1, [pc, #484]	; (8005488 <_strtod_l+0xbd0>)
 80052a2:	4a7b      	ldr	r2, [pc, #492]	; (8005490 <_strtod_l+0xbd8>)
 80052a4:	4019      	ands	r1, r3
 80052a6:	4291      	cmp	r1, r2
 80052a8:	4680      	mov	r8, r0
 80052aa:	d944      	bls.n	8005336 <_strtod_l+0xa7e>
 80052ac:	ee18 2a90 	vmov	r2, s17
 80052b0:	4b78      	ldr	r3, [pc, #480]	; (8005494 <_strtod_l+0xbdc>)
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d104      	bne.n	80052c0 <_strtod_l+0xa08>
 80052b6:	ee18 3a10 	vmov	r3, s16
 80052ba:	3301      	adds	r3, #1
 80052bc:	f43f ad40 	beq.w	8004d40 <_strtod_l+0x488>
 80052c0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005494 <_strtod_l+0xbdc>
 80052c4:	f04f 38ff 	mov.w	r8, #4294967295
 80052c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80052ca:	4620      	mov	r0, r4
 80052cc:	f001 fc96 	bl	8006bfc <_Bfree>
 80052d0:	9905      	ldr	r1, [sp, #20]
 80052d2:	4620      	mov	r0, r4
 80052d4:	f001 fc92 	bl	8006bfc <_Bfree>
 80052d8:	4659      	mov	r1, fp
 80052da:	4620      	mov	r0, r4
 80052dc:	f001 fc8e 	bl	8006bfc <_Bfree>
 80052e0:	4629      	mov	r1, r5
 80052e2:	4620      	mov	r0, r4
 80052e4:	f001 fc8a 	bl	8006bfc <_Bfree>
 80052e8:	e609      	b.n	8004efe <_strtod_l+0x646>
 80052ea:	f1b8 0f01 	cmp.w	r8, #1
 80052ee:	d103      	bne.n	80052f8 <_strtod_l+0xa40>
 80052f0:	f1b9 0f00 	cmp.w	r9, #0
 80052f4:	f43f ad95 	beq.w	8004e22 <_strtod_l+0x56a>
 80052f8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8005450 <_strtod_l+0xb98>
 80052fc:	4f60      	ldr	r7, [pc, #384]	; (8005480 <_strtod_l+0xbc8>)
 80052fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005302:	2600      	movs	r6, #0
 8005304:	e7ae      	b.n	8005264 <_strtod_l+0x9ac>
 8005306:	4f5f      	ldr	r7, [pc, #380]	; (8005484 <_strtod_l+0xbcc>)
 8005308:	2600      	movs	r6, #0
 800530a:	e7a7      	b.n	800525c <_strtod_l+0x9a4>
 800530c:	4b5d      	ldr	r3, [pc, #372]	; (8005484 <_strtod_l+0xbcc>)
 800530e:	4630      	mov	r0, r6
 8005310:	4639      	mov	r1, r7
 8005312:	2200      	movs	r2, #0
 8005314:	f7fb f978 	bl	8000608 <__aeabi_dmul>
 8005318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800531a:	4606      	mov	r6, r0
 800531c:	460f      	mov	r7, r1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d09c      	beq.n	800525c <_strtod_l+0x9a4>
 8005322:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005326:	e79d      	b.n	8005264 <_strtod_l+0x9ac>
 8005328:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8005458 <_strtod_l+0xba0>
 800532c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005330:	ec57 6b17 	vmov	r6, r7, d7
 8005334:	e796      	b.n	8005264 <_strtod_l+0x9ac>
 8005336:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800533a:	9b04      	ldr	r3, [sp, #16]
 800533c:	46ca      	mov	sl, r9
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1c2      	bne.n	80052c8 <_strtod_l+0xa10>
 8005342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005348:	0d1b      	lsrs	r3, r3, #20
 800534a:	051b      	lsls	r3, r3, #20
 800534c:	429a      	cmp	r2, r3
 800534e:	d1bb      	bne.n	80052c8 <_strtod_l+0xa10>
 8005350:	4630      	mov	r0, r6
 8005352:	4639      	mov	r1, r7
 8005354:	f7fb fc90 	bl	8000c78 <__aeabi_d2lz>
 8005358:	f7fb f928 	bl	80005ac <__aeabi_l2d>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4630      	mov	r0, r6
 8005362:	4639      	mov	r1, r7
 8005364:	f7fa ff98 	bl	8000298 <__aeabi_dsub>
 8005368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800536a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800536e:	ea43 0308 	orr.w	r3, r3, r8
 8005372:	4313      	orrs	r3, r2
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	d054      	beq.n	8005424 <_strtod_l+0xb6c>
 800537a:	a339      	add	r3, pc, #228	; (adr r3, 8005460 <_strtod_l+0xba8>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fb fbb4 	bl	8000aec <__aeabi_dcmplt>
 8005384:	2800      	cmp	r0, #0
 8005386:	f47f ace5 	bne.w	8004d54 <_strtod_l+0x49c>
 800538a:	a337      	add	r3, pc, #220	; (adr r3, 8005468 <_strtod_l+0xbb0>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb fbc8 	bl	8000b28 <__aeabi_dcmpgt>
 8005398:	2800      	cmp	r0, #0
 800539a:	d095      	beq.n	80052c8 <_strtod_l+0xa10>
 800539c:	e4da      	b.n	8004d54 <_strtod_l+0x49c>
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	b333      	cbz	r3, 80053f0 <_strtod_l+0xb38>
 80053a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80053a8:	d822      	bhi.n	80053f0 <_strtod_l+0xb38>
 80053aa:	a331      	add	r3, pc, #196	; (adr r3, 8005470 <_strtod_l+0xbb8>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	4630      	mov	r0, r6
 80053b2:	4639      	mov	r1, r7
 80053b4:	f7fb fba4 	bl	8000b00 <__aeabi_dcmple>
 80053b8:	b1a0      	cbz	r0, 80053e4 <_strtod_l+0xb2c>
 80053ba:	4639      	mov	r1, r7
 80053bc:	4630      	mov	r0, r6
 80053be:	f7fb fbd3 	bl	8000b68 <__aeabi_d2uiz>
 80053c2:	2801      	cmp	r0, #1
 80053c4:	bf38      	it	cc
 80053c6:	2001      	movcc	r0, #1
 80053c8:	f7fb f8a4 	bl	8000514 <__aeabi_ui2d>
 80053cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ce:	4606      	mov	r6, r0
 80053d0:	460f      	mov	r7, r1
 80053d2:	bb23      	cbnz	r3, 800541e <_strtod_l+0xb66>
 80053d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053d8:	9010      	str	r0, [sp, #64]	; 0x40
 80053da:	9311      	str	r3, [sp, #68]	; 0x44
 80053dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80053e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80053f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80053f4:	eeb0 0a48 	vmov.f32	s0, s16
 80053f8:	eef0 0a68 	vmov.f32	s1, s17
 80053fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005400:	f001 ff28 	bl	8007254 <__ulp>
 8005404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005408:	ec53 2b10 	vmov	r2, r3, d0
 800540c:	f7fb f8fc 	bl	8000608 <__aeabi_dmul>
 8005410:	ec53 2b18 	vmov	r2, r3, d8
 8005414:	f7fa ff42 	bl	800029c <__adddf3>
 8005418:	4680      	mov	r8, r0
 800541a:	4689      	mov	r9, r1
 800541c:	e78d      	b.n	800533a <_strtod_l+0xa82>
 800541e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005422:	e7db      	b.n	80053dc <_strtod_l+0xb24>
 8005424:	a314      	add	r3, pc, #80	; (adr r3, 8005478 <_strtod_l+0xbc0>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fb fb5f 	bl	8000aec <__aeabi_dcmplt>
 800542e:	e7b3      	b.n	8005398 <_strtod_l+0xae0>
 8005430:	2300      	movs	r3, #0
 8005432:	930a      	str	r3, [sp, #40]	; 0x28
 8005434:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	f7ff ba7c 	b.w	8004936 <_strtod_l+0x7e>
 800543e:	2a65      	cmp	r2, #101	; 0x65
 8005440:	f43f ab75 	beq.w	8004b2e <_strtod_l+0x276>
 8005444:	2a45      	cmp	r2, #69	; 0x45
 8005446:	f43f ab72 	beq.w	8004b2e <_strtod_l+0x276>
 800544a:	2301      	movs	r3, #1
 800544c:	f7ff bbaa 	b.w	8004ba4 <_strtod_l+0x2ec>
 8005450:	00000000 	.word	0x00000000
 8005454:	bff00000 	.word	0xbff00000
 8005458:	00000000 	.word	0x00000000
 800545c:	3ff00000 	.word	0x3ff00000
 8005460:	94a03595 	.word	0x94a03595
 8005464:	3fdfffff 	.word	0x3fdfffff
 8005468:	35afe535 	.word	0x35afe535
 800546c:	3fe00000 	.word	0x3fe00000
 8005470:	ffc00000 	.word	0xffc00000
 8005474:	41dfffff 	.word	0x41dfffff
 8005478:	94a03595 	.word	0x94a03595
 800547c:	3fcfffff 	.word	0x3fcfffff
 8005480:	3ff00000 	.word	0x3ff00000
 8005484:	3fe00000 	.word	0x3fe00000
 8005488:	7ff00000 	.word	0x7ff00000
 800548c:	7fe00000 	.word	0x7fe00000
 8005490:	7c9fffff 	.word	0x7c9fffff
 8005494:	7fefffff 	.word	0x7fefffff

08005498 <_strtod_r>:
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <_strtod_r+0x8>)
 800549a:	f7ff ba0d 	b.w	80048b8 <_strtod_l>
 800549e:	bf00      	nop
 80054a0:	20000068 	.word	0x20000068

080054a4 <_strtol_l.constprop.0>:
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054aa:	d001      	beq.n	80054b0 <_strtol_l.constprop.0+0xc>
 80054ac:	2b24      	cmp	r3, #36	; 0x24
 80054ae:	d906      	bls.n	80054be <_strtol_l.constprop.0+0x1a>
 80054b0:	f7ff f8ba 	bl	8004628 <__errno>
 80054b4:	2316      	movs	r3, #22
 80054b6:	6003      	str	r3, [r0, #0]
 80054b8:	2000      	movs	r0, #0
 80054ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80055a4 <_strtol_l.constprop.0+0x100>
 80054c2:	460d      	mov	r5, r1
 80054c4:	462e      	mov	r6, r5
 80054c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80054ce:	f017 0708 	ands.w	r7, r7, #8
 80054d2:	d1f7      	bne.n	80054c4 <_strtol_l.constprop.0+0x20>
 80054d4:	2c2d      	cmp	r4, #45	; 0x2d
 80054d6:	d132      	bne.n	800553e <_strtol_l.constprop.0+0x9a>
 80054d8:	782c      	ldrb	r4, [r5, #0]
 80054da:	2701      	movs	r7, #1
 80054dc:	1cb5      	adds	r5, r6, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d05b      	beq.n	800559a <_strtol_l.constprop.0+0xf6>
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d109      	bne.n	80054fa <_strtol_l.constprop.0+0x56>
 80054e6:	2c30      	cmp	r4, #48	; 0x30
 80054e8:	d107      	bne.n	80054fa <_strtol_l.constprop.0+0x56>
 80054ea:	782c      	ldrb	r4, [r5, #0]
 80054ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80054f0:	2c58      	cmp	r4, #88	; 0x58
 80054f2:	d14d      	bne.n	8005590 <_strtol_l.constprop.0+0xec>
 80054f4:	786c      	ldrb	r4, [r5, #1]
 80054f6:	2310      	movs	r3, #16
 80054f8:	3502      	adds	r5, #2
 80054fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80054fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8005502:	f04f 0e00 	mov.w	lr, #0
 8005506:	fbb8 f9f3 	udiv	r9, r8, r3
 800550a:	4676      	mov	r6, lr
 800550c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005510:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005514:	f1bc 0f09 	cmp.w	ip, #9
 8005518:	d816      	bhi.n	8005548 <_strtol_l.constprop.0+0xa4>
 800551a:	4664      	mov	r4, ip
 800551c:	42a3      	cmp	r3, r4
 800551e:	dd24      	ble.n	800556a <_strtol_l.constprop.0+0xc6>
 8005520:	f1be 3fff 	cmp.w	lr, #4294967295
 8005524:	d008      	beq.n	8005538 <_strtol_l.constprop.0+0x94>
 8005526:	45b1      	cmp	r9, r6
 8005528:	d31c      	bcc.n	8005564 <_strtol_l.constprop.0+0xc0>
 800552a:	d101      	bne.n	8005530 <_strtol_l.constprop.0+0x8c>
 800552c:	45a2      	cmp	sl, r4
 800552e:	db19      	blt.n	8005564 <_strtol_l.constprop.0+0xc0>
 8005530:	fb06 4603 	mla	r6, r6, r3, r4
 8005534:	f04f 0e01 	mov.w	lr, #1
 8005538:	f815 4b01 	ldrb.w	r4, [r5], #1
 800553c:	e7e8      	b.n	8005510 <_strtol_l.constprop.0+0x6c>
 800553e:	2c2b      	cmp	r4, #43	; 0x2b
 8005540:	bf04      	itt	eq
 8005542:	782c      	ldrbeq	r4, [r5, #0]
 8005544:	1cb5      	addeq	r5, r6, #2
 8005546:	e7ca      	b.n	80054de <_strtol_l.constprop.0+0x3a>
 8005548:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800554c:	f1bc 0f19 	cmp.w	ip, #25
 8005550:	d801      	bhi.n	8005556 <_strtol_l.constprop.0+0xb2>
 8005552:	3c37      	subs	r4, #55	; 0x37
 8005554:	e7e2      	b.n	800551c <_strtol_l.constprop.0+0x78>
 8005556:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800555a:	f1bc 0f19 	cmp.w	ip, #25
 800555e:	d804      	bhi.n	800556a <_strtol_l.constprop.0+0xc6>
 8005560:	3c57      	subs	r4, #87	; 0x57
 8005562:	e7db      	b.n	800551c <_strtol_l.constprop.0+0x78>
 8005564:	f04f 3eff 	mov.w	lr, #4294967295
 8005568:	e7e6      	b.n	8005538 <_strtol_l.constprop.0+0x94>
 800556a:	f1be 3fff 	cmp.w	lr, #4294967295
 800556e:	d105      	bne.n	800557c <_strtol_l.constprop.0+0xd8>
 8005570:	2322      	movs	r3, #34	; 0x22
 8005572:	6003      	str	r3, [r0, #0]
 8005574:	4646      	mov	r6, r8
 8005576:	b942      	cbnz	r2, 800558a <_strtol_l.constprop.0+0xe6>
 8005578:	4630      	mov	r0, r6
 800557a:	e79e      	b.n	80054ba <_strtol_l.constprop.0+0x16>
 800557c:	b107      	cbz	r7, 8005580 <_strtol_l.constprop.0+0xdc>
 800557e:	4276      	negs	r6, r6
 8005580:	2a00      	cmp	r2, #0
 8005582:	d0f9      	beq.n	8005578 <_strtol_l.constprop.0+0xd4>
 8005584:	f1be 0f00 	cmp.w	lr, #0
 8005588:	d000      	beq.n	800558c <_strtol_l.constprop.0+0xe8>
 800558a:	1e69      	subs	r1, r5, #1
 800558c:	6011      	str	r1, [r2, #0]
 800558e:	e7f3      	b.n	8005578 <_strtol_l.constprop.0+0xd4>
 8005590:	2430      	movs	r4, #48	; 0x30
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1b1      	bne.n	80054fa <_strtol_l.constprop.0+0x56>
 8005596:	2308      	movs	r3, #8
 8005598:	e7af      	b.n	80054fa <_strtol_l.constprop.0+0x56>
 800559a:	2c30      	cmp	r4, #48	; 0x30
 800559c:	d0a5      	beq.n	80054ea <_strtol_l.constprop.0+0x46>
 800559e:	230a      	movs	r3, #10
 80055a0:	e7ab      	b.n	80054fa <_strtol_l.constprop.0+0x56>
 80055a2:	bf00      	nop
 80055a4:	08007cf1 	.word	0x08007cf1

080055a8 <_strtol_r>:
 80055a8:	f7ff bf7c 	b.w	80054a4 <_strtol_l.constprop.0>

080055ac <__ssputs_r>:
 80055ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	688e      	ldr	r6, [r1, #8]
 80055b2:	461f      	mov	r7, r3
 80055b4:	42be      	cmp	r6, r7
 80055b6:	680b      	ldr	r3, [r1, #0]
 80055b8:	4682      	mov	sl, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	4690      	mov	r8, r2
 80055be:	d82c      	bhi.n	800561a <__ssputs_r+0x6e>
 80055c0:	898a      	ldrh	r2, [r1, #12]
 80055c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055c6:	d026      	beq.n	8005616 <__ssputs_r+0x6a>
 80055c8:	6965      	ldr	r5, [r4, #20]
 80055ca:	6909      	ldr	r1, [r1, #16]
 80055cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055d0:	eba3 0901 	sub.w	r9, r3, r1
 80055d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055d8:	1c7b      	adds	r3, r7, #1
 80055da:	444b      	add	r3, r9
 80055dc:	106d      	asrs	r5, r5, #1
 80055de:	429d      	cmp	r5, r3
 80055e0:	bf38      	it	cc
 80055e2:	461d      	movcc	r5, r3
 80055e4:	0553      	lsls	r3, r2, #21
 80055e6:	d527      	bpl.n	8005638 <__ssputs_r+0x8c>
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7ff f8bb 	bl	8004764 <_malloc_r>
 80055ee:	4606      	mov	r6, r0
 80055f0:	b360      	cbz	r0, 800564c <__ssputs_r+0xa0>
 80055f2:	6921      	ldr	r1, [r4, #16]
 80055f4:	464a      	mov	r2, r9
 80055f6:	f000 ff3f 	bl	8006478 <memcpy>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	6126      	str	r6, [r4, #16]
 8005608:	6165      	str	r5, [r4, #20]
 800560a:	444e      	add	r6, r9
 800560c:	eba5 0509 	sub.w	r5, r5, r9
 8005610:	6026      	str	r6, [r4, #0]
 8005612:	60a5      	str	r5, [r4, #8]
 8005614:	463e      	mov	r6, r7
 8005616:	42be      	cmp	r6, r7
 8005618:	d900      	bls.n	800561c <__ssputs_r+0x70>
 800561a:	463e      	mov	r6, r7
 800561c:	6820      	ldr	r0, [r4, #0]
 800561e:	4632      	mov	r2, r6
 8005620:	4641      	mov	r1, r8
 8005622:	f000 feec 	bl	80063fe <memmove>
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	1b9b      	subs	r3, r3, r6
 800562a:	60a3      	str	r3, [r4, #8]
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	4433      	add	r3, r6
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	2000      	movs	r0, #0
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005638:	462a      	mov	r2, r5
 800563a:	f001 ff4c 	bl	80074d6 <_realloc_r>
 800563e:	4606      	mov	r6, r0
 8005640:	2800      	cmp	r0, #0
 8005642:	d1e0      	bne.n	8005606 <__ssputs_r+0x5a>
 8005644:	6921      	ldr	r1, [r4, #16]
 8005646:	4650      	mov	r0, sl
 8005648:	f7ff f820 	bl	800468c <_free_r>
 800564c:	230c      	movs	r3, #12
 800564e:	f8ca 3000 	str.w	r3, [sl]
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	f04f 30ff 	mov.w	r0, #4294967295
 800565e:	e7e9      	b.n	8005634 <__ssputs_r+0x88>

08005660 <_svfiprintf_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	4698      	mov	r8, r3
 8005666:	898b      	ldrh	r3, [r1, #12]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	b09d      	sub	sp, #116	; 0x74
 800566c:	4607      	mov	r7, r0
 800566e:	460d      	mov	r5, r1
 8005670:	4614      	mov	r4, r2
 8005672:	d50e      	bpl.n	8005692 <_svfiprintf_r+0x32>
 8005674:	690b      	ldr	r3, [r1, #16]
 8005676:	b963      	cbnz	r3, 8005692 <_svfiprintf_r+0x32>
 8005678:	2140      	movs	r1, #64	; 0x40
 800567a:	f7ff f873 	bl	8004764 <_malloc_r>
 800567e:	6028      	str	r0, [r5, #0]
 8005680:	6128      	str	r0, [r5, #16]
 8005682:	b920      	cbnz	r0, 800568e <_svfiprintf_r+0x2e>
 8005684:	230c      	movs	r3, #12
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	e0d0      	b.n	8005830 <_svfiprintf_r+0x1d0>
 800568e:	2340      	movs	r3, #64	; 0x40
 8005690:	616b      	str	r3, [r5, #20]
 8005692:	2300      	movs	r3, #0
 8005694:	9309      	str	r3, [sp, #36]	; 0x24
 8005696:	2320      	movs	r3, #32
 8005698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800569c:	f8cd 800c 	str.w	r8, [sp, #12]
 80056a0:	2330      	movs	r3, #48	; 0x30
 80056a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005848 <_svfiprintf_r+0x1e8>
 80056a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056aa:	f04f 0901 	mov.w	r9, #1
 80056ae:	4623      	mov	r3, r4
 80056b0:	469a      	mov	sl, r3
 80056b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056b6:	b10a      	cbz	r2, 80056bc <_svfiprintf_r+0x5c>
 80056b8:	2a25      	cmp	r2, #37	; 0x25
 80056ba:	d1f9      	bne.n	80056b0 <_svfiprintf_r+0x50>
 80056bc:	ebba 0b04 	subs.w	fp, sl, r4
 80056c0:	d00b      	beq.n	80056da <_svfiprintf_r+0x7a>
 80056c2:	465b      	mov	r3, fp
 80056c4:	4622      	mov	r2, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	4638      	mov	r0, r7
 80056ca:	f7ff ff6f 	bl	80055ac <__ssputs_r>
 80056ce:	3001      	adds	r0, #1
 80056d0:	f000 80a9 	beq.w	8005826 <_svfiprintf_r+0x1c6>
 80056d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d6:	445a      	add	r2, fp
 80056d8:	9209      	str	r2, [sp, #36]	; 0x24
 80056da:	f89a 3000 	ldrb.w	r3, [sl]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80a1 	beq.w	8005826 <_svfiprintf_r+0x1c6>
 80056e4:	2300      	movs	r3, #0
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ee:	f10a 0a01 	add.w	sl, sl, #1
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	9307      	str	r3, [sp, #28]
 80056f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056fa:	931a      	str	r3, [sp, #104]	; 0x68
 80056fc:	4654      	mov	r4, sl
 80056fe:	2205      	movs	r2, #5
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	4850      	ldr	r0, [pc, #320]	; (8005848 <_svfiprintf_r+0x1e8>)
 8005706:	f7fa fd73 	bl	80001f0 <memchr>
 800570a:	9a04      	ldr	r2, [sp, #16]
 800570c:	b9d8      	cbnz	r0, 8005746 <_svfiprintf_r+0xe6>
 800570e:	06d0      	lsls	r0, r2, #27
 8005710:	bf44      	itt	mi
 8005712:	2320      	movmi	r3, #32
 8005714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005718:	0711      	lsls	r1, r2, #28
 800571a:	bf44      	itt	mi
 800571c:	232b      	movmi	r3, #43	; 0x2b
 800571e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005722:	f89a 3000 	ldrb.w	r3, [sl]
 8005726:	2b2a      	cmp	r3, #42	; 0x2a
 8005728:	d015      	beq.n	8005756 <_svfiprintf_r+0xf6>
 800572a:	9a07      	ldr	r2, [sp, #28]
 800572c:	4654      	mov	r4, sl
 800572e:	2000      	movs	r0, #0
 8005730:	f04f 0c0a 	mov.w	ip, #10
 8005734:	4621      	mov	r1, r4
 8005736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800573a:	3b30      	subs	r3, #48	; 0x30
 800573c:	2b09      	cmp	r3, #9
 800573e:	d94d      	bls.n	80057dc <_svfiprintf_r+0x17c>
 8005740:	b1b0      	cbz	r0, 8005770 <_svfiprintf_r+0x110>
 8005742:	9207      	str	r2, [sp, #28]
 8005744:	e014      	b.n	8005770 <_svfiprintf_r+0x110>
 8005746:	eba0 0308 	sub.w	r3, r0, r8
 800574a:	fa09 f303 	lsl.w	r3, r9, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	46a2      	mov	sl, r4
 8005754:	e7d2      	b.n	80056fc <_svfiprintf_r+0x9c>
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	1d19      	adds	r1, r3, #4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	9103      	str	r1, [sp, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	bfbb      	ittet	lt
 8005762:	425b      	neglt	r3, r3
 8005764:	f042 0202 	orrlt.w	r2, r2, #2
 8005768:	9307      	strge	r3, [sp, #28]
 800576a:	9307      	strlt	r3, [sp, #28]
 800576c:	bfb8      	it	lt
 800576e:	9204      	strlt	r2, [sp, #16]
 8005770:	7823      	ldrb	r3, [r4, #0]
 8005772:	2b2e      	cmp	r3, #46	; 0x2e
 8005774:	d10c      	bne.n	8005790 <_svfiprintf_r+0x130>
 8005776:	7863      	ldrb	r3, [r4, #1]
 8005778:	2b2a      	cmp	r3, #42	; 0x2a
 800577a:	d134      	bne.n	80057e6 <_svfiprintf_r+0x186>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	1d1a      	adds	r2, r3, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	9203      	str	r2, [sp, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	bfb8      	it	lt
 8005788:	f04f 33ff 	movlt.w	r3, #4294967295
 800578c:	3402      	adds	r4, #2
 800578e:	9305      	str	r3, [sp, #20]
 8005790:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005858 <_svfiprintf_r+0x1f8>
 8005794:	7821      	ldrb	r1, [r4, #0]
 8005796:	2203      	movs	r2, #3
 8005798:	4650      	mov	r0, sl
 800579a:	f7fa fd29 	bl	80001f0 <memchr>
 800579e:	b138      	cbz	r0, 80057b0 <_svfiprintf_r+0x150>
 80057a0:	9b04      	ldr	r3, [sp, #16]
 80057a2:	eba0 000a 	sub.w	r0, r0, sl
 80057a6:	2240      	movs	r2, #64	; 0x40
 80057a8:	4082      	lsls	r2, r0
 80057aa:	4313      	orrs	r3, r2
 80057ac:	3401      	adds	r4, #1
 80057ae:	9304      	str	r3, [sp, #16]
 80057b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b4:	4825      	ldr	r0, [pc, #148]	; (800584c <_svfiprintf_r+0x1ec>)
 80057b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ba:	2206      	movs	r2, #6
 80057bc:	f7fa fd18 	bl	80001f0 <memchr>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d038      	beq.n	8005836 <_svfiprintf_r+0x1d6>
 80057c4:	4b22      	ldr	r3, [pc, #136]	; (8005850 <_svfiprintf_r+0x1f0>)
 80057c6:	bb1b      	cbnz	r3, 8005810 <_svfiprintf_r+0x1b0>
 80057c8:	9b03      	ldr	r3, [sp, #12]
 80057ca:	3307      	adds	r3, #7
 80057cc:	f023 0307 	bic.w	r3, r3, #7
 80057d0:	3308      	adds	r3, #8
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d6:	4433      	add	r3, r6
 80057d8:	9309      	str	r3, [sp, #36]	; 0x24
 80057da:	e768      	b.n	80056ae <_svfiprintf_r+0x4e>
 80057dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e0:	460c      	mov	r4, r1
 80057e2:	2001      	movs	r0, #1
 80057e4:	e7a6      	b.n	8005734 <_svfiprintf_r+0xd4>
 80057e6:	2300      	movs	r3, #0
 80057e8:	3401      	adds	r4, #1
 80057ea:	9305      	str	r3, [sp, #20]
 80057ec:	4619      	mov	r1, r3
 80057ee:	f04f 0c0a 	mov.w	ip, #10
 80057f2:	4620      	mov	r0, r4
 80057f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057f8:	3a30      	subs	r2, #48	; 0x30
 80057fa:	2a09      	cmp	r2, #9
 80057fc:	d903      	bls.n	8005806 <_svfiprintf_r+0x1a6>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0c6      	beq.n	8005790 <_svfiprintf_r+0x130>
 8005802:	9105      	str	r1, [sp, #20]
 8005804:	e7c4      	b.n	8005790 <_svfiprintf_r+0x130>
 8005806:	fb0c 2101 	mla	r1, ip, r1, r2
 800580a:	4604      	mov	r4, r0
 800580c:	2301      	movs	r3, #1
 800580e:	e7f0      	b.n	80057f2 <_svfiprintf_r+0x192>
 8005810:	ab03      	add	r3, sp, #12
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	462a      	mov	r2, r5
 8005816:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <_svfiprintf_r+0x1f4>)
 8005818:	a904      	add	r1, sp, #16
 800581a:	4638      	mov	r0, r7
 800581c:	f3af 8000 	nop.w
 8005820:	1c42      	adds	r2, r0, #1
 8005822:	4606      	mov	r6, r0
 8005824:	d1d6      	bne.n	80057d4 <_svfiprintf_r+0x174>
 8005826:	89ab      	ldrh	r3, [r5, #12]
 8005828:	065b      	lsls	r3, r3, #25
 800582a:	f53f af2d 	bmi.w	8005688 <_svfiprintf_r+0x28>
 800582e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005830:	b01d      	add	sp, #116	; 0x74
 8005832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005836:	ab03      	add	r3, sp, #12
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	462a      	mov	r2, r5
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <_svfiprintf_r+0x1f4>)
 800583e:	a904      	add	r1, sp, #16
 8005840:	4638      	mov	r0, r7
 8005842:	f000 fa4b 	bl	8005cdc <_printf_i>
 8005846:	e7eb      	b.n	8005820 <_svfiprintf_r+0x1c0>
 8005848:	08007df1 	.word	0x08007df1
 800584c:	08007dfb 	.word	0x08007dfb
 8005850:	00000000 	.word	0x00000000
 8005854:	080055ad 	.word	0x080055ad
 8005858:	08007df7 	.word	0x08007df7

0800585c <_sungetc_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	1c4b      	adds	r3, r1, #1
 8005860:	4614      	mov	r4, r2
 8005862:	d103      	bne.n	800586c <_sungetc_r+0x10>
 8005864:	f04f 35ff 	mov.w	r5, #4294967295
 8005868:	4628      	mov	r0, r5
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	8993      	ldrh	r3, [r2, #12]
 800586e:	f023 0320 	bic.w	r3, r3, #32
 8005872:	8193      	strh	r3, [r2, #12]
 8005874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005876:	6852      	ldr	r2, [r2, #4]
 8005878:	b2cd      	uxtb	r5, r1
 800587a:	b18b      	cbz	r3, 80058a0 <_sungetc_r+0x44>
 800587c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800587e:	4293      	cmp	r3, r2
 8005880:	dd08      	ble.n	8005894 <_sungetc_r+0x38>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	6022      	str	r2, [r4, #0]
 8005888:	f803 5c01 	strb.w	r5, [r3, #-1]
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	3301      	adds	r3, #1
 8005890:	6063      	str	r3, [r4, #4]
 8005892:	e7e9      	b.n	8005868 <_sungetc_r+0xc>
 8005894:	4621      	mov	r1, r4
 8005896:	f000 fd78 	bl	800638a <__submore>
 800589a:	2800      	cmp	r0, #0
 800589c:	d0f1      	beq.n	8005882 <_sungetc_r+0x26>
 800589e:	e7e1      	b.n	8005864 <_sungetc_r+0x8>
 80058a0:	6921      	ldr	r1, [r4, #16]
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	b151      	cbz	r1, 80058bc <_sungetc_r+0x60>
 80058a6:	4299      	cmp	r1, r3
 80058a8:	d208      	bcs.n	80058bc <_sungetc_r+0x60>
 80058aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80058ae:	42a9      	cmp	r1, r5
 80058b0:	d104      	bne.n	80058bc <_sungetc_r+0x60>
 80058b2:	3b01      	subs	r3, #1
 80058b4:	3201      	adds	r2, #1
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	6062      	str	r2, [r4, #4]
 80058ba:	e7d5      	b.n	8005868 <_sungetc_r+0xc>
 80058bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80058c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058c4:	6363      	str	r3, [r4, #52]	; 0x34
 80058c6:	2303      	movs	r3, #3
 80058c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80058ca:	4623      	mov	r3, r4
 80058cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	2301      	movs	r3, #1
 80058d4:	e7dc      	b.n	8005890 <_sungetc_r+0x34>

080058d6 <__ssrefill_r>:
 80058d6:	b510      	push	{r4, lr}
 80058d8:	460c      	mov	r4, r1
 80058da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80058dc:	b169      	cbz	r1, 80058fa <__ssrefill_r+0x24>
 80058de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058e2:	4299      	cmp	r1, r3
 80058e4:	d001      	beq.n	80058ea <__ssrefill_r+0x14>
 80058e6:	f7fe fed1 	bl	800468c <_free_r>
 80058ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	2000      	movs	r0, #0
 80058f0:	6360      	str	r0, [r4, #52]	; 0x34
 80058f2:	b113      	cbz	r3, 80058fa <__ssrefill_r+0x24>
 80058f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	bd10      	pop	{r4, pc}
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	6063      	str	r3, [r4, #4]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f043 0320 	orr.w	r3, r3, #32
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	e7f3      	b.n	80058f8 <__ssrefill_r+0x22>

08005910 <__ssvfiscanf_r>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	460c      	mov	r4, r1
 8005916:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800591a:	2100      	movs	r1, #0
 800591c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005920:	49a6      	ldr	r1, [pc, #664]	; (8005bbc <__ssvfiscanf_r+0x2ac>)
 8005922:	91a0      	str	r1, [sp, #640]	; 0x280
 8005924:	f10d 0804 	add.w	r8, sp, #4
 8005928:	49a5      	ldr	r1, [pc, #660]	; (8005bc0 <__ssvfiscanf_r+0x2b0>)
 800592a:	4fa6      	ldr	r7, [pc, #664]	; (8005bc4 <__ssvfiscanf_r+0x2b4>)
 800592c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005bc8 <__ssvfiscanf_r+0x2b8>
 8005930:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005934:	4606      	mov	r6, r0
 8005936:	91a1      	str	r1, [sp, #644]	; 0x284
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	7813      	ldrb	r3, [r2, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 815a 	beq.w	8005bf6 <__ssvfiscanf_r+0x2e6>
 8005942:	5cf9      	ldrb	r1, [r7, r3]
 8005944:	f011 0108 	ands.w	r1, r1, #8
 8005948:	f102 0501 	add.w	r5, r2, #1
 800594c:	d019      	beq.n	8005982 <__ssvfiscanf_r+0x72>
 800594e:	6863      	ldr	r3, [r4, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	dd0f      	ble.n	8005974 <__ssvfiscanf_r+0x64>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	5cba      	ldrb	r2, [r7, r2]
 800595a:	0712      	lsls	r2, r2, #28
 800595c:	d401      	bmi.n	8005962 <__ssvfiscanf_r+0x52>
 800595e:	462a      	mov	r2, r5
 8005960:	e7eb      	b.n	800593a <__ssvfiscanf_r+0x2a>
 8005962:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005964:	3201      	adds	r2, #1
 8005966:	9245      	str	r2, [sp, #276]	; 0x114
 8005968:	6862      	ldr	r2, [r4, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	3a01      	subs	r2, #1
 800596e:	6062      	str	r2, [r4, #4]
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	e7ec      	b.n	800594e <__ssvfiscanf_r+0x3e>
 8005974:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005976:	4621      	mov	r1, r4
 8005978:	4630      	mov	r0, r6
 800597a:	4798      	blx	r3
 800597c:	2800      	cmp	r0, #0
 800597e:	d0e9      	beq.n	8005954 <__ssvfiscanf_r+0x44>
 8005980:	e7ed      	b.n	800595e <__ssvfiscanf_r+0x4e>
 8005982:	2b25      	cmp	r3, #37	; 0x25
 8005984:	d012      	beq.n	80059ac <__ssvfiscanf_r+0x9c>
 8005986:	469a      	mov	sl, r3
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f340 8091 	ble.w	8005ab2 <__ssvfiscanf_r+0x1a2>
 8005990:	6822      	ldr	r2, [r4, #0]
 8005992:	7813      	ldrb	r3, [r2, #0]
 8005994:	4553      	cmp	r3, sl
 8005996:	f040 812e 	bne.w	8005bf6 <__ssvfiscanf_r+0x2e6>
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	3b01      	subs	r3, #1
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80059a2:	3201      	adds	r2, #1
 80059a4:	3301      	adds	r3, #1
 80059a6:	6022      	str	r2, [r4, #0]
 80059a8:	9345      	str	r3, [sp, #276]	; 0x114
 80059aa:	e7d8      	b.n	800595e <__ssvfiscanf_r+0x4e>
 80059ac:	9141      	str	r1, [sp, #260]	; 0x104
 80059ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80059b0:	7853      	ldrb	r3, [r2, #1]
 80059b2:	2b2a      	cmp	r3, #42	; 0x2a
 80059b4:	bf02      	ittt	eq
 80059b6:	2310      	moveq	r3, #16
 80059b8:	1c95      	addeq	r5, r2, #2
 80059ba:	9341      	streq	r3, [sp, #260]	; 0x104
 80059bc:	220a      	movs	r2, #10
 80059be:	46aa      	mov	sl, r5
 80059c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80059c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80059c8:	2b09      	cmp	r3, #9
 80059ca:	d91c      	bls.n	8005a06 <__ssvfiscanf_r+0xf6>
 80059cc:	487e      	ldr	r0, [pc, #504]	; (8005bc8 <__ssvfiscanf_r+0x2b8>)
 80059ce:	2203      	movs	r2, #3
 80059d0:	f7fa fc0e 	bl	80001f0 <memchr>
 80059d4:	b138      	cbz	r0, 80059e6 <__ssvfiscanf_r+0xd6>
 80059d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80059d8:	eba0 0009 	sub.w	r0, r0, r9
 80059dc:	2301      	movs	r3, #1
 80059de:	4083      	lsls	r3, r0
 80059e0:	4313      	orrs	r3, r2
 80059e2:	9341      	str	r3, [sp, #260]	; 0x104
 80059e4:	4655      	mov	r5, sl
 80059e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059ea:	2b78      	cmp	r3, #120	; 0x78
 80059ec:	d806      	bhi.n	80059fc <__ssvfiscanf_r+0xec>
 80059ee:	2b57      	cmp	r3, #87	; 0x57
 80059f0:	d810      	bhi.n	8005a14 <__ssvfiscanf_r+0x104>
 80059f2:	2b25      	cmp	r3, #37	; 0x25
 80059f4:	d0c7      	beq.n	8005986 <__ssvfiscanf_r+0x76>
 80059f6:	d857      	bhi.n	8005aa8 <__ssvfiscanf_r+0x198>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d065      	beq.n	8005ac8 <__ssvfiscanf_r+0x1b8>
 80059fc:	2303      	movs	r3, #3
 80059fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8005a00:	230a      	movs	r3, #10
 8005a02:	9342      	str	r3, [sp, #264]	; 0x108
 8005a04:	e076      	b.n	8005af4 <__ssvfiscanf_r+0x1e4>
 8005a06:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005a08:	fb02 1103 	mla	r1, r2, r3, r1
 8005a0c:	3930      	subs	r1, #48	; 0x30
 8005a0e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005a10:	4655      	mov	r5, sl
 8005a12:	e7d4      	b.n	80059be <__ssvfiscanf_r+0xae>
 8005a14:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005a18:	2a20      	cmp	r2, #32
 8005a1a:	d8ef      	bhi.n	80059fc <__ssvfiscanf_r+0xec>
 8005a1c:	a101      	add	r1, pc, #4	; (adr r1, 8005a24 <__ssvfiscanf_r+0x114>)
 8005a1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005ad7 	.word	0x08005ad7
 8005a28:	080059fd 	.word	0x080059fd
 8005a2c:	080059fd 	.word	0x080059fd
 8005a30:	08005b35 	.word	0x08005b35
 8005a34:	080059fd 	.word	0x080059fd
 8005a38:	080059fd 	.word	0x080059fd
 8005a3c:	080059fd 	.word	0x080059fd
 8005a40:	080059fd 	.word	0x080059fd
 8005a44:	080059fd 	.word	0x080059fd
 8005a48:	080059fd 	.word	0x080059fd
 8005a4c:	080059fd 	.word	0x080059fd
 8005a50:	08005b4b 	.word	0x08005b4b
 8005a54:	08005b31 	.word	0x08005b31
 8005a58:	08005aaf 	.word	0x08005aaf
 8005a5c:	08005aaf 	.word	0x08005aaf
 8005a60:	08005aaf 	.word	0x08005aaf
 8005a64:	080059fd 	.word	0x080059fd
 8005a68:	08005aed 	.word	0x08005aed
 8005a6c:	080059fd 	.word	0x080059fd
 8005a70:	080059fd 	.word	0x080059fd
 8005a74:	080059fd 	.word	0x080059fd
 8005a78:	080059fd 	.word	0x080059fd
 8005a7c:	08005b5b 	.word	0x08005b5b
 8005a80:	08005b29 	.word	0x08005b29
 8005a84:	08005acf 	.word	0x08005acf
 8005a88:	080059fd 	.word	0x080059fd
 8005a8c:	080059fd 	.word	0x080059fd
 8005a90:	08005b57 	.word	0x08005b57
 8005a94:	080059fd 	.word	0x080059fd
 8005a98:	08005b31 	.word	0x08005b31
 8005a9c:	080059fd 	.word	0x080059fd
 8005aa0:	080059fd 	.word	0x080059fd
 8005aa4:	08005ad7 	.word	0x08005ad7
 8005aa8:	3b45      	subs	r3, #69	; 0x45
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d8a6      	bhi.n	80059fc <__ssvfiscanf_r+0xec>
 8005aae:	2305      	movs	r3, #5
 8005ab0:	e01f      	b.n	8005af2 <__ssvfiscanf_r+0x1e2>
 8005ab2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	4798      	blx	r3
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f43f af68 	beq.w	8005990 <__ssvfiscanf_r+0x80>
 8005ac0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f040 808d 	bne.w	8005be2 <__ssvfiscanf_r+0x2d2>
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	e08f      	b.n	8005bee <__ssvfiscanf_r+0x2de>
 8005ace:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ad0:	f042 0220 	orr.w	r2, r2, #32
 8005ad4:	9241      	str	r2, [sp, #260]	; 0x104
 8005ad6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005adc:	9241      	str	r2, [sp, #260]	; 0x104
 8005ade:	2210      	movs	r2, #16
 8005ae0:	2b6f      	cmp	r3, #111	; 0x6f
 8005ae2:	9242      	str	r2, [sp, #264]	; 0x108
 8005ae4:	bf34      	ite	cc
 8005ae6:	2303      	movcc	r3, #3
 8005ae8:	2304      	movcs	r3, #4
 8005aea:	e002      	b.n	8005af2 <__ssvfiscanf_r+0x1e2>
 8005aec:	2300      	movs	r3, #0
 8005aee:	9342      	str	r3, [sp, #264]	; 0x108
 8005af0:	2303      	movs	r3, #3
 8005af2:	9347      	str	r3, [sp, #284]	; 0x11c
 8005af4:	6863      	ldr	r3, [r4, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dd3d      	ble.n	8005b76 <__ssvfiscanf_r+0x266>
 8005afa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005afc:	0659      	lsls	r1, r3, #25
 8005afe:	d404      	bmi.n	8005b0a <__ssvfiscanf_r+0x1fa>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	5cba      	ldrb	r2, [r7, r2]
 8005b06:	0712      	lsls	r2, r2, #28
 8005b08:	d43c      	bmi.n	8005b84 <__ssvfiscanf_r+0x274>
 8005b0a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	dc4b      	bgt.n	8005ba8 <__ssvfiscanf_r+0x298>
 8005b10:	466b      	mov	r3, sp
 8005b12:	4622      	mov	r2, r4
 8005b14:	a941      	add	r1, sp, #260	; 0x104
 8005b16:	4630      	mov	r0, r6
 8005b18:	f000 fa02 	bl	8005f20 <_scanf_chars>
 8005b1c:	2801      	cmp	r0, #1
 8005b1e:	d06a      	beq.n	8005bf6 <__ssvfiscanf_r+0x2e6>
 8005b20:	2802      	cmp	r0, #2
 8005b22:	f47f af1c 	bne.w	800595e <__ssvfiscanf_r+0x4e>
 8005b26:	e7cb      	b.n	8005ac0 <__ssvfiscanf_r+0x1b0>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	9342      	str	r3, [sp, #264]	; 0x108
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	e7e0      	b.n	8005af2 <__ssvfiscanf_r+0x1e2>
 8005b30:	220a      	movs	r2, #10
 8005b32:	e7d5      	b.n	8005ae0 <__ssvfiscanf_r+0x1d0>
 8005b34:	4629      	mov	r1, r5
 8005b36:	4640      	mov	r0, r8
 8005b38:	f000 fbee 	bl	8006318 <__sccl>
 8005b3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b42:	9341      	str	r3, [sp, #260]	; 0x104
 8005b44:	4605      	mov	r5, r0
 8005b46:	2301      	movs	r3, #1
 8005b48:	e7d3      	b.n	8005af2 <__ssvfiscanf_r+0x1e2>
 8005b4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b50:	9341      	str	r3, [sp, #260]	; 0x104
 8005b52:	2300      	movs	r3, #0
 8005b54:	e7cd      	b.n	8005af2 <__ssvfiscanf_r+0x1e2>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e7cb      	b.n	8005af2 <__ssvfiscanf_r+0x1e2>
 8005b5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005b5c:	06c3      	lsls	r3, r0, #27
 8005b5e:	f53f aefe 	bmi.w	800595e <__ssvfiscanf_r+0x4e>
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b66:	1d19      	adds	r1, r3, #4
 8005b68:	9100      	str	r1, [sp, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	07c0      	lsls	r0, r0, #31
 8005b6e:	bf4c      	ite	mi
 8005b70:	801a      	strhmi	r2, [r3, #0]
 8005b72:	601a      	strpl	r2, [r3, #0]
 8005b74:	e6f3      	b.n	800595e <__ssvfiscanf_r+0x4e>
 8005b76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b78:	4621      	mov	r1, r4
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4798      	blx	r3
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0bb      	beq.n	8005afa <__ssvfiscanf_r+0x1ea>
 8005b82:	e79d      	b.n	8005ac0 <__ssvfiscanf_r+0x1b0>
 8005b84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b86:	3201      	adds	r2, #1
 8005b88:	9245      	str	r2, [sp, #276]	; 0x114
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	3a01      	subs	r2, #1
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	6062      	str	r2, [r4, #4]
 8005b92:	dd02      	ble.n	8005b9a <__ssvfiscanf_r+0x28a>
 8005b94:	3301      	adds	r3, #1
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	e7b2      	b.n	8005b00 <__ssvfiscanf_r+0x1f0>
 8005b9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4798      	blx	r3
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d0ac      	beq.n	8005b00 <__ssvfiscanf_r+0x1f0>
 8005ba6:	e78b      	b.n	8005ac0 <__ssvfiscanf_r+0x1b0>
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	dc0f      	bgt.n	8005bcc <__ssvfiscanf_r+0x2bc>
 8005bac:	466b      	mov	r3, sp
 8005bae:	4622      	mov	r2, r4
 8005bb0:	a941      	add	r1, sp, #260	; 0x104
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f000 fa0e 	bl	8005fd4 <_scanf_i>
 8005bb8:	e7b0      	b.n	8005b1c <__ssvfiscanf_r+0x20c>
 8005bba:	bf00      	nop
 8005bbc:	0800585d 	.word	0x0800585d
 8005bc0:	080058d7 	.word	0x080058d7
 8005bc4:	08007cf1 	.word	0x08007cf1
 8005bc8:	08007df7 	.word	0x08007df7
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <__ssvfiscanf_r+0x2ec>)
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f43f aec5 	beq.w	800595e <__ssvfiscanf_r+0x4e>
 8005bd4:	466b      	mov	r3, sp
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	a941      	add	r1, sp, #260	; 0x104
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7fe f984 	bl	8003ee8 <_scanf_float>
 8005be0:	e79c      	b.n	8005b1c <__ssvfiscanf_r+0x20c>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005be8:	bf18      	it	ne
 8005bea:	f04f 30ff 	movne.w	r0, #4294967295
 8005bee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005bf8:	e7f9      	b.n	8005bee <__ssvfiscanf_r+0x2de>
 8005bfa:	bf00      	nop
 8005bfc:	08003ee9 	.word	0x08003ee9

08005c00 <_printf_common>:
 8005c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	4616      	mov	r6, r2
 8005c06:	4699      	mov	r9, r3
 8005c08:	688a      	ldr	r2, [r1, #8]
 8005c0a:	690b      	ldr	r3, [r1, #16]
 8005c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c10:	4293      	cmp	r3, r2
 8005c12:	bfb8      	it	lt
 8005c14:	4613      	movlt	r3, r2
 8005c16:	6033      	str	r3, [r6, #0]
 8005c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	b10a      	cbz	r2, 8005c26 <_printf_common+0x26>
 8005c22:	3301      	adds	r3, #1
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	0699      	lsls	r1, r3, #26
 8005c2a:	bf42      	ittt	mi
 8005c2c:	6833      	ldrmi	r3, [r6, #0]
 8005c2e:	3302      	addmi	r3, #2
 8005c30:	6033      	strmi	r3, [r6, #0]
 8005c32:	6825      	ldr	r5, [r4, #0]
 8005c34:	f015 0506 	ands.w	r5, r5, #6
 8005c38:	d106      	bne.n	8005c48 <_printf_common+0x48>
 8005c3a:	f104 0a19 	add.w	sl, r4, #25
 8005c3e:	68e3      	ldr	r3, [r4, #12]
 8005c40:	6832      	ldr	r2, [r6, #0]
 8005c42:	1a9b      	subs	r3, r3, r2
 8005c44:	42ab      	cmp	r3, r5
 8005c46:	dc26      	bgt.n	8005c96 <_printf_common+0x96>
 8005c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c4c:	1e13      	subs	r3, r2, #0
 8005c4e:	6822      	ldr	r2, [r4, #0]
 8005c50:	bf18      	it	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	0692      	lsls	r2, r2, #26
 8005c56:	d42b      	bmi.n	8005cb0 <_printf_common+0xb0>
 8005c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	4638      	mov	r0, r7
 8005c60:	47c0      	blx	r8
 8005c62:	3001      	adds	r0, #1
 8005c64:	d01e      	beq.n	8005ca4 <_printf_common+0xa4>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	6922      	ldr	r2, [r4, #16]
 8005c6a:	f003 0306 	and.w	r3, r3, #6
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	bf02      	ittt	eq
 8005c72:	68e5      	ldreq	r5, [r4, #12]
 8005c74:	6833      	ldreq	r3, [r6, #0]
 8005c76:	1aed      	subeq	r5, r5, r3
 8005c78:	68a3      	ldr	r3, [r4, #8]
 8005c7a:	bf0c      	ite	eq
 8005c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c80:	2500      	movne	r5, #0
 8005c82:	4293      	cmp	r3, r2
 8005c84:	bfc4      	itt	gt
 8005c86:	1a9b      	subgt	r3, r3, r2
 8005c88:	18ed      	addgt	r5, r5, r3
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	341a      	adds	r4, #26
 8005c8e:	42b5      	cmp	r5, r6
 8005c90:	d11a      	bne.n	8005cc8 <_printf_common+0xc8>
 8005c92:	2000      	movs	r0, #0
 8005c94:	e008      	b.n	8005ca8 <_printf_common+0xa8>
 8005c96:	2301      	movs	r3, #1
 8005c98:	4652      	mov	r2, sl
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	47c0      	blx	r8
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d103      	bne.n	8005cac <_printf_common+0xac>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cac:	3501      	adds	r5, #1
 8005cae:	e7c6      	b.n	8005c3e <_printf_common+0x3e>
 8005cb0:	18e1      	adds	r1, r4, r3
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	2030      	movs	r0, #48	; 0x30
 8005cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cba:	4422      	add	r2, r4
 8005cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	e7c7      	b.n	8005c58 <_printf_common+0x58>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	4622      	mov	r2, r4
 8005ccc:	4649      	mov	r1, r9
 8005cce:	4638      	mov	r0, r7
 8005cd0:	47c0      	blx	r8
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d0e6      	beq.n	8005ca4 <_printf_common+0xa4>
 8005cd6:	3601      	adds	r6, #1
 8005cd8:	e7d9      	b.n	8005c8e <_printf_common+0x8e>
	...

08005cdc <_printf_i>:
 8005cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	7e0f      	ldrb	r7, [r1, #24]
 8005ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce4:	2f78      	cmp	r7, #120	; 0x78
 8005ce6:	4691      	mov	r9, r2
 8005ce8:	4680      	mov	r8, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	469a      	mov	sl, r3
 8005cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cf2:	d807      	bhi.n	8005d04 <_printf_i+0x28>
 8005cf4:	2f62      	cmp	r7, #98	; 0x62
 8005cf6:	d80a      	bhi.n	8005d0e <_printf_i+0x32>
 8005cf8:	2f00      	cmp	r7, #0
 8005cfa:	f000 80d4 	beq.w	8005ea6 <_printf_i+0x1ca>
 8005cfe:	2f58      	cmp	r7, #88	; 0x58
 8005d00:	f000 80c0 	beq.w	8005e84 <_printf_i+0x1a8>
 8005d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d0c:	e03a      	b.n	8005d84 <_printf_i+0xa8>
 8005d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d12:	2b15      	cmp	r3, #21
 8005d14:	d8f6      	bhi.n	8005d04 <_printf_i+0x28>
 8005d16:	a101      	add	r1, pc, #4	; (adr r1, 8005d1c <_printf_i+0x40>)
 8005d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d1c:	08005d75 	.word	0x08005d75
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d05 	.word	0x08005d05
 8005d28:	08005d05 	.word	0x08005d05
 8005d2c:	08005d05 	.word	0x08005d05
 8005d30:	08005d05 	.word	0x08005d05
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005d05 	.word	0x08005d05
 8005d3c:	08005d05 	.word	0x08005d05
 8005d40:	08005d05 	.word	0x08005d05
 8005d44:	08005d05 	.word	0x08005d05
 8005d48:	08005e8d 	.word	0x08005e8d
 8005d4c:	08005db5 	.word	0x08005db5
 8005d50:	08005e47 	.word	0x08005e47
 8005d54:	08005d05 	.word	0x08005d05
 8005d58:	08005d05 	.word	0x08005d05
 8005d5c:	08005eaf 	.word	0x08005eaf
 8005d60:	08005d05 	.word	0x08005d05
 8005d64:	08005db5 	.word	0x08005db5
 8005d68:	08005d05 	.word	0x08005d05
 8005d6c:	08005d05 	.word	0x08005d05
 8005d70:	08005e4f 	.word	0x08005e4f
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	1d1a      	adds	r2, r3, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	602a      	str	r2, [r5, #0]
 8005d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d84:	2301      	movs	r3, #1
 8005d86:	e09f      	b.n	8005ec8 <_printf_i+0x1ec>
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	0607      	lsls	r7, r0, #24
 8005d8e:	f103 0104 	add.w	r1, r3, #4
 8005d92:	6029      	str	r1, [r5, #0]
 8005d94:	d501      	bpl.n	8005d9a <_printf_i+0xbe>
 8005d96:	681e      	ldr	r6, [r3, #0]
 8005d98:	e003      	b.n	8005da2 <_printf_i+0xc6>
 8005d9a:	0646      	lsls	r6, r0, #25
 8005d9c:	d5fb      	bpl.n	8005d96 <_printf_i+0xba>
 8005d9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005da2:	2e00      	cmp	r6, #0
 8005da4:	da03      	bge.n	8005dae <_printf_i+0xd2>
 8005da6:	232d      	movs	r3, #45	; 0x2d
 8005da8:	4276      	negs	r6, r6
 8005daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dae:	485a      	ldr	r0, [pc, #360]	; (8005f18 <_printf_i+0x23c>)
 8005db0:	230a      	movs	r3, #10
 8005db2:	e012      	b.n	8005dda <_printf_i+0xfe>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	1d19      	adds	r1, r3, #4
 8005dba:	6029      	str	r1, [r5, #0]
 8005dbc:	0605      	lsls	r5, r0, #24
 8005dbe:	d501      	bpl.n	8005dc4 <_printf_i+0xe8>
 8005dc0:	681e      	ldr	r6, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <_printf_i+0xee>
 8005dc4:	0641      	lsls	r1, r0, #25
 8005dc6:	d5fb      	bpl.n	8005dc0 <_printf_i+0xe4>
 8005dc8:	881e      	ldrh	r6, [r3, #0]
 8005dca:	4853      	ldr	r0, [pc, #332]	; (8005f18 <_printf_i+0x23c>)
 8005dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8005dce:	bf0c      	ite	eq
 8005dd0:	2308      	moveq	r3, #8
 8005dd2:	230a      	movne	r3, #10
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dda:	6865      	ldr	r5, [r4, #4]
 8005ddc:	60a5      	str	r5, [r4, #8]
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	bfa2      	ittt	ge
 8005de2:	6821      	ldrge	r1, [r4, #0]
 8005de4:	f021 0104 	bicge.w	r1, r1, #4
 8005de8:	6021      	strge	r1, [r4, #0]
 8005dea:	b90e      	cbnz	r6, 8005df0 <_printf_i+0x114>
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	d04b      	beq.n	8005e88 <_printf_i+0x1ac>
 8005df0:	4615      	mov	r5, r2
 8005df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005df6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dfa:	5dc7      	ldrb	r7, [r0, r7]
 8005dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e00:	4637      	mov	r7, r6
 8005e02:	42bb      	cmp	r3, r7
 8005e04:	460e      	mov	r6, r1
 8005e06:	d9f4      	bls.n	8005df2 <_printf_i+0x116>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d10b      	bne.n	8005e24 <_printf_i+0x148>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	07de      	lsls	r6, r3, #31
 8005e10:	d508      	bpl.n	8005e24 <_printf_i+0x148>
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	6861      	ldr	r1, [r4, #4]
 8005e16:	4299      	cmp	r1, r3
 8005e18:	bfde      	ittt	le
 8005e1a:	2330      	movle	r3, #48	; 0x30
 8005e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e24:	1b52      	subs	r2, r2, r5
 8005e26:	6122      	str	r2, [r4, #16]
 8005e28:	f8cd a000 	str.w	sl, [sp]
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	aa03      	add	r2, sp, #12
 8005e30:	4621      	mov	r1, r4
 8005e32:	4640      	mov	r0, r8
 8005e34:	f7ff fee4 	bl	8005c00 <_printf_common>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d14a      	bne.n	8005ed2 <_printf_i+0x1f6>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	b004      	add	sp, #16
 8005e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f043 0320 	orr.w	r3, r3, #32
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	4833      	ldr	r0, [pc, #204]	; (8005f1c <_printf_i+0x240>)
 8005e50:	2778      	movs	r7, #120	; 0x78
 8005e52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	6829      	ldr	r1, [r5, #0]
 8005e5a:	061f      	lsls	r7, r3, #24
 8005e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e60:	d402      	bmi.n	8005e68 <_printf_i+0x18c>
 8005e62:	065f      	lsls	r7, r3, #25
 8005e64:	bf48      	it	mi
 8005e66:	b2b6      	uxthmi	r6, r6
 8005e68:	07df      	lsls	r7, r3, #31
 8005e6a:	bf48      	it	mi
 8005e6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e70:	6029      	str	r1, [r5, #0]
 8005e72:	bf48      	it	mi
 8005e74:	6023      	strmi	r3, [r4, #0]
 8005e76:	b91e      	cbnz	r6, 8005e80 <_printf_i+0x1a4>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	f023 0320 	bic.w	r3, r3, #32
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	2310      	movs	r3, #16
 8005e82:	e7a7      	b.n	8005dd4 <_printf_i+0xf8>
 8005e84:	4824      	ldr	r0, [pc, #144]	; (8005f18 <_printf_i+0x23c>)
 8005e86:	e7e4      	b.n	8005e52 <_printf_i+0x176>
 8005e88:	4615      	mov	r5, r2
 8005e8a:	e7bd      	b.n	8005e08 <_printf_i+0x12c>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	6826      	ldr	r6, [r4, #0]
 8005e90:	6961      	ldr	r1, [r4, #20]
 8005e92:	1d18      	adds	r0, r3, #4
 8005e94:	6028      	str	r0, [r5, #0]
 8005e96:	0635      	lsls	r5, r6, #24
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0x1c4>
 8005e9c:	6019      	str	r1, [r3, #0]
 8005e9e:	e002      	b.n	8005ea6 <_printf_i+0x1ca>
 8005ea0:	0670      	lsls	r0, r6, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0x1c0>
 8005ea4:	8019      	strh	r1, [r3, #0]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	4615      	mov	r5, r2
 8005eac:	e7bc      	b.n	8005e28 <_printf_i+0x14c>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	1d1a      	adds	r2, r3, #4
 8005eb2:	602a      	str	r2, [r5, #0]
 8005eb4:	681d      	ldr	r5, [r3, #0]
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f7fa f998 	bl	80001f0 <memchr>
 8005ec0:	b108      	cbz	r0, 8005ec6 <_printf_i+0x1ea>
 8005ec2:	1b40      	subs	r0, r0, r5
 8005ec4:	6060      	str	r0, [r4, #4]
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	e7aa      	b.n	8005e28 <_printf_i+0x14c>
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	4640      	mov	r0, r8
 8005eda:	47d0      	blx	sl
 8005edc:	3001      	adds	r0, #1
 8005ede:	d0ad      	beq.n	8005e3c <_printf_i+0x160>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	079b      	lsls	r3, r3, #30
 8005ee4:	d413      	bmi.n	8005f0e <_printf_i+0x232>
 8005ee6:	68e0      	ldr	r0, [r4, #12]
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	4298      	cmp	r0, r3
 8005eec:	bfb8      	it	lt
 8005eee:	4618      	movlt	r0, r3
 8005ef0:	e7a6      	b.n	8005e40 <_printf_i+0x164>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	47d0      	blx	sl
 8005efc:	3001      	adds	r0, #1
 8005efe:	d09d      	beq.n	8005e3c <_printf_i+0x160>
 8005f00:	3501      	adds	r5, #1
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	9903      	ldr	r1, [sp, #12]
 8005f06:	1a5b      	subs	r3, r3, r1
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	dcf2      	bgt.n	8005ef2 <_printf_i+0x216>
 8005f0c:	e7eb      	b.n	8005ee6 <_printf_i+0x20a>
 8005f0e:	2500      	movs	r5, #0
 8005f10:	f104 0619 	add.w	r6, r4, #25
 8005f14:	e7f5      	b.n	8005f02 <_printf_i+0x226>
 8005f16:	bf00      	nop
 8005f18:	08007e02 	.word	0x08007e02
 8005f1c:	08007e13 	.word	0x08007e13

08005f20 <_scanf_chars>:
 8005f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f24:	4615      	mov	r5, r2
 8005f26:	688a      	ldr	r2, [r1, #8]
 8005f28:	4680      	mov	r8, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	b932      	cbnz	r2, 8005f3c <_scanf_chars+0x1c>
 8005f2e:	698a      	ldr	r2, [r1, #24]
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	bf0c      	ite	eq
 8005f34:	2201      	moveq	r2, #1
 8005f36:	f04f 32ff 	movne.w	r2, #4294967295
 8005f3a:	608a      	str	r2, [r1, #8]
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005fd0 <_scanf_chars+0xb0>
 8005f42:	06d1      	lsls	r1, r2, #27
 8005f44:	bf5f      	itttt	pl
 8005f46:	681a      	ldrpl	r2, [r3, #0]
 8005f48:	1d11      	addpl	r1, r2, #4
 8005f4a:	6019      	strpl	r1, [r3, #0]
 8005f4c:	6816      	ldrpl	r6, [r2, #0]
 8005f4e:	2700      	movs	r7, #0
 8005f50:	69a0      	ldr	r0, [r4, #24]
 8005f52:	b188      	cbz	r0, 8005f78 <_scanf_chars+0x58>
 8005f54:	2801      	cmp	r0, #1
 8005f56:	d107      	bne.n	8005f68 <_scanf_chars+0x48>
 8005f58:	682a      	ldr	r2, [r5, #0]
 8005f5a:	7811      	ldrb	r1, [r2, #0]
 8005f5c:	6962      	ldr	r2, [r4, #20]
 8005f5e:	5c52      	ldrb	r2, [r2, r1]
 8005f60:	b952      	cbnz	r2, 8005f78 <_scanf_chars+0x58>
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	d031      	beq.n	8005fca <_scanf_chars+0xaa>
 8005f66:	e022      	b.n	8005fae <_scanf_chars+0x8e>
 8005f68:	2802      	cmp	r0, #2
 8005f6a:	d120      	bne.n	8005fae <_scanf_chars+0x8e>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005f74:	071b      	lsls	r3, r3, #28
 8005f76:	d41a      	bmi.n	8005fae <_scanf_chars+0x8e>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	06da      	lsls	r2, r3, #27
 8005f7c:	bf5e      	ittt	pl
 8005f7e:	682b      	ldrpl	r3, [r5, #0]
 8005f80:	781b      	ldrbpl	r3, [r3, #0]
 8005f82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005f86:	682a      	ldr	r2, [r5, #0]
 8005f88:	686b      	ldr	r3, [r5, #4]
 8005f8a:	3201      	adds	r2, #1
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	68a2      	ldr	r2, [r4, #8]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	3a01      	subs	r2, #1
 8005f94:	606b      	str	r3, [r5, #4]
 8005f96:	3701      	adds	r7, #1
 8005f98:	60a2      	str	r2, [r4, #8]
 8005f9a:	b142      	cbz	r2, 8005fae <_scanf_chars+0x8e>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dcd7      	bgt.n	8005f50 <_scanf_chars+0x30>
 8005fa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4798      	blx	r3
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d0d0      	beq.n	8005f50 <_scanf_chars+0x30>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f013 0310 	ands.w	r3, r3, #16
 8005fb4:	d105      	bne.n	8005fc2 <_scanf_chars+0xa2>
 8005fb6:	68e2      	ldr	r2, [r4, #12]
 8005fb8:	3201      	adds	r2, #1
 8005fba:	60e2      	str	r2, [r4, #12]
 8005fbc:	69a2      	ldr	r2, [r4, #24]
 8005fbe:	b102      	cbz	r2, 8005fc2 <_scanf_chars+0xa2>
 8005fc0:	7033      	strb	r3, [r6, #0]
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	443b      	add	r3, r7
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	2000      	movs	r0, #0
 8005fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fce:	bf00      	nop
 8005fd0:	08007cf1 	.word	0x08007cf1

08005fd4 <_scanf_i>:
 8005fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	4698      	mov	r8, r3
 8005fda:	4b74      	ldr	r3, [pc, #464]	; (80061ac <_scanf_i+0x1d8>)
 8005fdc:	460c      	mov	r4, r1
 8005fde:	4682      	mov	sl, r0
 8005fe0:	4616      	mov	r6, r2
 8005fe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	ab03      	add	r3, sp, #12
 8005fea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005fee:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <_scanf_i+0x1dc>)
 8005ff0:	69a1      	ldr	r1, [r4, #24]
 8005ff2:	4a70      	ldr	r2, [pc, #448]	; (80061b4 <_scanf_i+0x1e0>)
 8005ff4:	2903      	cmp	r1, #3
 8005ff6:	bf18      	it	ne
 8005ff8:	461a      	movne	r2, r3
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	9201      	str	r2, [sp, #4]
 8005ffe:	1e5a      	subs	r2, r3, #1
 8006000:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006004:	bf88      	it	hi
 8006006:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800600a:	4627      	mov	r7, r4
 800600c:	bf82      	ittt	hi
 800600e:	eb03 0905 	addhi.w	r9, r3, r5
 8006012:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006016:	60a3      	strhi	r3, [r4, #8]
 8006018:	f857 3b1c 	ldr.w	r3, [r7], #28
 800601c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006020:	bf98      	it	ls
 8006022:	f04f 0900 	movls.w	r9, #0
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	463d      	mov	r5, r7
 800602a:	f04f 0b00 	mov.w	fp, #0
 800602e:	6831      	ldr	r1, [r6, #0]
 8006030:	ab03      	add	r3, sp, #12
 8006032:	7809      	ldrb	r1, [r1, #0]
 8006034:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006038:	2202      	movs	r2, #2
 800603a:	f7fa f8d9 	bl	80001f0 <memchr>
 800603e:	b328      	cbz	r0, 800608c <_scanf_i+0xb8>
 8006040:	f1bb 0f01 	cmp.w	fp, #1
 8006044:	d159      	bne.n	80060fa <_scanf_i+0x126>
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	b92a      	cbnz	r2, 8006056 <_scanf_i+0x82>
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	2308      	movs	r3, #8
 800604e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	6022      	str	r2, [r4, #0]
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800605c:	6022      	str	r2, [r4, #0]
 800605e:	68a2      	ldr	r2, [r4, #8]
 8006060:	1e51      	subs	r1, r2, #1
 8006062:	60a1      	str	r1, [r4, #8]
 8006064:	b192      	cbz	r2, 800608c <_scanf_i+0xb8>
 8006066:	6832      	ldr	r2, [r6, #0]
 8006068:	1c51      	adds	r1, r2, #1
 800606a:	6031      	str	r1, [r6, #0]
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	f805 2b01 	strb.w	r2, [r5], #1
 8006072:	6872      	ldr	r2, [r6, #4]
 8006074:	3a01      	subs	r2, #1
 8006076:	2a00      	cmp	r2, #0
 8006078:	6072      	str	r2, [r6, #4]
 800607a:	dc07      	bgt.n	800608c <_scanf_i+0xb8>
 800607c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006080:	4631      	mov	r1, r6
 8006082:	4650      	mov	r0, sl
 8006084:	4790      	blx	r2
 8006086:	2800      	cmp	r0, #0
 8006088:	f040 8085 	bne.w	8006196 <_scanf_i+0x1c2>
 800608c:	f10b 0b01 	add.w	fp, fp, #1
 8006090:	f1bb 0f03 	cmp.w	fp, #3
 8006094:	d1cb      	bne.n	800602e <_scanf_i+0x5a>
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	b90b      	cbnz	r3, 800609e <_scanf_i+0xca>
 800609a:	230a      	movs	r3, #10
 800609c:	6063      	str	r3, [r4, #4]
 800609e:	6863      	ldr	r3, [r4, #4]
 80060a0:	4945      	ldr	r1, [pc, #276]	; (80061b8 <_scanf_i+0x1e4>)
 80060a2:	6960      	ldr	r0, [r4, #20]
 80060a4:	1ac9      	subs	r1, r1, r3
 80060a6:	f000 f937 	bl	8006318 <__sccl>
 80060aa:	f04f 0b00 	mov.w	fp, #0
 80060ae:	68a3      	ldr	r3, [r4, #8]
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d03d      	beq.n	8006132 <_scanf_i+0x15e>
 80060b6:	6831      	ldr	r1, [r6, #0]
 80060b8:	6960      	ldr	r0, [r4, #20]
 80060ba:	f891 c000 	ldrb.w	ip, [r1]
 80060be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d035      	beq.n	8006132 <_scanf_i+0x15e>
 80060c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80060ca:	d124      	bne.n	8006116 <_scanf_i+0x142>
 80060cc:	0510      	lsls	r0, r2, #20
 80060ce:	d522      	bpl.n	8006116 <_scanf_i+0x142>
 80060d0:	f10b 0b01 	add.w	fp, fp, #1
 80060d4:	f1b9 0f00 	cmp.w	r9, #0
 80060d8:	d003      	beq.n	80060e2 <_scanf_i+0x10e>
 80060da:	3301      	adds	r3, #1
 80060dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80060e0:	60a3      	str	r3, [r4, #8]
 80060e2:	6873      	ldr	r3, [r6, #4]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	6073      	str	r3, [r6, #4]
 80060ea:	dd1b      	ble.n	8006124 <_scanf_i+0x150>
 80060ec:	6833      	ldr	r3, [r6, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	6033      	str	r3, [r6, #0]
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	60a3      	str	r3, [r4, #8]
 80060f8:	e7d9      	b.n	80060ae <_scanf_i+0xda>
 80060fa:	f1bb 0f02 	cmp.w	fp, #2
 80060fe:	d1ae      	bne.n	800605e <_scanf_i+0x8a>
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006106:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800610a:	d1bf      	bne.n	800608c <_scanf_i+0xb8>
 800610c:	2310      	movs	r3, #16
 800610e:	6063      	str	r3, [r4, #4]
 8006110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006114:	e7a2      	b.n	800605c <_scanf_i+0x88>
 8006116:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800611a:	6022      	str	r2, [r4, #0]
 800611c:	780b      	ldrb	r3, [r1, #0]
 800611e:	f805 3b01 	strb.w	r3, [r5], #1
 8006122:	e7de      	b.n	80060e2 <_scanf_i+0x10e>
 8006124:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006128:	4631      	mov	r1, r6
 800612a:	4650      	mov	r0, sl
 800612c:	4798      	blx	r3
 800612e:	2800      	cmp	r0, #0
 8006130:	d0df      	beq.n	80060f2 <_scanf_i+0x11e>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	05d9      	lsls	r1, r3, #23
 8006136:	d50d      	bpl.n	8006154 <_scanf_i+0x180>
 8006138:	42bd      	cmp	r5, r7
 800613a:	d909      	bls.n	8006150 <_scanf_i+0x17c>
 800613c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006144:	4632      	mov	r2, r6
 8006146:	4650      	mov	r0, sl
 8006148:	4798      	blx	r3
 800614a:	f105 39ff 	add.w	r9, r5, #4294967295
 800614e:	464d      	mov	r5, r9
 8006150:	42bd      	cmp	r5, r7
 8006152:	d028      	beq.n	80061a6 <_scanf_i+0x1d2>
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	f012 0210 	ands.w	r2, r2, #16
 800615a:	d113      	bne.n	8006184 <_scanf_i+0x1b0>
 800615c:	702a      	strb	r2, [r5, #0]
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	9e01      	ldr	r6, [sp, #4]
 8006162:	4639      	mov	r1, r7
 8006164:	4650      	mov	r0, sl
 8006166:	47b0      	blx	r6
 8006168:	f8d8 3000 	ldr.w	r3, [r8]
 800616c:	6821      	ldr	r1, [r4, #0]
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	f8c8 2000 	str.w	r2, [r8]
 8006174:	f011 0f20 	tst.w	r1, #32
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	d00f      	beq.n	800619c <_scanf_i+0x1c8>
 800617c:	6018      	str	r0, [r3, #0]
 800617e:	68e3      	ldr	r3, [r4, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60e3      	str	r3, [r4, #12]
 8006184:	6923      	ldr	r3, [r4, #16]
 8006186:	1bed      	subs	r5, r5, r7
 8006188:	445d      	add	r5, fp
 800618a:	442b      	add	r3, r5
 800618c:	6123      	str	r3, [r4, #16]
 800618e:	2000      	movs	r0, #0
 8006190:	b007      	add	sp, #28
 8006192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006196:	f04f 0b00 	mov.w	fp, #0
 800619a:	e7ca      	b.n	8006132 <_scanf_i+0x15e>
 800619c:	07ca      	lsls	r2, r1, #31
 800619e:	bf4c      	ite	mi
 80061a0:	8018      	strhmi	r0, [r3, #0]
 80061a2:	6018      	strpl	r0, [r3, #0]
 80061a4:	e7eb      	b.n	800617e <_scanf_i+0x1aa>
 80061a6:	2001      	movs	r0, #1
 80061a8:	e7f2      	b.n	8006190 <_scanf_i+0x1bc>
 80061aa:	bf00      	nop
 80061ac:	08007c5c 	.word	0x08007c5c
 80061b0:	08007619 	.word	0x08007619
 80061b4:	080055a9 	.word	0x080055a9
 80061b8:	08007e34 	.word	0x08007e34

080061bc <__sflush_r>:
 80061bc:	898a      	ldrh	r2, [r1, #12]
 80061be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c2:	4605      	mov	r5, r0
 80061c4:	0710      	lsls	r0, r2, #28
 80061c6:	460c      	mov	r4, r1
 80061c8:	d458      	bmi.n	800627c <__sflush_r+0xc0>
 80061ca:	684b      	ldr	r3, [r1, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	dc05      	bgt.n	80061dc <__sflush_r+0x20>
 80061d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dc02      	bgt.n	80061dc <__sflush_r+0x20>
 80061d6:	2000      	movs	r0, #0
 80061d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061de:	2e00      	cmp	r6, #0
 80061e0:	d0f9      	beq.n	80061d6 <__sflush_r+0x1a>
 80061e2:	2300      	movs	r3, #0
 80061e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061e8:	682f      	ldr	r7, [r5, #0]
 80061ea:	6a21      	ldr	r1, [r4, #32]
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	d032      	beq.n	8006256 <__sflush_r+0x9a>
 80061f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	075a      	lsls	r2, r3, #29
 80061f6:	d505      	bpl.n	8006204 <__sflush_r+0x48>
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	1ac0      	subs	r0, r0, r3
 80061fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061fe:	b10b      	cbz	r3, 8006204 <__sflush_r+0x48>
 8006200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006202:	1ac0      	subs	r0, r0, r3
 8006204:	2300      	movs	r3, #0
 8006206:	4602      	mov	r2, r0
 8006208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800620a:	6a21      	ldr	r1, [r4, #32]
 800620c:	4628      	mov	r0, r5
 800620e:	47b0      	blx	r6
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	d106      	bne.n	8006224 <__sflush_r+0x68>
 8006216:	6829      	ldr	r1, [r5, #0]
 8006218:	291d      	cmp	r1, #29
 800621a:	d82b      	bhi.n	8006274 <__sflush_r+0xb8>
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <__sflush_r+0x108>)
 800621e:	410a      	asrs	r2, r1
 8006220:	07d6      	lsls	r6, r2, #31
 8006222:	d427      	bmi.n	8006274 <__sflush_r+0xb8>
 8006224:	2200      	movs	r2, #0
 8006226:	6062      	str	r2, [r4, #4]
 8006228:	04d9      	lsls	r1, r3, #19
 800622a:	6922      	ldr	r2, [r4, #16]
 800622c:	6022      	str	r2, [r4, #0]
 800622e:	d504      	bpl.n	800623a <__sflush_r+0x7e>
 8006230:	1c42      	adds	r2, r0, #1
 8006232:	d101      	bne.n	8006238 <__sflush_r+0x7c>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b903      	cbnz	r3, 800623a <__sflush_r+0x7e>
 8006238:	6560      	str	r0, [r4, #84]	; 0x54
 800623a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800623c:	602f      	str	r7, [r5, #0]
 800623e:	2900      	cmp	r1, #0
 8006240:	d0c9      	beq.n	80061d6 <__sflush_r+0x1a>
 8006242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006246:	4299      	cmp	r1, r3
 8006248:	d002      	beq.n	8006250 <__sflush_r+0x94>
 800624a:	4628      	mov	r0, r5
 800624c:	f7fe fa1e 	bl	800468c <_free_r>
 8006250:	2000      	movs	r0, #0
 8006252:	6360      	str	r0, [r4, #52]	; 0x34
 8006254:	e7c0      	b.n	80061d8 <__sflush_r+0x1c>
 8006256:	2301      	movs	r3, #1
 8006258:	4628      	mov	r0, r5
 800625a:	47b0      	blx	r6
 800625c:	1c41      	adds	r1, r0, #1
 800625e:	d1c8      	bne.n	80061f2 <__sflush_r+0x36>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c5      	beq.n	80061f2 <__sflush_r+0x36>
 8006266:	2b1d      	cmp	r3, #29
 8006268:	d001      	beq.n	800626e <__sflush_r+0xb2>
 800626a:	2b16      	cmp	r3, #22
 800626c:	d101      	bne.n	8006272 <__sflush_r+0xb6>
 800626e:	602f      	str	r7, [r5, #0]
 8006270:	e7b1      	b.n	80061d6 <__sflush_r+0x1a>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	e7ad      	b.n	80061d8 <__sflush_r+0x1c>
 800627c:	690f      	ldr	r7, [r1, #16]
 800627e:	2f00      	cmp	r7, #0
 8006280:	d0a9      	beq.n	80061d6 <__sflush_r+0x1a>
 8006282:	0793      	lsls	r3, r2, #30
 8006284:	680e      	ldr	r6, [r1, #0]
 8006286:	bf08      	it	eq
 8006288:	694b      	ldreq	r3, [r1, #20]
 800628a:	600f      	str	r7, [r1, #0]
 800628c:	bf18      	it	ne
 800628e:	2300      	movne	r3, #0
 8006290:	eba6 0807 	sub.w	r8, r6, r7
 8006294:	608b      	str	r3, [r1, #8]
 8006296:	f1b8 0f00 	cmp.w	r8, #0
 800629a:	dd9c      	ble.n	80061d6 <__sflush_r+0x1a>
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062a0:	4643      	mov	r3, r8
 80062a2:	463a      	mov	r2, r7
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b0      	blx	r6
 80062a8:	2800      	cmp	r0, #0
 80062aa:	dc06      	bgt.n	80062ba <__sflush_r+0xfe>
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	e78e      	b.n	80061d8 <__sflush_r+0x1c>
 80062ba:	4407      	add	r7, r0
 80062bc:	eba8 0800 	sub.w	r8, r8, r0
 80062c0:	e7e9      	b.n	8006296 <__sflush_r+0xda>
 80062c2:	bf00      	nop
 80062c4:	dfbffffe 	.word	0xdfbffffe

080062c8 <_fflush_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	690b      	ldr	r3, [r1, #16]
 80062cc:	4605      	mov	r5, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	b913      	cbnz	r3, 80062d8 <_fflush_r+0x10>
 80062d2:	2500      	movs	r5, #0
 80062d4:	4628      	mov	r0, r5
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	b118      	cbz	r0, 80062e2 <_fflush_r+0x1a>
 80062da:	6a03      	ldr	r3, [r0, #32]
 80062dc:	b90b      	cbnz	r3, 80062e2 <_fflush_r+0x1a>
 80062de:	f7fe f88d 	bl	80043fc <__sinit>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f3      	beq.n	80062d2 <_fflush_r+0xa>
 80062ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062ec:	07d0      	lsls	r0, r2, #31
 80062ee:	d404      	bmi.n	80062fa <_fflush_r+0x32>
 80062f0:	0599      	lsls	r1, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_fflush_r+0x32>
 80062f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f6:	f7fe f9c1 	bl	800467c <__retarget_lock_acquire_recursive>
 80062fa:	4628      	mov	r0, r5
 80062fc:	4621      	mov	r1, r4
 80062fe:	f7ff ff5d 	bl	80061bc <__sflush_r>
 8006302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006304:	07da      	lsls	r2, r3, #31
 8006306:	4605      	mov	r5, r0
 8006308:	d4e4      	bmi.n	80062d4 <_fflush_r+0xc>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	059b      	lsls	r3, r3, #22
 800630e:	d4e1      	bmi.n	80062d4 <_fflush_r+0xc>
 8006310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006312:	f7fe f9b4 	bl	800467e <__retarget_lock_release_recursive>
 8006316:	e7dd      	b.n	80062d4 <_fflush_r+0xc>

08006318 <__sccl>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	780b      	ldrb	r3, [r1, #0]
 800631c:	4604      	mov	r4, r0
 800631e:	2b5e      	cmp	r3, #94	; 0x5e
 8006320:	bf0b      	itete	eq
 8006322:	784b      	ldrbeq	r3, [r1, #1]
 8006324:	1c4a      	addne	r2, r1, #1
 8006326:	1c8a      	addeq	r2, r1, #2
 8006328:	2100      	movne	r1, #0
 800632a:	bf08      	it	eq
 800632c:	2101      	moveq	r1, #1
 800632e:	3801      	subs	r0, #1
 8006330:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006334:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006338:	42a8      	cmp	r0, r5
 800633a:	d1fb      	bne.n	8006334 <__sccl+0x1c>
 800633c:	b90b      	cbnz	r3, 8006342 <__sccl+0x2a>
 800633e:	1e50      	subs	r0, r2, #1
 8006340:	bd70      	pop	{r4, r5, r6, pc}
 8006342:	f081 0101 	eor.w	r1, r1, #1
 8006346:	54e1      	strb	r1, [r4, r3]
 8006348:	4610      	mov	r0, r2
 800634a:	4602      	mov	r2, r0
 800634c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006350:	2d2d      	cmp	r5, #45	; 0x2d
 8006352:	d005      	beq.n	8006360 <__sccl+0x48>
 8006354:	2d5d      	cmp	r5, #93	; 0x5d
 8006356:	d016      	beq.n	8006386 <__sccl+0x6e>
 8006358:	2d00      	cmp	r5, #0
 800635a:	d0f1      	beq.n	8006340 <__sccl+0x28>
 800635c:	462b      	mov	r3, r5
 800635e:	e7f2      	b.n	8006346 <__sccl+0x2e>
 8006360:	7846      	ldrb	r6, [r0, #1]
 8006362:	2e5d      	cmp	r6, #93	; 0x5d
 8006364:	d0fa      	beq.n	800635c <__sccl+0x44>
 8006366:	42b3      	cmp	r3, r6
 8006368:	dcf8      	bgt.n	800635c <__sccl+0x44>
 800636a:	3002      	adds	r0, #2
 800636c:	461a      	mov	r2, r3
 800636e:	3201      	adds	r2, #1
 8006370:	4296      	cmp	r6, r2
 8006372:	54a1      	strb	r1, [r4, r2]
 8006374:	dcfb      	bgt.n	800636e <__sccl+0x56>
 8006376:	1af2      	subs	r2, r6, r3
 8006378:	3a01      	subs	r2, #1
 800637a:	1c5d      	adds	r5, r3, #1
 800637c:	42b3      	cmp	r3, r6
 800637e:	bfa8      	it	ge
 8006380:	2200      	movge	r2, #0
 8006382:	18ab      	adds	r3, r5, r2
 8006384:	e7e1      	b.n	800634a <__sccl+0x32>
 8006386:	4610      	mov	r0, r2
 8006388:	e7da      	b.n	8006340 <__sccl+0x28>

0800638a <__submore>:
 800638a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006396:	4299      	cmp	r1, r3
 8006398:	d11d      	bne.n	80063d6 <__submore+0x4c>
 800639a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800639e:	f7fe f9e1 	bl	8004764 <_malloc_r>
 80063a2:	b918      	cbnz	r0, 80063ac <__submore+0x22>
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80063b2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80063b6:	6360      	str	r0, [r4, #52]	; 0x34
 80063b8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80063bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80063c0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80063c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80063c8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80063cc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80063d0:	6020      	str	r0, [r4, #0]
 80063d2:	2000      	movs	r0, #0
 80063d4:	e7e8      	b.n	80063a8 <__submore+0x1e>
 80063d6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80063d8:	0077      	lsls	r7, r6, #1
 80063da:	463a      	mov	r2, r7
 80063dc:	f001 f87b 	bl	80074d6 <_realloc_r>
 80063e0:	4605      	mov	r5, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d0de      	beq.n	80063a4 <__submore+0x1a>
 80063e6:	eb00 0806 	add.w	r8, r0, r6
 80063ea:	4601      	mov	r1, r0
 80063ec:	4632      	mov	r2, r6
 80063ee:	4640      	mov	r0, r8
 80063f0:	f000 f842 	bl	8006478 <memcpy>
 80063f4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80063f8:	f8c4 8000 	str.w	r8, [r4]
 80063fc:	e7e9      	b.n	80063d2 <__submore+0x48>

080063fe <memmove>:
 80063fe:	4288      	cmp	r0, r1
 8006400:	b510      	push	{r4, lr}
 8006402:	eb01 0402 	add.w	r4, r1, r2
 8006406:	d902      	bls.n	800640e <memmove+0x10>
 8006408:	4284      	cmp	r4, r0
 800640a:	4623      	mov	r3, r4
 800640c:	d807      	bhi.n	800641e <memmove+0x20>
 800640e:	1e43      	subs	r3, r0, #1
 8006410:	42a1      	cmp	r1, r4
 8006412:	d008      	beq.n	8006426 <memmove+0x28>
 8006414:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006418:	f803 2f01 	strb.w	r2, [r3, #1]!
 800641c:	e7f8      	b.n	8006410 <memmove+0x12>
 800641e:	4402      	add	r2, r0
 8006420:	4601      	mov	r1, r0
 8006422:	428a      	cmp	r2, r1
 8006424:	d100      	bne.n	8006428 <memmove+0x2a>
 8006426:	bd10      	pop	{r4, pc}
 8006428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800642c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006430:	e7f7      	b.n	8006422 <memmove+0x24>

08006432 <strncmp>:
 8006432:	b510      	push	{r4, lr}
 8006434:	b16a      	cbz	r2, 8006452 <strncmp+0x20>
 8006436:	3901      	subs	r1, #1
 8006438:	1884      	adds	r4, r0, r2
 800643a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800643e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006442:	429a      	cmp	r2, r3
 8006444:	d103      	bne.n	800644e <strncmp+0x1c>
 8006446:	42a0      	cmp	r0, r4
 8006448:	d001      	beq.n	800644e <strncmp+0x1c>
 800644a:	2a00      	cmp	r2, #0
 800644c:	d1f5      	bne.n	800643a <strncmp+0x8>
 800644e:	1ad0      	subs	r0, r2, r3
 8006450:	bd10      	pop	{r4, pc}
 8006452:	4610      	mov	r0, r2
 8006454:	e7fc      	b.n	8006450 <strncmp+0x1e>
	...

08006458 <_sbrk_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d06      	ldr	r5, [pc, #24]	; (8006474 <_sbrk_r+0x1c>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f7fb f850 	bl	8001508 <_sbrk>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_sbrk_r+0x1a>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_sbrk_r+0x1a>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	2000040c 	.word	0x2000040c

08006478 <memcpy>:
 8006478:	440a      	add	r2, r1
 800647a:	4291      	cmp	r1, r2
 800647c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006480:	d100      	bne.n	8006484 <memcpy+0xc>
 8006482:	4770      	bx	lr
 8006484:	b510      	push	{r4, lr}
 8006486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800648e:	4291      	cmp	r1, r2
 8006490:	d1f9      	bne.n	8006486 <memcpy+0xe>
 8006492:	bd10      	pop	{r4, pc}
 8006494:	0000      	movs	r0, r0
	...

08006498 <nan>:
 8006498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80064a0 <nan+0x8>
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	00000000 	.word	0x00000000
 80064a4:	7ff80000 	.word	0x7ff80000

080064a8 <rshift>:
 80064a8:	6903      	ldr	r3, [r0, #16]
 80064aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80064ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80064b6:	f100 0414 	add.w	r4, r0, #20
 80064ba:	dd45      	ble.n	8006548 <rshift+0xa0>
 80064bc:	f011 011f 	ands.w	r1, r1, #31
 80064c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80064c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80064c8:	d10c      	bne.n	80064e4 <rshift+0x3c>
 80064ca:	f100 0710 	add.w	r7, r0, #16
 80064ce:	4629      	mov	r1, r5
 80064d0:	42b1      	cmp	r1, r6
 80064d2:	d334      	bcc.n	800653e <rshift+0x96>
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	1eea      	subs	r2, r5, #3
 80064da:	4296      	cmp	r6, r2
 80064dc:	bf38      	it	cc
 80064de:	2300      	movcc	r3, #0
 80064e0:	4423      	add	r3, r4
 80064e2:	e015      	b.n	8006510 <rshift+0x68>
 80064e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80064e8:	f1c1 0820 	rsb	r8, r1, #32
 80064ec:	40cf      	lsrs	r7, r1
 80064ee:	f105 0e04 	add.w	lr, r5, #4
 80064f2:	46a1      	mov	r9, r4
 80064f4:	4576      	cmp	r6, lr
 80064f6:	46f4      	mov	ip, lr
 80064f8:	d815      	bhi.n	8006526 <rshift+0x7e>
 80064fa:	1a9a      	subs	r2, r3, r2
 80064fc:	0092      	lsls	r2, r2, #2
 80064fe:	3a04      	subs	r2, #4
 8006500:	3501      	adds	r5, #1
 8006502:	42ae      	cmp	r6, r5
 8006504:	bf38      	it	cc
 8006506:	2200      	movcc	r2, #0
 8006508:	18a3      	adds	r3, r4, r2
 800650a:	50a7      	str	r7, [r4, r2]
 800650c:	b107      	cbz	r7, 8006510 <rshift+0x68>
 800650e:	3304      	adds	r3, #4
 8006510:	1b1a      	subs	r2, r3, r4
 8006512:	42a3      	cmp	r3, r4
 8006514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006518:	bf08      	it	eq
 800651a:	2300      	moveq	r3, #0
 800651c:	6102      	str	r2, [r0, #16]
 800651e:	bf08      	it	eq
 8006520:	6143      	streq	r3, [r0, #20]
 8006522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006526:	f8dc c000 	ldr.w	ip, [ip]
 800652a:	fa0c fc08 	lsl.w	ip, ip, r8
 800652e:	ea4c 0707 	orr.w	r7, ip, r7
 8006532:	f849 7b04 	str.w	r7, [r9], #4
 8006536:	f85e 7b04 	ldr.w	r7, [lr], #4
 800653a:	40cf      	lsrs	r7, r1
 800653c:	e7da      	b.n	80064f4 <rshift+0x4c>
 800653e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006542:	f847 cf04 	str.w	ip, [r7, #4]!
 8006546:	e7c3      	b.n	80064d0 <rshift+0x28>
 8006548:	4623      	mov	r3, r4
 800654a:	e7e1      	b.n	8006510 <rshift+0x68>

0800654c <__hexdig_fun>:
 800654c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006550:	2b09      	cmp	r3, #9
 8006552:	d802      	bhi.n	800655a <__hexdig_fun+0xe>
 8006554:	3820      	subs	r0, #32
 8006556:	b2c0      	uxtb	r0, r0
 8006558:	4770      	bx	lr
 800655a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800655e:	2b05      	cmp	r3, #5
 8006560:	d801      	bhi.n	8006566 <__hexdig_fun+0x1a>
 8006562:	3847      	subs	r0, #71	; 0x47
 8006564:	e7f7      	b.n	8006556 <__hexdig_fun+0xa>
 8006566:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800656a:	2b05      	cmp	r3, #5
 800656c:	d801      	bhi.n	8006572 <__hexdig_fun+0x26>
 800656e:	3827      	subs	r0, #39	; 0x27
 8006570:	e7f1      	b.n	8006556 <__hexdig_fun+0xa>
 8006572:	2000      	movs	r0, #0
 8006574:	4770      	bx	lr
	...

08006578 <__gethex>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	4617      	mov	r7, r2
 800657e:	680a      	ldr	r2, [r1, #0]
 8006580:	b085      	sub	sp, #20
 8006582:	f102 0b02 	add.w	fp, r2, #2
 8006586:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800658a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800658e:	4681      	mov	r9, r0
 8006590:	468a      	mov	sl, r1
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	32fe      	adds	r2, #254	; 0xfe
 8006596:	eb02 030b 	add.w	r3, r2, fp
 800659a:	46d8      	mov	r8, fp
 800659c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	2830      	cmp	r0, #48	; 0x30
 80065a4:	d0f7      	beq.n	8006596 <__gethex+0x1e>
 80065a6:	f7ff ffd1 	bl	800654c <__hexdig_fun>
 80065aa:	4604      	mov	r4, r0
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d138      	bne.n	8006622 <__gethex+0xaa>
 80065b0:	49a7      	ldr	r1, [pc, #668]	; (8006850 <__gethex+0x2d8>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	4640      	mov	r0, r8
 80065b6:	f7ff ff3c 	bl	8006432 <strncmp>
 80065ba:	4606      	mov	r6, r0
 80065bc:	2800      	cmp	r0, #0
 80065be:	d169      	bne.n	8006694 <__gethex+0x11c>
 80065c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80065c4:	465d      	mov	r5, fp
 80065c6:	f7ff ffc1 	bl	800654c <__hexdig_fun>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d064      	beq.n	8006698 <__gethex+0x120>
 80065ce:	465a      	mov	r2, fp
 80065d0:	7810      	ldrb	r0, [r2, #0]
 80065d2:	2830      	cmp	r0, #48	; 0x30
 80065d4:	4690      	mov	r8, r2
 80065d6:	f102 0201 	add.w	r2, r2, #1
 80065da:	d0f9      	beq.n	80065d0 <__gethex+0x58>
 80065dc:	f7ff ffb6 	bl	800654c <__hexdig_fun>
 80065e0:	2301      	movs	r3, #1
 80065e2:	fab0 f480 	clz	r4, r0
 80065e6:	0964      	lsrs	r4, r4, #5
 80065e8:	465e      	mov	r6, fp
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	4642      	mov	r2, r8
 80065ee:	4615      	mov	r5, r2
 80065f0:	3201      	adds	r2, #1
 80065f2:	7828      	ldrb	r0, [r5, #0]
 80065f4:	f7ff ffaa 	bl	800654c <__hexdig_fun>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d1f8      	bne.n	80065ee <__gethex+0x76>
 80065fc:	4994      	ldr	r1, [pc, #592]	; (8006850 <__gethex+0x2d8>)
 80065fe:	2201      	movs	r2, #1
 8006600:	4628      	mov	r0, r5
 8006602:	f7ff ff16 	bl	8006432 <strncmp>
 8006606:	b978      	cbnz	r0, 8006628 <__gethex+0xb0>
 8006608:	b946      	cbnz	r6, 800661c <__gethex+0xa4>
 800660a:	1c6e      	adds	r6, r5, #1
 800660c:	4632      	mov	r2, r6
 800660e:	4615      	mov	r5, r2
 8006610:	3201      	adds	r2, #1
 8006612:	7828      	ldrb	r0, [r5, #0]
 8006614:	f7ff ff9a 	bl	800654c <__hexdig_fun>
 8006618:	2800      	cmp	r0, #0
 800661a:	d1f8      	bne.n	800660e <__gethex+0x96>
 800661c:	1b73      	subs	r3, r6, r5
 800661e:	009e      	lsls	r6, r3, #2
 8006620:	e004      	b.n	800662c <__gethex+0xb4>
 8006622:	2400      	movs	r4, #0
 8006624:	4626      	mov	r6, r4
 8006626:	e7e1      	b.n	80065ec <__gethex+0x74>
 8006628:	2e00      	cmp	r6, #0
 800662a:	d1f7      	bne.n	800661c <__gethex+0xa4>
 800662c:	782b      	ldrb	r3, [r5, #0]
 800662e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006632:	2b50      	cmp	r3, #80	; 0x50
 8006634:	d13d      	bne.n	80066b2 <__gethex+0x13a>
 8006636:	786b      	ldrb	r3, [r5, #1]
 8006638:	2b2b      	cmp	r3, #43	; 0x2b
 800663a:	d02f      	beq.n	800669c <__gethex+0x124>
 800663c:	2b2d      	cmp	r3, #45	; 0x2d
 800663e:	d031      	beq.n	80066a4 <__gethex+0x12c>
 8006640:	1c69      	adds	r1, r5, #1
 8006642:	f04f 0b00 	mov.w	fp, #0
 8006646:	7808      	ldrb	r0, [r1, #0]
 8006648:	f7ff ff80 	bl	800654c <__hexdig_fun>
 800664c:	1e42      	subs	r2, r0, #1
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	2a18      	cmp	r2, #24
 8006652:	d82e      	bhi.n	80066b2 <__gethex+0x13a>
 8006654:	f1a0 0210 	sub.w	r2, r0, #16
 8006658:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800665c:	f7ff ff76 	bl	800654c <__hexdig_fun>
 8006660:	f100 3cff 	add.w	ip, r0, #4294967295
 8006664:	fa5f fc8c 	uxtb.w	ip, ip
 8006668:	f1bc 0f18 	cmp.w	ip, #24
 800666c:	d91d      	bls.n	80066aa <__gethex+0x132>
 800666e:	f1bb 0f00 	cmp.w	fp, #0
 8006672:	d000      	beq.n	8006676 <__gethex+0xfe>
 8006674:	4252      	negs	r2, r2
 8006676:	4416      	add	r6, r2
 8006678:	f8ca 1000 	str.w	r1, [sl]
 800667c:	b1dc      	cbz	r4, 80066b6 <__gethex+0x13e>
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf14      	ite	ne
 8006684:	f04f 0800 	movne.w	r8, #0
 8006688:	f04f 0806 	moveq.w	r8, #6
 800668c:	4640      	mov	r0, r8
 800668e:	b005      	add	sp, #20
 8006690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	4645      	mov	r5, r8
 8006696:	4626      	mov	r6, r4
 8006698:	2401      	movs	r4, #1
 800669a:	e7c7      	b.n	800662c <__gethex+0xb4>
 800669c:	f04f 0b00 	mov.w	fp, #0
 80066a0:	1ca9      	adds	r1, r5, #2
 80066a2:	e7d0      	b.n	8006646 <__gethex+0xce>
 80066a4:	f04f 0b01 	mov.w	fp, #1
 80066a8:	e7fa      	b.n	80066a0 <__gethex+0x128>
 80066aa:	230a      	movs	r3, #10
 80066ac:	fb03 0002 	mla	r0, r3, r2, r0
 80066b0:	e7d0      	b.n	8006654 <__gethex+0xdc>
 80066b2:	4629      	mov	r1, r5
 80066b4:	e7e0      	b.n	8006678 <__gethex+0x100>
 80066b6:	eba5 0308 	sub.w	r3, r5, r8
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4621      	mov	r1, r4
 80066be:	2b07      	cmp	r3, #7
 80066c0:	dc0a      	bgt.n	80066d8 <__gethex+0x160>
 80066c2:	4648      	mov	r0, r9
 80066c4:	f000 fa5a 	bl	8006b7c <_Balloc>
 80066c8:	4604      	mov	r4, r0
 80066ca:	b940      	cbnz	r0, 80066de <__gethex+0x166>
 80066cc:	4b61      	ldr	r3, [pc, #388]	; (8006854 <__gethex+0x2dc>)
 80066ce:	4602      	mov	r2, r0
 80066d0:	21e4      	movs	r1, #228	; 0xe4
 80066d2:	4861      	ldr	r0, [pc, #388]	; (8006858 <__gethex+0x2e0>)
 80066d4:	f000 ffb0 	bl	8007638 <__assert_func>
 80066d8:	3101      	adds	r1, #1
 80066da:	105b      	asrs	r3, r3, #1
 80066dc:	e7ef      	b.n	80066be <__gethex+0x146>
 80066de:	f100 0a14 	add.w	sl, r0, #20
 80066e2:	2300      	movs	r3, #0
 80066e4:	495a      	ldr	r1, [pc, #360]	; (8006850 <__gethex+0x2d8>)
 80066e6:	f8cd a004 	str.w	sl, [sp, #4]
 80066ea:	469b      	mov	fp, r3
 80066ec:	45a8      	cmp	r8, r5
 80066ee:	d342      	bcc.n	8006776 <__gethex+0x1fe>
 80066f0:	9801      	ldr	r0, [sp, #4]
 80066f2:	f840 bb04 	str.w	fp, [r0], #4
 80066f6:	eba0 000a 	sub.w	r0, r0, sl
 80066fa:	1080      	asrs	r0, r0, #2
 80066fc:	6120      	str	r0, [r4, #16]
 80066fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8006702:	4658      	mov	r0, fp
 8006704:	f000 fb2c 	bl	8006d60 <__hi0bits>
 8006708:	683d      	ldr	r5, [r7, #0]
 800670a:	eba8 0000 	sub.w	r0, r8, r0
 800670e:	42a8      	cmp	r0, r5
 8006710:	dd59      	ble.n	80067c6 <__gethex+0x24e>
 8006712:	eba0 0805 	sub.w	r8, r0, r5
 8006716:	4641      	mov	r1, r8
 8006718:	4620      	mov	r0, r4
 800671a:	f000 febb 	bl	8007494 <__any_on>
 800671e:	4683      	mov	fp, r0
 8006720:	b1b8      	cbz	r0, 8006752 <__gethex+0x1da>
 8006722:	f108 33ff 	add.w	r3, r8, #4294967295
 8006726:	1159      	asrs	r1, r3, #5
 8006728:	f003 021f 	and.w	r2, r3, #31
 800672c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006730:	f04f 0b01 	mov.w	fp, #1
 8006734:	fa0b f202 	lsl.w	r2, fp, r2
 8006738:	420a      	tst	r2, r1
 800673a:	d00a      	beq.n	8006752 <__gethex+0x1da>
 800673c:	455b      	cmp	r3, fp
 800673e:	dd06      	ble.n	800674e <__gethex+0x1d6>
 8006740:	f1a8 0102 	sub.w	r1, r8, #2
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fea5 	bl	8007494 <__any_on>
 800674a:	2800      	cmp	r0, #0
 800674c:	d138      	bne.n	80067c0 <__gethex+0x248>
 800674e:	f04f 0b02 	mov.w	fp, #2
 8006752:	4641      	mov	r1, r8
 8006754:	4620      	mov	r0, r4
 8006756:	f7ff fea7 	bl	80064a8 <rshift>
 800675a:	4446      	add	r6, r8
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	42b3      	cmp	r3, r6
 8006760:	da41      	bge.n	80067e6 <__gethex+0x26e>
 8006762:	4621      	mov	r1, r4
 8006764:	4648      	mov	r0, r9
 8006766:	f000 fa49 	bl	8006bfc <_Bfree>
 800676a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800676c:	2300      	movs	r3, #0
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006774:	e78a      	b.n	800668c <__gethex+0x114>
 8006776:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800677a:	2a2e      	cmp	r2, #46	; 0x2e
 800677c:	d014      	beq.n	80067a8 <__gethex+0x230>
 800677e:	2b20      	cmp	r3, #32
 8006780:	d106      	bne.n	8006790 <__gethex+0x218>
 8006782:	9b01      	ldr	r3, [sp, #4]
 8006784:	f843 bb04 	str.w	fp, [r3], #4
 8006788:	f04f 0b00 	mov.w	fp, #0
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	465b      	mov	r3, fp
 8006790:	7828      	ldrb	r0, [r5, #0]
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	f7ff feda 	bl	800654c <__hexdig_fun>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	f000 000f 	and.w	r0, r0, #15
 800679e:	4098      	lsls	r0, r3
 80067a0:	ea4b 0b00 	orr.w	fp, fp, r0
 80067a4:	3304      	adds	r3, #4
 80067a6:	e7a1      	b.n	80066ec <__gethex+0x174>
 80067a8:	45a8      	cmp	r8, r5
 80067aa:	d8e8      	bhi.n	800677e <__gethex+0x206>
 80067ac:	2201      	movs	r2, #1
 80067ae:	4628      	mov	r0, r5
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	f7ff fe3e 	bl	8006432 <strncmp>
 80067b6:	4926      	ldr	r1, [pc, #152]	; (8006850 <__gethex+0x2d8>)
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d1df      	bne.n	800677e <__gethex+0x206>
 80067be:	e795      	b.n	80066ec <__gethex+0x174>
 80067c0:	f04f 0b03 	mov.w	fp, #3
 80067c4:	e7c5      	b.n	8006752 <__gethex+0x1da>
 80067c6:	da0b      	bge.n	80067e0 <__gethex+0x268>
 80067c8:	eba5 0800 	sub.w	r8, r5, r0
 80067cc:	4621      	mov	r1, r4
 80067ce:	4642      	mov	r2, r8
 80067d0:	4648      	mov	r0, r9
 80067d2:	f000 fc2d 	bl	8007030 <__lshift>
 80067d6:	eba6 0608 	sub.w	r6, r6, r8
 80067da:	4604      	mov	r4, r0
 80067dc:	f100 0a14 	add.w	sl, r0, #20
 80067e0:	f04f 0b00 	mov.w	fp, #0
 80067e4:	e7ba      	b.n	800675c <__gethex+0x1e4>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	42b3      	cmp	r3, r6
 80067ea:	dd73      	ble.n	80068d4 <__gethex+0x35c>
 80067ec:	1b9e      	subs	r6, r3, r6
 80067ee:	42b5      	cmp	r5, r6
 80067f0:	dc34      	bgt.n	800685c <__gethex+0x2e4>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d023      	beq.n	8006840 <__gethex+0x2c8>
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d025      	beq.n	8006848 <__gethex+0x2d0>
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d115      	bne.n	800682c <__gethex+0x2b4>
 8006800:	42b5      	cmp	r5, r6
 8006802:	d113      	bne.n	800682c <__gethex+0x2b4>
 8006804:	2d01      	cmp	r5, #1
 8006806:	d10b      	bne.n	8006820 <__gethex+0x2a8>
 8006808:	9a02      	ldr	r2, [sp, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	2301      	movs	r3, #1
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	f8ca 3000 	str.w	r3, [sl]
 8006816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006818:	f04f 0862 	mov.w	r8, #98	; 0x62
 800681c:	601c      	str	r4, [r3, #0]
 800681e:	e735      	b.n	800668c <__gethex+0x114>
 8006820:	1e69      	subs	r1, r5, #1
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fe36 	bl	8007494 <__any_on>
 8006828:	2800      	cmp	r0, #0
 800682a:	d1ed      	bne.n	8006808 <__gethex+0x290>
 800682c:	4621      	mov	r1, r4
 800682e:	4648      	mov	r0, r9
 8006830:	f000 f9e4 	bl	8006bfc <_Bfree>
 8006834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006836:	2300      	movs	r3, #0
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800683e:	e725      	b.n	800668c <__gethex+0x114>
 8006840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f2      	bne.n	800682c <__gethex+0x2b4>
 8006846:	e7df      	b.n	8006808 <__gethex+0x290>
 8006848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1dc      	bne.n	8006808 <__gethex+0x290>
 800684e:	e7ed      	b.n	800682c <__gethex+0x2b4>
 8006850:	08007c8d 	.word	0x08007c8d
 8006854:	08007e47 	.word	0x08007e47
 8006858:	08007e58 	.word	0x08007e58
 800685c:	f106 38ff 	add.w	r8, r6, #4294967295
 8006860:	f1bb 0f00 	cmp.w	fp, #0
 8006864:	d133      	bne.n	80068ce <__gethex+0x356>
 8006866:	f1b8 0f00 	cmp.w	r8, #0
 800686a:	d004      	beq.n	8006876 <__gethex+0x2fe>
 800686c:	4641      	mov	r1, r8
 800686e:	4620      	mov	r0, r4
 8006870:	f000 fe10 	bl	8007494 <__any_on>
 8006874:	4683      	mov	fp, r0
 8006876:	ea4f 1268 	mov.w	r2, r8, asr #5
 800687a:	2301      	movs	r3, #1
 800687c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006880:	f008 081f 	and.w	r8, r8, #31
 8006884:	fa03 f308 	lsl.w	r3, r3, r8
 8006888:	4213      	tst	r3, r2
 800688a:	4631      	mov	r1, r6
 800688c:	4620      	mov	r0, r4
 800688e:	bf18      	it	ne
 8006890:	f04b 0b02 	orrne.w	fp, fp, #2
 8006894:	1bad      	subs	r5, r5, r6
 8006896:	f7ff fe07 	bl	80064a8 <rshift>
 800689a:	687e      	ldr	r6, [r7, #4]
 800689c:	f04f 0802 	mov.w	r8, #2
 80068a0:	f1bb 0f00 	cmp.w	fp, #0
 80068a4:	d04a      	beq.n	800693c <__gethex+0x3c4>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d016      	beq.n	80068da <__gethex+0x362>
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d018      	beq.n	80068e2 <__gethex+0x36a>
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d109      	bne.n	80068c8 <__gethex+0x350>
 80068b4:	f01b 0f02 	tst.w	fp, #2
 80068b8:	d006      	beq.n	80068c8 <__gethex+0x350>
 80068ba:	f8da 3000 	ldr.w	r3, [sl]
 80068be:	ea4b 0b03 	orr.w	fp, fp, r3
 80068c2:	f01b 0f01 	tst.w	fp, #1
 80068c6:	d10f      	bne.n	80068e8 <__gethex+0x370>
 80068c8:	f048 0810 	orr.w	r8, r8, #16
 80068cc:	e036      	b.n	800693c <__gethex+0x3c4>
 80068ce:	f04f 0b01 	mov.w	fp, #1
 80068d2:	e7d0      	b.n	8006876 <__gethex+0x2fe>
 80068d4:	f04f 0801 	mov.w	r8, #1
 80068d8:	e7e2      	b.n	80068a0 <__gethex+0x328>
 80068da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068dc:	f1c3 0301 	rsb	r3, r3, #1
 80068e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0ef      	beq.n	80068c8 <__gethex+0x350>
 80068e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80068ec:	f104 0214 	add.w	r2, r4, #20
 80068f0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80068fa:	2300      	movs	r3, #0
 80068fc:	4694      	mov	ip, r2
 80068fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8006902:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006906:	d01e      	beq.n	8006946 <__gethex+0x3ce>
 8006908:	3101      	adds	r1, #1
 800690a:	f8cc 1000 	str.w	r1, [ip]
 800690e:	f1b8 0f02 	cmp.w	r8, #2
 8006912:	f104 0214 	add.w	r2, r4, #20
 8006916:	d13d      	bne.n	8006994 <__gethex+0x41c>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	3b01      	subs	r3, #1
 800691c:	42ab      	cmp	r3, r5
 800691e:	d10b      	bne.n	8006938 <__gethex+0x3c0>
 8006920:	1169      	asrs	r1, r5, #5
 8006922:	2301      	movs	r3, #1
 8006924:	f005 051f 	and.w	r5, r5, #31
 8006928:	fa03 f505 	lsl.w	r5, r3, r5
 800692c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006930:	421d      	tst	r5, r3
 8006932:	bf18      	it	ne
 8006934:	f04f 0801 	movne.w	r8, #1
 8006938:	f048 0820 	orr.w	r8, r8, #32
 800693c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800693e:	601c      	str	r4, [r3, #0]
 8006940:	9b02      	ldr	r3, [sp, #8]
 8006942:	601e      	str	r6, [r3, #0]
 8006944:	e6a2      	b.n	800668c <__gethex+0x114>
 8006946:	4290      	cmp	r0, r2
 8006948:	f842 3c04 	str.w	r3, [r2, #-4]
 800694c:	d8d6      	bhi.n	80068fc <__gethex+0x384>
 800694e:	68a2      	ldr	r2, [r4, #8]
 8006950:	4593      	cmp	fp, r2
 8006952:	db17      	blt.n	8006984 <__gethex+0x40c>
 8006954:	6861      	ldr	r1, [r4, #4]
 8006956:	4648      	mov	r0, r9
 8006958:	3101      	adds	r1, #1
 800695a:	f000 f90f 	bl	8006b7c <_Balloc>
 800695e:	4682      	mov	sl, r0
 8006960:	b918      	cbnz	r0, 800696a <__gethex+0x3f2>
 8006962:	4b1b      	ldr	r3, [pc, #108]	; (80069d0 <__gethex+0x458>)
 8006964:	4602      	mov	r2, r0
 8006966:	2184      	movs	r1, #132	; 0x84
 8006968:	e6b3      	b.n	80066d2 <__gethex+0x15a>
 800696a:	6922      	ldr	r2, [r4, #16]
 800696c:	3202      	adds	r2, #2
 800696e:	f104 010c 	add.w	r1, r4, #12
 8006972:	0092      	lsls	r2, r2, #2
 8006974:	300c      	adds	r0, #12
 8006976:	f7ff fd7f 	bl	8006478 <memcpy>
 800697a:	4621      	mov	r1, r4
 800697c:	4648      	mov	r0, r9
 800697e:	f000 f93d 	bl	8006bfc <_Bfree>
 8006982:	4654      	mov	r4, sl
 8006984:	6922      	ldr	r2, [r4, #16]
 8006986:	1c51      	adds	r1, r2, #1
 8006988:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800698c:	6121      	str	r1, [r4, #16]
 800698e:	2101      	movs	r1, #1
 8006990:	6151      	str	r1, [r2, #20]
 8006992:	e7bc      	b.n	800690e <__gethex+0x396>
 8006994:	6921      	ldr	r1, [r4, #16]
 8006996:	4559      	cmp	r1, fp
 8006998:	dd0b      	ble.n	80069b2 <__gethex+0x43a>
 800699a:	2101      	movs	r1, #1
 800699c:	4620      	mov	r0, r4
 800699e:	f7ff fd83 	bl	80064a8 <rshift>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	3601      	adds	r6, #1
 80069a6:	42b3      	cmp	r3, r6
 80069a8:	f6ff aedb 	blt.w	8006762 <__gethex+0x1ea>
 80069ac:	f04f 0801 	mov.w	r8, #1
 80069b0:	e7c2      	b.n	8006938 <__gethex+0x3c0>
 80069b2:	f015 051f 	ands.w	r5, r5, #31
 80069b6:	d0f9      	beq.n	80069ac <__gethex+0x434>
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	441a      	add	r2, r3
 80069bc:	f1c5 0520 	rsb	r5, r5, #32
 80069c0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80069c4:	f000 f9cc 	bl	8006d60 <__hi0bits>
 80069c8:	42a8      	cmp	r0, r5
 80069ca:	dbe6      	blt.n	800699a <__gethex+0x422>
 80069cc:	e7ee      	b.n	80069ac <__gethex+0x434>
 80069ce:	bf00      	nop
 80069d0:	08007e47 	.word	0x08007e47

080069d4 <L_shift>:
 80069d4:	f1c2 0208 	rsb	r2, r2, #8
 80069d8:	0092      	lsls	r2, r2, #2
 80069da:	b570      	push	{r4, r5, r6, lr}
 80069dc:	f1c2 0620 	rsb	r6, r2, #32
 80069e0:	6843      	ldr	r3, [r0, #4]
 80069e2:	6804      	ldr	r4, [r0, #0]
 80069e4:	fa03 f506 	lsl.w	r5, r3, r6
 80069e8:	432c      	orrs	r4, r5
 80069ea:	40d3      	lsrs	r3, r2
 80069ec:	6004      	str	r4, [r0, #0]
 80069ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80069f2:	4288      	cmp	r0, r1
 80069f4:	d3f4      	bcc.n	80069e0 <L_shift+0xc>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}

080069f8 <__match>:
 80069f8:	b530      	push	{r4, r5, lr}
 80069fa:	6803      	ldr	r3, [r0, #0]
 80069fc:	3301      	adds	r3, #1
 80069fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a02:	b914      	cbnz	r4, 8006a0a <__match+0x12>
 8006a04:	6003      	str	r3, [r0, #0]
 8006a06:	2001      	movs	r0, #1
 8006a08:	bd30      	pop	{r4, r5, pc}
 8006a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006a12:	2d19      	cmp	r5, #25
 8006a14:	bf98      	it	ls
 8006a16:	3220      	addls	r2, #32
 8006a18:	42a2      	cmp	r2, r4
 8006a1a:	d0f0      	beq.n	80069fe <__match+0x6>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	e7f3      	b.n	8006a08 <__match+0x10>

08006a20 <__hexnan>:
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	680b      	ldr	r3, [r1, #0]
 8006a26:	6801      	ldr	r1, [r0, #0]
 8006a28:	115e      	asrs	r6, r3, #5
 8006a2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006a2e:	f013 031f 	ands.w	r3, r3, #31
 8006a32:	b087      	sub	sp, #28
 8006a34:	bf18      	it	ne
 8006a36:	3604      	addne	r6, #4
 8006a38:	2500      	movs	r5, #0
 8006a3a:	1f37      	subs	r7, r6, #4
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	4690      	mov	r8, r2
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	f846 5c04 	str.w	r5, [r6, #-4]
 8006a46:	46b9      	mov	r9, r7
 8006a48:	463c      	mov	r4, r7
 8006a4a:	9502      	str	r5, [sp, #8]
 8006a4c:	46ab      	mov	fp, r5
 8006a4e:	784a      	ldrb	r2, [r1, #1]
 8006a50:	1c4b      	adds	r3, r1, #1
 8006a52:	9303      	str	r3, [sp, #12]
 8006a54:	b342      	cbz	r2, 8006aa8 <__hexnan+0x88>
 8006a56:	4610      	mov	r0, r2
 8006a58:	9105      	str	r1, [sp, #20]
 8006a5a:	9204      	str	r2, [sp, #16]
 8006a5c:	f7ff fd76 	bl	800654c <__hexdig_fun>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d14f      	bne.n	8006b04 <__hexnan+0xe4>
 8006a64:	9a04      	ldr	r2, [sp, #16]
 8006a66:	9905      	ldr	r1, [sp, #20]
 8006a68:	2a20      	cmp	r2, #32
 8006a6a:	d818      	bhi.n	8006a9e <__hexnan+0x7e>
 8006a6c:	9b02      	ldr	r3, [sp, #8]
 8006a6e:	459b      	cmp	fp, r3
 8006a70:	dd13      	ble.n	8006a9a <__hexnan+0x7a>
 8006a72:	454c      	cmp	r4, r9
 8006a74:	d206      	bcs.n	8006a84 <__hexnan+0x64>
 8006a76:	2d07      	cmp	r5, #7
 8006a78:	dc04      	bgt.n	8006a84 <__hexnan+0x64>
 8006a7a:	462a      	mov	r2, r5
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff ffa8 	bl	80069d4 <L_shift>
 8006a84:	4544      	cmp	r4, r8
 8006a86:	d950      	bls.n	8006b2a <__hexnan+0x10a>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f1a4 0904 	sub.w	r9, r4, #4
 8006a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a92:	f8cd b008 	str.w	fp, [sp, #8]
 8006a96:	464c      	mov	r4, r9
 8006a98:	461d      	mov	r5, r3
 8006a9a:	9903      	ldr	r1, [sp, #12]
 8006a9c:	e7d7      	b.n	8006a4e <__hexnan+0x2e>
 8006a9e:	2a29      	cmp	r2, #41	; 0x29
 8006aa0:	d155      	bne.n	8006b4e <__hexnan+0x12e>
 8006aa2:	3102      	adds	r1, #2
 8006aa4:	f8ca 1000 	str.w	r1, [sl]
 8006aa8:	f1bb 0f00 	cmp.w	fp, #0
 8006aac:	d04f      	beq.n	8006b4e <__hexnan+0x12e>
 8006aae:	454c      	cmp	r4, r9
 8006ab0:	d206      	bcs.n	8006ac0 <__hexnan+0xa0>
 8006ab2:	2d07      	cmp	r5, #7
 8006ab4:	dc04      	bgt.n	8006ac0 <__hexnan+0xa0>
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	4649      	mov	r1, r9
 8006aba:	4620      	mov	r0, r4
 8006abc:	f7ff ff8a 	bl	80069d4 <L_shift>
 8006ac0:	4544      	cmp	r4, r8
 8006ac2:	d934      	bls.n	8006b2e <__hexnan+0x10e>
 8006ac4:	f1a8 0204 	sub.w	r2, r8, #4
 8006ac8:	4623      	mov	r3, r4
 8006aca:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ace:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ad2:	429f      	cmp	r7, r3
 8006ad4:	d2f9      	bcs.n	8006aca <__hexnan+0xaa>
 8006ad6:	1b3b      	subs	r3, r7, r4
 8006ad8:	f023 0303 	bic.w	r3, r3, #3
 8006adc:	3304      	adds	r3, #4
 8006ade:	3e03      	subs	r6, #3
 8006ae0:	3401      	adds	r4, #1
 8006ae2:	42a6      	cmp	r6, r4
 8006ae4:	bf38      	it	cc
 8006ae6:	2304      	movcc	r3, #4
 8006ae8:	4443      	add	r3, r8
 8006aea:	2200      	movs	r2, #0
 8006aec:	f843 2b04 	str.w	r2, [r3], #4
 8006af0:	429f      	cmp	r7, r3
 8006af2:	d2fb      	bcs.n	8006aec <__hexnan+0xcc>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	b91b      	cbnz	r3, 8006b00 <__hexnan+0xe0>
 8006af8:	4547      	cmp	r7, r8
 8006afa:	d126      	bne.n	8006b4a <__hexnan+0x12a>
 8006afc:	2301      	movs	r3, #1
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	2005      	movs	r0, #5
 8006b02:	e025      	b.n	8006b50 <__hexnan+0x130>
 8006b04:	3501      	adds	r5, #1
 8006b06:	2d08      	cmp	r5, #8
 8006b08:	f10b 0b01 	add.w	fp, fp, #1
 8006b0c:	dd06      	ble.n	8006b1c <__hexnan+0xfc>
 8006b0e:	4544      	cmp	r4, r8
 8006b10:	d9c3      	bls.n	8006a9a <__hexnan+0x7a>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b18:	2501      	movs	r5, #1
 8006b1a:	3c04      	subs	r4, #4
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	f000 000f 	and.w	r0, r0, #15
 8006b22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006b26:	6020      	str	r0, [r4, #0]
 8006b28:	e7b7      	b.n	8006a9a <__hexnan+0x7a>
 8006b2a:	2508      	movs	r5, #8
 8006b2c:	e7b5      	b.n	8006a9a <__hexnan+0x7a>
 8006b2e:	9b01      	ldr	r3, [sp, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0df      	beq.n	8006af4 <__hexnan+0xd4>
 8006b34:	f1c3 0320 	rsb	r3, r3, #32
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	40da      	lsrs	r2, r3
 8006b3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006b42:	4013      	ands	r3, r2
 8006b44:	f846 3c04 	str.w	r3, [r6, #-4]
 8006b48:	e7d4      	b.n	8006af4 <__hexnan+0xd4>
 8006b4a:	3f04      	subs	r7, #4
 8006b4c:	e7d2      	b.n	8006af4 <__hexnan+0xd4>
 8006b4e:	2004      	movs	r0, #4
 8006b50:	b007      	add	sp, #28
 8006b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b56 <__ascii_mbtowc>:
 8006b56:	b082      	sub	sp, #8
 8006b58:	b901      	cbnz	r1, 8006b5c <__ascii_mbtowc+0x6>
 8006b5a:	a901      	add	r1, sp, #4
 8006b5c:	b142      	cbz	r2, 8006b70 <__ascii_mbtowc+0x1a>
 8006b5e:	b14b      	cbz	r3, 8006b74 <__ascii_mbtowc+0x1e>
 8006b60:	7813      	ldrb	r3, [r2, #0]
 8006b62:	600b      	str	r3, [r1, #0]
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	1e10      	subs	r0, r2, #0
 8006b68:	bf18      	it	ne
 8006b6a:	2001      	movne	r0, #1
 8006b6c:	b002      	add	sp, #8
 8006b6e:	4770      	bx	lr
 8006b70:	4610      	mov	r0, r2
 8006b72:	e7fb      	b.n	8006b6c <__ascii_mbtowc+0x16>
 8006b74:	f06f 0001 	mvn.w	r0, #1
 8006b78:	e7f8      	b.n	8006b6c <__ascii_mbtowc+0x16>
	...

08006b7c <_Balloc>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	69c6      	ldr	r6, [r0, #28]
 8006b80:	4604      	mov	r4, r0
 8006b82:	460d      	mov	r5, r1
 8006b84:	b976      	cbnz	r6, 8006ba4 <_Balloc+0x28>
 8006b86:	2010      	movs	r0, #16
 8006b88:	f000 fd8a 	bl	80076a0 <malloc>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	61e0      	str	r0, [r4, #28]
 8006b90:	b920      	cbnz	r0, 8006b9c <_Balloc+0x20>
 8006b92:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <_Balloc+0x78>)
 8006b94:	4818      	ldr	r0, [pc, #96]	; (8006bf8 <_Balloc+0x7c>)
 8006b96:	216b      	movs	r1, #107	; 0x6b
 8006b98:	f000 fd4e 	bl	8007638 <__assert_func>
 8006b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ba0:	6006      	str	r6, [r0, #0]
 8006ba2:	60c6      	str	r6, [r0, #12]
 8006ba4:	69e6      	ldr	r6, [r4, #28]
 8006ba6:	68f3      	ldr	r3, [r6, #12]
 8006ba8:	b183      	cbz	r3, 8006bcc <_Balloc+0x50>
 8006baa:	69e3      	ldr	r3, [r4, #28]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bb2:	b9b8      	cbnz	r0, 8006be4 <_Balloc+0x68>
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	fa01 f605 	lsl.w	r6, r1, r5
 8006bba:	1d72      	adds	r2, r6, #5
 8006bbc:	0092      	lsls	r2, r2, #2
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fd58 	bl	8007674 <_calloc_r>
 8006bc4:	b160      	cbz	r0, 8006be0 <_Balloc+0x64>
 8006bc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bca:	e00e      	b.n	8006bea <_Balloc+0x6e>
 8006bcc:	2221      	movs	r2, #33	; 0x21
 8006bce:	2104      	movs	r1, #4
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fd4f 	bl	8007674 <_calloc_r>
 8006bd6:	69e3      	ldr	r3, [r4, #28]
 8006bd8:	60f0      	str	r0, [r6, #12]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e4      	bne.n	8006baa <_Balloc+0x2e>
 8006be0:	2000      	movs	r0, #0
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	6802      	ldr	r2, [r0, #0]
 8006be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bea:	2300      	movs	r3, #0
 8006bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bf0:	e7f7      	b.n	8006be2 <_Balloc+0x66>
 8006bf2:	bf00      	nop
 8006bf4:	08007eb8 	.word	0x08007eb8
 8006bf8:	08007ecf 	.word	0x08007ecf

08006bfc <_Bfree>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	69c6      	ldr	r6, [r0, #28]
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	b976      	cbnz	r6, 8006c24 <_Bfree+0x28>
 8006c06:	2010      	movs	r0, #16
 8006c08:	f000 fd4a 	bl	80076a0 <malloc>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	61e8      	str	r0, [r5, #28]
 8006c10:	b920      	cbnz	r0, 8006c1c <_Bfree+0x20>
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <_Bfree+0x3c>)
 8006c14:	4809      	ldr	r0, [pc, #36]	; (8006c3c <_Bfree+0x40>)
 8006c16:	218f      	movs	r1, #143	; 0x8f
 8006c18:	f000 fd0e 	bl	8007638 <__assert_func>
 8006c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c20:	6006      	str	r6, [r0, #0]
 8006c22:	60c6      	str	r6, [r0, #12]
 8006c24:	b13c      	cbz	r4, 8006c36 <_Bfree+0x3a>
 8006c26:	69eb      	ldr	r3, [r5, #28]
 8006c28:	6862      	ldr	r2, [r4, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c30:	6021      	str	r1, [r4, #0]
 8006c32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	08007eb8 	.word	0x08007eb8
 8006c3c:	08007ecf 	.word	0x08007ecf

08006c40 <__multadd>:
 8006c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	690d      	ldr	r5, [r1, #16]
 8006c46:	4607      	mov	r7, r0
 8006c48:	460c      	mov	r4, r1
 8006c4a:	461e      	mov	r6, r3
 8006c4c:	f101 0c14 	add.w	ip, r1, #20
 8006c50:	2000      	movs	r0, #0
 8006c52:	f8dc 3000 	ldr.w	r3, [ip]
 8006c56:	b299      	uxth	r1, r3
 8006c58:	fb02 6101 	mla	r1, r2, r1, r6
 8006c5c:	0c1e      	lsrs	r6, r3, #16
 8006c5e:	0c0b      	lsrs	r3, r1, #16
 8006c60:	fb02 3306 	mla	r3, r2, r6, r3
 8006c64:	b289      	uxth	r1, r1
 8006c66:	3001      	adds	r0, #1
 8006c68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c6c:	4285      	cmp	r5, r0
 8006c6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c76:	dcec      	bgt.n	8006c52 <__multadd+0x12>
 8006c78:	b30e      	cbz	r6, 8006cbe <__multadd+0x7e>
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	dc19      	bgt.n	8006cb4 <__multadd+0x74>
 8006c80:	6861      	ldr	r1, [r4, #4]
 8006c82:	4638      	mov	r0, r7
 8006c84:	3101      	adds	r1, #1
 8006c86:	f7ff ff79 	bl	8006b7c <_Balloc>
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	b928      	cbnz	r0, 8006c9a <__multadd+0x5a>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <__multadd+0x84>)
 8006c92:	480d      	ldr	r0, [pc, #52]	; (8006cc8 <__multadd+0x88>)
 8006c94:	21ba      	movs	r1, #186	; 0xba
 8006c96:	f000 fccf 	bl	8007638 <__assert_func>
 8006c9a:	6922      	ldr	r2, [r4, #16]
 8006c9c:	3202      	adds	r2, #2
 8006c9e:	f104 010c 	add.w	r1, r4, #12
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	300c      	adds	r0, #12
 8006ca6:	f7ff fbe7 	bl	8006478 <memcpy>
 8006caa:	4621      	mov	r1, r4
 8006cac:	4638      	mov	r0, r7
 8006cae:	f7ff ffa5 	bl	8006bfc <_Bfree>
 8006cb2:	4644      	mov	r4, r8
 8006cb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cb8:	3501      	adds	r5, #1
 8006cba:	615e      	str	r6, [r3, #20]
 8006cbc:	6125      	str	r5, [r4, #16]
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc4:	08007e47 	.word	0x08007e47
 8006cc8:	08007ecf 	.word	0x08007ecf

08006ccc <__s2b>:
 8006ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	4615      	mov	r5, r2
 8006cd4:	461f      	mov	r7, r3
 8006cd6:	2209      	movs	r2, #9
 8006cd8:	3308      	adds	r3, #8
 8006cda:	4606      	mov	r6, r0
 8006cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	db09      	blt.n	8006cfc <__s2b+0x30>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff ff47 	bl	8006b7c <_Balloc>
 8006cee:	b940      	cbnz	r0, 8006d02 <__s2b+0x36>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <__s2b+0x8c>)
 8006cf4:	4819      	ldr	r0, [pc, #100]	; (8006d5c <__s2b+0x90>)
 8006cf6:	21d3      	movs	r1, #211	; 0xd3
 8006cf8:	f000 fc9e 	bl	8007638 <__assert_func>
 8006cfc:	0052      	lsls	r2, r2, #1
 8006cfe:	3101      	adds	r1, #1
 8006d00:	e7f0      	b.n	8006ce4 <__s2b+0x18>
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	6143      	str	r3, [r0, #20]
 8006d06:	2d09      	cmp	r5, #9
 8006d08:	f04f 0301 	mov.w	r3, #1
 8006d0c:	6103      	str	r3, [r0, #16]
 8006d0e:	dd16      	ble.n	8006d3e <__s2b+0x72>
 8006d10:	f104 0909 	add.w	r9, r4, #9
 8006d14:	46c8      	mov	r8, r9
 8006d16:	442c      	add	r4, r5
 8006d18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	3b30      	subs	r3, #48	; 0x30
 8006d20:	220a      	movs	r2, #10
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ff8c 	bl	8006c40 <__multadd>
 8006d28:	45a0      	cmp	r8, r4
 8006d2a:	d1f5      	bne.n	8006d18 <__s2b+0x4c>
 8006d2c:	f1a5 0408 	sub.w	r4, r5, #8
 8006d30:	444c      	add	r4, r9
 8006d32:	1b2d      	subs	r5, r5, r4
 8006d34:	1963      	adds	r3, r4, r5
 8006d36:	42bb      	cmp	r3, r7
 8006d38:	db04      	blt.n	8006d44 <__s2b+0x78>
 8006d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3e:	340a      	adds	r4, #10
 8006d40:	2509      	movs	r5, #9
 8006d42:	e7f6      	b.n	8006d32 <__s2b+0x66>
 8006d44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d48:	4601      	mov	r1, r0
 8006d4a:	3b30      	subs	r3, #48	; 0x30
 8006d4c:	220a      	movs	r2, #10
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7ff ff76 	bl	8006c40 <__multadd>
 8006d54:	e7ee      	b.n	8006d34 <__s2b+0x68>
 8006d56:	bf00      	nop
 8006d58:	08007e47 	.word	0x08007e47
 8006d5c:	08007ecf 	.word	0x08007ecf

08006d60 <__hi0bits>:
 8006d60:	0c03      	lsrs	r3, r0, #16
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	b9d3      	cbnz	r3, 8006d9c <__hi0bits+0x3c>
 8006d66:	0400      	lsls	r0, r0, #16
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d6e:	bf04      	itt	eq
 8006d70:	0200      	lsleq	r0, r0, #8
 8006d72:	3308      	addeq	r3, #8
 8006d74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d78:	bf04      	itt	eq
 8006d7a:	0100      	lsleq	r0, r0, #4
 8006d7c:	3304      	addeq	r3, #4
 8006d7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d82:	bf04      	itt	eq
 8006d84:	0080      	lsleq	r0, r0, #2
 8006d86:	3302      	addeq	r3, #2
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	db05      	blt.n	8006d98 <__hi0bits+0x38>
 8006d8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d90:	f103 0301 	add.w	r3, r3, #1
 8006d94:	bf08      	it	eq
 8006d96:	2320      	moveq	r3, #32
 8006d98:	4618      	mov	r0, r3
 8006d9a:	4770      	bx	lr
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e7e4      	b.n	8006d6a <__hi0bits+0xa>

08006da0 <__lo0bits>:
 8006da0:	6803      	ldr	r3, [r0, #0]
 8006da2:	f013 0207 	ands.w	r2, r3, #7
 8006da6:	d00c      	beq.n	8006dc2 <__lo0bits+0x22>
 8006da8:	07d9      	lsls	r1, r3, #31
 8006daa:	d422      	bmi.n	8006df2 <__lo0bits+0x52>
 8006dac:	079a      	lsls	r2, r3, #30
 8006dae:	bf49      	itett	mi
 8006db0:	085b      	lsrmi	r3, r3, #1
 8006db2:	089b      	lsrpl	r3, r3, #2
 8006db4:	6003      	strmi	r3, [r0, #0]
 8006db6:	2201      	movmi	r2, #1
 8006db8:	bf5c      	itt	pl
 8006dba:	6003      	strpl	r3, [r0, #0]
 8006dbc:	2202      	movpl	r2, #2
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4770      	bx	lr
 8006dc2:	b299      	uxth	r1, r3
 8006dc4:	b909      	cbnz	r1, 8006dca <__lo0bits+0x2a>
 8006dc6:	0c1b      	lsrs	r3, r3, #16
 8006dc8:	2210      	movs	r2, #16
 8006dca:	b2d9      	uxtb	r1, r3
 8006dcc:	b909      	cbnz	r1, 8006dd2 <__lo0bits+0x32>
 8006dce:	3208      	adds	r2, #8
 8006dd0:	0a1b      	lsrs	r3, r3, #8
 8006dd2:	0719      	lsls	r1, r3, #28
 8006dd4:	bf04      	itt	eq
 8006dd6:	091b      	lsreq	r3, r3, #4
 8006dd8:	3204      	addeq	r2, #4
 8006dda:	0799      	lsls	r1, r3, #30
 8006ddc:	bf04      	itt	eq
 8006dde:	089b      	lsreq	r3, r3, #2
 8006de0:	3202      	addeq	r2, #2
 8006de2:	07d9      	lsls	r1, r3, #31
 8006de4:	d403      	bmi.n	8006dee <__lo0bits+0x4e>
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	f102 0201 	add.w	r2, r2, #1
 8006dec:	d003      	beq.n	8006df6 <__lo0bits+0x56>
 8006dee:	6003      	str	r3, [r0, #0]
 8006df0:	e7e5      	b.n	8006dbe <__lo0bits+0x1e>
 8006df2:	2200      	movs	r2, #0
 8006df4:	e7e3      	b.n	8006dbe <__lo0bits+0x1e>
 8006df6:	2220      	movs	r2, #32
 8006df8:	e7e1      	b.n	8006dbe <__lo0bits+0x1e>
	...

08006dfc <__i2b>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	460c      	mov	r4, r1
 8006e00:	2101      	movs	r1, #1
 8006e02:	f7ff febb 	bl	8006b7c <_Balloc>
 8006e06:	4602      	mov	r2, r0
 8006e08:	b928      	cbnz	r0, 8006e16 <__i2b+0x1a>
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <__i2b+0x24>)
 8006e0c:	4805      	ldr	r0, [pc, #20]	; (8006e24 <__i2b+0x28>)
 8006e0e:	f240 1145 	movw	r1, #325	; 0x145
 8006e12:	f000 fc11 	bl	8007638 <__assert_func>
 8006e16:	2301      	movs	r3, #1
 8006e18:	6144      	str	r4, [r0, #20]
 8006e1a:	6103      	str	r3, [r0, #16]
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	bf00      	nop
 8006e20:	08007e47 	.word	0x08007e47
 8006e24:	08007ecf 	.word	0x08007ecf

08006e28 <__multiply>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	4691      	mov	r9, r2
 8006e2e:	690a      	ldr	r2, [r1, #16]
 8006e30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	bfb8      	it	lt
 8006e38:	460b      	movlt	r3, r1
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	bfbc      	itt	lt
 8006e3e:	464c      	movlt	r4, r9
 8006e40:	4699      	movlt	r9, r3
 8006e42:	6927      	ldr	r7, [r4, #16]
 8006e44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e48:	68a3      	ldr	r3, [r4, #8]
 8006e4a:	6861      	ldr	r1, [r4, #4]
 8006e4c:	eb07 060a 	add.w	r6, r7, sl
 8006e50:	42b3      	cmp	r3, r6
 8006e52:	b085      	sub	sp, #20
 8006e54:	bfb8      	it	lt
 8006e56:	3101      	addlt	r1, #1
 8006e58:	f7ff fe90 	bl	8006b7c <_Balloc>
 8006e5c:	b930      	cbnz	r0, 8006e6c <__multiply+0x44>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4b44      	ldr	r3, [pc, #272]	; (8006f74 <__multiply+0x14c>)
 8006e62:	4845      	ldr	r0, [pc, #276]	; (8006f78 <__multiply+0x150>)
 8006e64:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e68:	f000 fbe6 	bl	8007638 <__assert_func>
 8006e6c:	f100 0514 	add.w	r5, r0, #20
 8006e70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e74:	462b      	mov	r3, r5
 8006e76:	2200      	movs	r2, #0
 8006e78:	4543      	cmp	r3, r8
 8006e7a:	d321      	bcc.n	8006ec0 <__multiply+0x98>
 8006e7c:	f104 0314 	add.w	r3, r4, #20
 8006e80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e84:	f109 0314 	add.w	r3, r9, #20
 8006e88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e8c:	9202      	str	r2, [sp, #8]
 8006e8e:	1b3a      	subs	r2, r7, r4
 8006e90:	3a15      	subs	r2, #21
 8006e92:	f022 0203 	bic.w	r2, r2, #3
 8006e96:	3204      	adds	r2, #4
 8006e98:	f104 0115 	add.w	r1, r4, #21
 8006e9c:	428f      	cmp	r7, r1
 8006e9e:	bf38      	it	cc
 8006ea0:	2204      	movcc	r2, #4
 8006ea2:	9201      	str	r2, [sp, #4]
 8006ea4:	9a02      	ldr	r2, [sp, #8]
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d80c      	bhi.n	8006ec6 <__multiply+0x9e>
 8006eac:	2e00      	cmp	r6, #0
 8006eae:	dd03      	ble.n	8006eb8 <__multiply+0x90>
 8006eb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d05b      	beq.n	8006f70 <__multiply+0x148>
 8006eb8:	6106      	str	r6, [r0, #16]
 8006eba:	b005      	add	sp, #20
 8006ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec0:	f843 2b04 	str.w	r2, [r3], #4
 8006ec4:	e7d8      	b.n	8006e78 <__multiply+0x50>
 8006ec6:	f8b3 a000 	ldrh.w	sl, [r3]
 8006eca:	f1ba 0f00 	cmp.w	sl, #0
 8006ece:	d024      	beq.n	8006f1a <__multiply+0xf2>
 8006ed0:	f104 0e14 	add.w	lr, r4, #20
 8006ed4:	46a9      	mov	r9, r5
 8006ed6:	f04f 0c00 	mov.w	ip, #0
 8006eda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ede:	f8d9 1000 	ldr.w	r1, [r9]
 8006ee2:	fa1f fb82 	uxth.w	fp, r2
 8006ee6:	b289      	uxth	r1, r1
 8006ee8:	fb0a 110b 	mla	r1, sl, fp, r1
 8006eec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ef4:	4461      	add	r1, ip
 8006ef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006efa:	fb0a c20b 	mla	r2, sl, fp, ip
 8006efe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f02:	b289      	uxth	r1, r1
 8006f04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f08:	4577      	cmp	r7, lr
 8006f0a:	f849 1b04 	str.w	r1, [r9], #4
 8006f0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f12:	d8e2      	bhi.n	8006eda <__multiply+0xb2>
 8006f14:	9a01      	ldr	r2, [sp, #4]
 8006f16:	f845 c002 	str.w	ip, [r5, r2]
 8006f1a:	9a03      	ldr	r2, [sp, #12]
 8006f1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f20:	3304      	adds	r3, #4
 8006f22:	f1b9 0f00 	cmp.w	r9, #0
 8006f26:	d021      	beq.n	8006f6c <__multiply+0x144>
 8006f28:	6829      	ldr	r1, [r5, #0]
 8006f2a:	f104 0c14 	add.w	ip, r4, #20
 8006f2e:	46ae      	mov	lr, r5
 8006f30:	f04f 0a00 	mov.w	sl, #0
 8006f34:	f8bc b000 	ldrh.w	fp, [ip]
 8006f38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f3c:	fb09 220b 	mla	r2, r9, fp, r2
 8006f40:	4452      	add	r2, sl
 8006f42:	b289      	uxth	r1, r1
 8006f44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f48:	f84e 1b04 	str.w	r1, [lr], #4
 8006f4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f54:	f8be 1000 	ldrh.w	r1, [lr]
 8006f58:	fb09 110a 	mla	r1, r9, sl, r1
 8006f5c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f60:	4567      	cmp	r7, ip
 8006f62:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f66:	d8e5      	bhi.n	8006f34 <__multiply+0x10c>
 8006f68:	9a01      	ldr	r2, [sp, #4]
 8006f6a:	50a9      	str	r1, [r5, r2]
 8006f6c:	3504      	adds	r5, #4
 8006f6e:	e799      	b.n	8006ea4 <__multiply+0x7c>
 8006f70:	3e01      	subs	r6, #1
 8006f72:	e79b      	b.n	8006eac <__multiply+0x84>
 8006f74:	08007e47 	.word	0x08007e47
 8006f78:	08007ecf 	.word	0x08007ecf

08006f7c <__pow5mult>:
 8006f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	4615      	mov	r5, r2
 8006f82:	f012 0203 	ands.w	r2, r2, #3
 8006f86:	4606      	mov	r6, r0
 8006f88:	460f      	mov	r7, r1
 8006f8a:	d007      	beq.n	8006f9c <__pow5mult+0x20>
 8006f8c:	4c25      	ldr	r4, [pc, #148]	; (8007024 <__pow5mult+0xa8>)
 8006f8e:	3a01      	subs	r2, #1
 8006f90:	2300      	movs	r3, #0
 8006f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f96:	f7ff fe53 	bl	8006c40 <__multadd>
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	10ad      	asrs	r5, r5, #2
 8006f9e:	d03d      	beq.n	800701c <__pow5mult+0xa0>
 8006fa0:	69f4      	ldr	r4, [r6, #28]
 8006fa2:	b97c      	cbnz	r4, 8006fc4 <__pow5mult+0x48>
 8006fa4:	2010      	movs	r0, #16
 8006fa6:	f000 fb7b 	bl	80076a0 <malloc>
 8006faa:	4602      	mov	r2, r0
 8006fac:	61f0      	str	r0, [r6, #28]
 8006fae:	b928      	cbnz	r0, 8006fbc <__pow5mult+0x40>
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <__pow5mult+0xac>)
 8006fb2:	481e      	ldr	r0, [pc, #120]	; (800702c <__pow5mult+0xb0>)
 8006fb4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006fb8:	f000 fb3e 	bl	8007638 <__assert_func>
 8006fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fc0:	6004      	str	r4, [r0, #0]
 8006fc2:	60c4      	str	r4, [r0, #12]
 8006fc4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fcc:	b94c      	cbnz	r4, 8006fe2 <__pow5mult+0x66>
 8006fce:	f240 2171 	movw	r1, #625	; 0x271
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff ff12 	bl	8006dfc <__i2b>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fde:	4604      	mov	r4, r0
 8006fe0:	6003      	str	r3, [r0, #0]
 8006fe2:	f04f 0900 	mov.w	r9, #0
 8006fe6:	07eb      	lsls	r3, r5, #31
 8006fe8:	d50a      	bpl.n	8007000 <__pow5mult+0x84>
 8006fea:	4639      	mov	r1, r7
 8006fec:	4622      	mov	r2, r4
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f7ff ff1a 	bl	8006e28 <__multiply>
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4680      	mov	r8, r0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7ff fdff 	bl	8006bfc <_Bfree>
 8006ffe:	4647      	mov	r7, r8
 8007000:	106d      	asrs	r5, r5, #1
 8007002:	d00b      	beq.n	800701c <__pow5mult+0xa0>
 8007004:	6820      	ldr	r0, [r4, #0]
 8007006:	b938      	cbnz	r0, 8007018 <__pow5mult+0x9c>
 8007008:	4622      	mov	r2, r4
 800700a:	4621      	mov	r1, r4
 800700c:	4630      	mov	r0, r6
 800700e:	f7ff ff0b 	bl	8006e28 <__multiply>
 8007012:	6020      	str	r0, [r4, #0]
 8007014:	f8c0 9000 	str.w	r9, [r0]
 8007018:	4604      	mov	r4, r0
 800701a:	e7e4      	b.n	8006fe6 <__pow5mult+0x6a>
 800701c:	4638      	mov	r0, r7
 800701e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007022:	bf00      	nop
 8007024:	08008018 	.word	0x08008018
 8007028:	08007eb8 	.word	0x08007eb8
 800702c:	08007ecf 	.word	0x08007ecf

08007030 <__lshift>:
 8007030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	460c      	mov	r4, r1
 8007036:	6849      	ldr	r1, [r1, #4]
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800703e:	68a3      	ldr	r3, [r4, #8]
 8007040:	4607      	mov	r7, r0
 8007042:	4691      	mov	r9, r2
 8007044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007048:	f108 0601 	add.w	r6, r8, #1
 800704c:	42b3      	cmp	r3, r6
 800704e:	db0b      	blt.n	8007068 <__lshift+0x38>
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff fd93 	bl	8006b7c <_Balloc>
 8007056:	4605      	mov	r5, r0
 8007058:	b948      	cbnz	r0, 800706e <__lshift+0x3e>
 800705a:	4602      	mov	r2, r0
 800705c:	4b28      	ldr	r3, [pc, #160]	; (8007100 <__lshift+0xd0>)
 800705e:	4829      	ldr	r0, [pc, #164]	; (8007104 <__lshift+0xd4>)
 8007060:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007064:	f000 fae8 	bl	8007638 <__assert_func>
 8007068:	3101      	adds	r1, #1
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	e7ee      	b.n	800704c <__lshift+0x1c>
 800706e:	2300      	movs	r3, #0
 8007070:	f100 0114 	add.w	r1, r0, #20
 8007074:	f100 0210 	add.w	r2, r0, #16
 8007078:	4618      	mov	r0, r3
 800707a:	4553      	cmp	r3, sl
 800707c:	db33      	blt.n	80070e6 <__lshift+0xb6>
 800707e:	6920      	ldr	r0, [r4, #16]
 8007080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007084:	f104 0314 	add.w	r3, r4, #20
 8007088:	f019 091f 	ands.w	r9, r9, #31
 800708c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007094:	d02b      	beq.n	80070ee <__lshift+0xbe>
 8007096:	f1c9 0e20 	rsb	lr, r9, #32
 800709a:	468a      	mov	sl, r1
 800709c:	2200      	movs	r2, #0
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	fa00 f009 	lsl.w	r0, r0, r9
 80070a4:	4310      	orrs	r0, r2
 80070a6:	f84a 0b04 	str.w	r0, [sl], #4
 80070aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ae:	459c      	cmp	ip, r3
 80070b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80070b4:	d8f3      	bhi.n	800709e <__lshift+0x6e>
 80070b6:	ebac 0304 	sub.w	r3, ip, r4
 80070ba:	3b15      	subs	r3, #21
 80070bc:	f023 0303 	bic.w	r3, r3, #3
 80070c0:	3304      	adds	r3, #4
 80070c2:	f104 0015 	add.w	r0, r4, #21
 80070c6:	4584      	cmp	ip, r0
 80070c8:	bf38      	it	cc
 80070ca:	2304      	movcc	r3, #4
 80070cc:	50ca      	str	r2, [r1, r3]
 80070ce:	b10a      	cbz	r2, 80070d4 <__lshift+0xa4>
 80070d0:	f108 0602 	add.w	r6, r8, #2
 80070d4:	3e01      	subs	r6, #1
 80070d6:	4638      	mov	r0, r7
 80070d8:	612e      	str	r6, [r5, #16]
 80070da:	4621      	mov	r1, r4
 80070dc:	f7ff fd8e 	bl	8006bfc <_Bfree>
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80070ea:	3301      	adds	r3, #1
 80070ec:	e7c5      	b.n	800707a <__lshift+0x4a>
 80070ee:	3904      	subs	r1, #4
 80070f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80070f8:	459c      	cmp	ip, r3
 80070fa:	d8f9      	bhi.n	80070f0 <__lshift+0xc0>
 80070fc:	e7ea      	b.n	80070d4 <__lshift+0xa4>
 80070fe:	bf00      	nop
 8007100:	08007e47 	.word	0x08007e47
 8007104:	08007ecf 	.word	0x08007ecf

08007108 <__mcmp>:
 8007108:	b530      	push	{r4, r5, lr}
 800710a:	6902      	ldr	r2, [r0, #16]
 800710c:	690c      	ldr	r4, [r1, #16]
 800710e:	1b12      	subs	r2, r2, r4
 8007110:	d10e      	bne.n	8007130 <__mcmp+0x28>
 8007112:	f100 0314 	add.w	r3, r0, #20
 8007116:	3114      	adds	r1, #20
 8007118:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800711c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007120:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007124:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007128:	42a5      	cmp	r5, r4
 800712a:	d003      	beq.n	8007134 <__mcmp+0x2c>
 800712c:	d305      	bcc.n	800713a <__mcmp+0x32>
 800712e:	2201      	movs	r2, #1
 8007130:	4610      	mov	r0, r2
 8007132:	bd30      	pop	{r4, r5, pc}
 8007134:	4283      	cmp	r3, r0
 8007136:	d3f3      	bcc.n	8007120 <__mcmp+0x18>
 8007138:	e7fa      	b.n	8007130 <__mcmp+0x28>
 800713a:	f04f 32ff 	mov.w	r2, #4294967295
 800713e:	e7f7      	b.n	8007130 <__mcmp+0x28>

08007140 <__mdiff>:
 8007140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	460c      	mov	r4, r1
 8007146:	4606      	mov	r6, r0
 8007148:	4611      	mov	r1, r2
 800714a:	4620      	mov	r0, r4
 800714c:	4690      	mov	r8, r2
 800714e:	f7ff ffdb 	bl	8007108 <__mcmp>
 8007152:	1e05      	subs	r5, r0, #0
 8007154:	d110      	bne.n	8007178 <__mdiff+0x38>
 8007156:	4629      	mov	r1, r5
 8007158:	4630      	mov	r0, r6
 800715a:	f7ff fd0f 	bl	8006b7c <_Balloc>
 800715e:	b930      	cbnz	r0, 800716e <__mdiff+0x2e>
 8007160:	4b3a      	ldr	r3, [pc, #232]	; (800724c <__mdiff+0x10c>)
 8007162:	4602      	mov	r2, r0
 8007164:	f240 2137 	movw	r1, #567	; 0x237
 8007168:	4839      	ldr	r0, [pc, #228]	; (8007250 <__mdiff+0x110>)
 800716a:	f000 fa65 	bl	8007638 <__assert_func>
 800716e:	2301      	movs	r3, #1
 8007170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007178:	bfa4      	itt	ge
 800717a:	4643      	movge	r3, r8
 800717c:	46a0      	movge	r8, r4
 800717e:	4630      	mov	r0, r6
 8007180:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007184:	bfa6      	itte	ge
 8007186:	461c      	movge	r4, r3
 8007188:	2500      	movge	r5, #0
 800718a:	2501      	movlt	r5, #1
 800718c:	f7ff fcf6 	bl	8006b7c <_Balloc>
 8007190:	b920      	cbnz	r0, 800719c <__mdiff+0x5c>
 8007192:	4b2e      	ldr	r3, [pc, #184]	; (800724c <__mdiff+0x10c>)
 8007194:	4602      	mov	r2, r0
 8007196:	f240 2145 	movw	r1, #581	; 0x245
 800719a:	e7e5      	b.n	8007168 <__mdiff+0x28>
 800719c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071a0:	6926      	ldr	r6, [r4, #16]
 80071a2:	60c5      	str	r5, [r0, #12]
 80071a4:	f104 0914 	add.w	r9, r4, #20
 80071a8:	f108 0514 	add.w	r5, r8, #20
 80071ac:	f100 0e14 	add.w	lr, r0, #20
 80071b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071b8:	f108 0210 	add.w	r2, r8, #16
 80071bc:	46f2      	mov	sl, lr
 80071be:	2100      	movs	r1, #0
 80071c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80071c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071c8:	fa11 f88b 	uxtah	r8, r1, fp
 80071cc:	b299      	uxth	r1, r3
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	eba8 0801 	sub.w	r8, r8, r1
 80071d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071dc:	fa1f f888 	uxth.w	r8, r8
 80071e0:	1419      	asrs	r1, r3, #16
 80071e2:	454e      	cmp	r6, r9
 80071e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071e8:	f84a 3b04 	str.w	r3, [sl], #4
 80071ec:	d8e8      	bhi.n	80071c0 <__mdiff+0x80>
 80071ee:	1b33      	subs	r3, r6, r4
 80071f0:	3b15      	subs	r3, #21
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	3304      	adds	r3, #4
 80071f8:	3415      	adds	r4, #21
 80071fa:	42a6      	cmp	r6, r4
 80071fc:	bf38      	it	cc
 80071fe:	2304      	movcc	r3, #4
 8007200:	441d      	add	r5, r3
 8007202:	4473      	add	r3, lr
 8007204:	469e      	mov	lr, r3
 8007206:	462e      	mov	r6, r5
 8007208:	4566      	cmp	r6, ip
 800720a:	d30e      	bcc.n	800722a <__mdiff+0xea>
 800720c:	f10c 0203 	add.w	r2, ip, #3
 8007210:	1b52      	subs	r2, r2, r5
 8007212:	f022 0203 	bic.w	r2, r2, #3
 8007216:	3d03      	subs	r5, #3
 8007218:	45ac      	cmp	ip, r5
 800721a:	bf38      	it	cc
 800721c:	2200      	movcc	r2, #0
 800721e:	4413      	add	r3, r2
 8007220:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007224:	b17a      	cbz	r2, 8007246 <__mdiff+0x106>
 8007226:	6107      	str	r7, [r0, #16]
 8007228:	e7a4      	b.n	8007174 <__mdiff+0x34>
 800722a:	f856 8b04 	ldr.w	r8, [r6], #4
 800722e:	fa11 f288 	uxtah	r2, r1, r8
 8007232:	1414      	asrs	r4, r2, #16
 8007234:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007238:	b292      	uxth	r2, r2
 800723a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800723e:	f84e 2b04 	str.w	r2, [lr], #4
 8007242:	1421      	asrs	r1, r4, #16
 8007244:	e7e0      	b.n	8007208 <__mdiff+0xc8>
 8007246:	3f01      	subs	r7, #1
 8007248:	e7ea      	b.n	8007220 <__mdiff+0xe0>
 800724a:	bf00      	nop
 800724c:	08007e47 	.word	0x08007e47
 8007250:	08007ecf 	.word	0x08007ecf

08007254 <__ulp>:
 8007254:	b082      	sub	sp, #8
 8007256:	ed8d 0b00 	vstr	d0, [sp]
 800725a:	9a01      	ldr	r2, [sp, #4]
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <__ulp+0x48>)
 800725e:	4013      	ands	r3, r2
 8007260:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007264:	2b00      	cmp	r3, #0
 8007266:	dc08      	bgt.n	800727a <__ulp+0x26>
 8007268:	425b      	negs	r3, r3
 800726a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800726e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007272:	da04      	bge.n	800727e <__ulp+0x2a>
 8007274:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007278:	4113      	asrs	r3, r2
 800727a:	2200      	movs	r2, #0
 800727c:	e008      	b.n	8007290 <__ulp+0x3c>
 800727e:	f1a2 0314 	sub.w	r3, r2, #20
 8007282:	2b1e      	cmp	r3, #30
 8007284:	bfda      	itte	le
 8007286:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800728a:	40da      	lsrle	r2, r3
 800728c:	2201      	movgt	r2, #1
 800728e:	2300      	movs	r3, #0
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	ec41 0b10 	vmov	d0, r0, r1
 8007298:	b002      	add	sp, #8
 800729a:	4770      	bx	lr
 800729c:	7ff00000 	.word	0x7ff00000

080072a0 <__b2d>:
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	6906      	ldr	r6, [r0, #16]
 80072a6:	f100 0814 	add.w	r8, r0, #20
 80072aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80072ae:	1f37      	subs	r7, r6, #4
 80072b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072b4:	4610      	mov	r0, r2
 80072b6:	f7ff fd53 	bl	8006d60 <__hi0bits>
 80072ba:	f1c0 0320 	rsb	r3, r0, #32
 80072be:	280a      	cmp	r0, #10
 80072c0:	600b      	str	r3, [r1, #0]
 80072c2:	491b      	ldr	r1, [pc, #108]	; (8007330 <__b2d+0x90>)
 80072c4:	dc15      	bgt.n	80072f2 <__b2d+0x52>
 80072c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80072ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80072ce:	45b8      	cmp	r8, r7
 80072d0:	ea43 0501 	orr.w	r5, r3, r1
 80072d4:	bf34      	ite	cc
 80072d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80072da:	2300      	movcs	r3, #0
 80072dc:	3015      	adds	r0, #21
 80072de:	fa02 f000 	lsl.w	r0, r2, r0
 80072e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80072e6:	4303      	orrs	r3, r0
 80072e8:	461c      	mov	r4, r3
 80072ea:	ec45 4b10 	vmov	d0, r4, r5
 80072ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f2:	45b8      	cmp	r8, r7
 80072f4:	bf3a      	itte	cc
 80072f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80072fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80072fe:	2300      	movcs	r3, #0
 8007300:	380b      	subs	r0, #11
 8007302:	d012      	beq.n	800732a <__b2d+0x8a>
 8007304:	f1c0 0120 	rsb	r1, r0, #32
 8007308:	fa23 f401 	lsr.w	r4, r3, r1
 800730c:	4082      	lsls	r2, r0
 800730e:	4322      	orrs	r2, r4
 8007310:	4547      	cmp	r7, r8
 8007312:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007316:	bf8c      	ite	hi
 8007318:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800731c:	2200      	movls	r2, #0
 800731e:	4083      	lsls	r3, r0
 8007320:	40ca      	lsrs	r2, r1
 8007322:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007326:	4313      	orrs	r3, r2
 8007328:	e7de      	b.n	80072e8 <__b2d+0x48>
 800732a:	ea42 0501 	orr.w	r5, r2, r1
 800732e:	e7db      	b.n	80072e8 <__b2d+0x48>
 8007330:	3ff00000 	.word	0x3ff00000

08007334 <__d2b>:
 8007334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007338:	460f      	mov	r7, r1
 800733a:	2101      	movs	r1, #1
 800733c:	ec59 8b10 	vmov	r8, r9, d0
 8007340:	4616      	mov	r6, r2
 8007342:	f7ff fc1b 	bl	8006b7c <_Balloc>
 8007346:	4604      	mov	r4, r0
 8007348:	b930      	cbnz	r0, 8007358 <__d2b+0x24>
 800734a:	4602      	mov	r2, r0
 800734c:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <__d2b+0xac>)
 800734e:	4825      	ldr	r0, [pc, #148]	; (80073e4 <__d2b+0xb0>)
 8007350:	f240 310f 	movw	r1, #783	; 0x30f
 8007354:	f000 f970 	bl	8007638 <__assert_func>
 8007358:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800735c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007360:	bb2d      	cbnz	r5, 80073ae <__d2b+0x7a>
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	f1b8 0300 	subs.w	r3, r8, #0
 8007368:	d026      	beq.n	80073b8 <__d2b+0x84>
 800736a:	4668      	mov	r0, sp
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	f7ff fd17 	bl	8006da0 <__lo0bits>
 8007372:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007376:	b1e8      	cbz	r0, 80073b4 <__d2b+0x80>
 8007378:	f1c0 0320 	rsb	r3, r0, #32
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	430b      	orrs	r3, r1
 8007382:	40c2      	lsrs	r2, r0
 8007384:	6163      	str	r3, [r4, #20]
 8007386:	9201      	str	r2, [sp, #4]
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	61a3      	str	r3, [r4, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf14      	ite	ne
 8007390:	2202      	movne	r2, #2
 8007392:	2201      	moveq	r2, #1
 8007394:	6122      	str	r2, [r4, #16]
 8007396:	b1bd      	cbz	r5, 80073c8 <__d2b+0x94>
 8007398:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800739c:	4405      	add	r5, r0
 800739e:	603d      	str	r5, [r7, #0]
 80073a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4620      	mov	r0, r4
 80073a8:	b003      	add	sp, #12
 80073aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073b2:	e7d6      	b.n	8007362 <__d2b+0x2e>
 80073b4:	6161      	str	r1, [r4, #20]
 80073b6:	e7e7      	b.n	8007388 <__d2b+0x54>
 80073b8:	a801      	add	r0, sp, #4
 80073ba:	f7ff fcf1 	bl	8006da0 <__lo0bits>
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	6163      	str	r3, [r4, #20]
 80073c2:	3020      	adds	r0, #32
 80073c4:	2201      	movs	r2, #1
 80073c6:	e7e5      	b.n	8007394 <__d2b+0x60>
 80073c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073d0:	6038      	str	r0, [r7, #0]
 80073d2:	6918      	ldr	r0, [r3, #16]
 80073d4:	f7ff fcc4 	bl	8006d60 <__hi0bits>
 80073d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073dc:	e7e2      	b.n	80073a4 <__d2b+0x70>
 80073de:	bf00      	nop
 80073e0:	08007e47 	.word	0x08007e47
 80073e4:	08007ecf 	.word	0x08007ecf

080073e8 <__ratio>:
 80073e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	4688      	mov	r8, r1
 80073ee:	4669      	mov	r1, sp
 80073f0:	4681      	mov	r9, r0
 80073f2:	f7ff ff55 	bl	80072a0 <__b2d>
 80073f6:	a901      	add	r1, sp, #4
 80073f8:	4640      	mov	r0, r8
 80073fa:	ec55 4b10 	vmov	r4, r5, d0
 80073fe:	f7ff ff4f 	bl	80072a0 <__b2d>
 8007402:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007406:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800740a:	eba3 0c02 	sub.w	ip, r3, r2
 800740e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007412:	1a9b      	subs	r3, r3, r2
 8007414:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007418:	ec51 0b10 	vmov	r0, r1, d0
 800741c:	2b00      	cmp	r3, #0
 800741e:	bfd6      	itet	le
 8007420:	460a      	movle	r2, r1
 8007422:	462a      	movgt	r2, r5
 8007424:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007428:	468b      	mov	fp, r1
 800742a:	462f      	mov	r7, r5
 800742c:	bfd4      	ite	le
 800742e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007432:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007436:	4620      	mov	r0, r4
 8007438:	ee10 2a10 	vmov	r2, s0
 800743c:	465b      	mov	r3, fp
 800743e:	4639      	mov	r1, r7
 8007440:	f7f9 fa0c 	bl	800085c <__aeabi_ddiv>
 8007444:	ec41 0b10 	vmov	d0, r0, r1
 8007448:	b003      	add	sp, #12
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800744e <__copybits>:
 800744e:	3901      	subs	r1, #1
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	1149      	asrs	r1, r1, #5
 8007454:	6914      	ldr	r4, [r2, #16]
 8007456:	3101      	adds	r1, #1
 8007458:	f102 0314 	add.w	r3, r2, #20
 800745c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007460:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007464:	1f05      	subs	r5, r0, #4
 8007466:	42a3      	cmp	r3, r4
 8007468:	d30c      	bcc.n	8007484 <__copybits+0x36>
 800746a:	1aa3      	subs	r3, r4, r2
 800746c:	3b11      	subs	r3, #17
 800746e:	f023 0303 	bic.w	r3, r3, #3
 8007472:	3211      	adds	r2, #17
 8007474:	42a2      	cmp	r2, r4
 8007476:	bf88      	it	hi
 8007478:	2300      	movhi	r3, #0
 800747a:	4418      	add	r0, r3
 800747c:	2300      	movs	r3, #0
 800747e:	4288      	cmp	r0, r1
 8007480:	d305      	bcc.n	800748e <__copybits+0x40>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f853 6b04 	ldr.w	r6, [r3], #4
 8007488:	f845 6f04 	str.w	r6, [r5, #4]!
 800748c:	e7eb      	b.n	8007466 <__copybits+0x18>
 800748e:	f840 3b04 	str.w	r3, [r0], #4
 8007492:	e7f4      	b.n	800747e <__copybits+0x30>

08007494 <__any_on>:
 8007494:	f100 0214 	add.w	r2, r0, #20
 8007498:	6900      	ldr	r0, [r0, #16]
 800749a:	114b      	asrs	r3, r1, #5
 800749c:	4298      	cmp	r0, r3
 800749e:	b510      	push	{r4, lr}
 80074a0:	db11      	blt.n	80074c6 <__any_on+0x32>
 80074a2:	dd0a      	ble.n	80074ba <__any_on+0x26>
 80074a4:	f011 011f 	ands.w	r1, r1, #31
 80074a8:	d007      	beq.n	80074ba <__any_on+0x26>
 80074aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074ae:	fa24 f001 	lsr.w	r0, r4, r1
 80074b2:	fa00 f101 	lsl.w	r1, r0, r1
 80074b6:	428c      	cmp	r4, r1
 80074b8:	d10b      	bne.n	80074d2 <__any_on+0x3e>
 80074ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074be:	4293      	cmp	r3, r2
 80074c0:	d803      	bhi.n	80074ca <__any_on+0x36>
 80074c2:	2000      	movs	r0, #0
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	4603      	mov	r3, r0
 80074c8:	e7f7      	b.n	80074ba <__any_on+0x26>
 80074ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ce:	2900      	cmp	r1, #0
 80074d0:	d0f5      	beq.n	80074be <__any_on+0x2a>
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7f6      	b.n	80074c4 <__any_on+0x30>

080074d6 <_realloc_r>:
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	4680      	mov	r8, r0
 80074dc:	4614      	mov	r4, r2
 80074de:	460e      	mov	r6, r1
 80074e0:	b921      	cbnz	r1, 80074ec <_realloc_r+0x16>
 80074e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e6:	4611      	mov	r1, r2
 80074e8:	f7fd b93c 	b.w	8004764 <_malloc_r>
 80074ec:	b92a      	cbnz	r2, 80074fa <_realloc_r+0x24>
 80074ee:	f7fd f8cd 	bl	800468c <_free_r>
 80074f2:	4625      	mov	r5, r4
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074fa:	f000 f8d9 	bl	80076b0 <_malloc_usable_size_r>
 80074fe:	4284      	cmp	r4, r0
 8007500:	4607      	mov	r7, r0
 8007502:	d802      	bhi.n	800750a <_realloc_r+0x34>
 8007504:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007508:	d812      	bhi.n	8007530 <_realloc_r+0x5a>
 800750a:	4621      	mov	r1, r4
 800750c:	4640      	mov	r0, r8
 800750e:	f7fd f929 	bl	8004764 <_malloc_r>
 8007512:	4605      	mov	r5, r0
 8007514:	2800      	cmp	r0, #0
 8007516:	d0ed      	beq.n	80074f4 <_realloc_r+0x1e>
 8007518:	42bc      	cmp	r4, r7
 800751a:	4622      	mov	r2, r4
 800751c:	4631      	mov	r1, r6
 800751e:	bf28      	it	cs
 8007520:	463a      	movcs	r2, r7
 8007522:	f7fe ffa9 	bl	8006478 <memcpy>
 8007526:	4631      	mov	r1, r6
 8007528:	4640      	mov	r0, r8
 800752a:	f7fd f8af 	bl	800468c <_free_r>
 800752e:	e7e1      	b.n	80074f4 <_realloc_r+0x1e>
 8007530:	4635      	mov	r5, r6
 8007532:	e7df      	b.n	80074f4 <_realloc_r+0x1e>

08007534 <_strtoul_l.constprop.0>:
 8007534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007538:	4f36      	ldr	r7, [pc, #216]	; (8007614 <_strtoul_l.constprop.0+0xe0>)
 800753a:	4686      	mov	lr, r0
 800753c:	460d      	mov	r5, r1
 800753e:	4628      	mov	r0, r5
 8007540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007544:	5d3e      	ldrb	r6, [r7, r4]
 8007546:	f016 0608 	ands.w	r6, r6, #8
 800754a:	d1f8      	bne.n	800753e <_strtoul_l.constprop.0+0xa>
 800754c:	2c2d      	cmp	r4, #45	; 0x2d
 800754e:	d130      	bne.n	80075b2 <_strtoul_l.constprop.0+0x7e>
 8007550:	782c      	ldrb	r4, [r5, #0]
 8007552:	2601      	movs	r6, #1
 8007554:	1c85      	adds	r5, r0, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d057      	beq.n	800760a <_strtoul_l.constprop.0+0xd6>
 800755a:	2b10      	cmp	r3, #16
 800755c:	d109      	bne.n	8007572 <_strtoul_l.constprop.0+0x3e>
 800755e:	2c30      	cmp	r4, #48	; 0x30
 8007560:	d107      	bne.n	8007572 <_strtoul_l.constprop.0+0x3e>
 8007562:	7828      	ldrb	r0, [r5, #0]
 8007564:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007568:	2858      	cmp	r0, #88	; 0x58
 800756a:	d149      	bne.n	8007600 <_strtoul_l.constprop.0+0xcc>
 800756c:	786c      	ldrb	r4, [r5, #1]
 800756e:	2310      	movs	r3, #16
 8007570:	3502      	adds	r5, #2
 8007572:	f04f 38ff 	mov.w	r8, #4294967295
 8007576:	2700      	movs	r7, #0
 8007578:	fbb8 f8f3 	udiv	r8, r8, r3
 800757c:	fb03 f908 	mul.w	r9, r3, r8
 8007580:	ea6f 0909 	mvn.w	r9, r9
 8007584:	4638      	mov	r0, r7
 8007586:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800758a:	f1bc 0f09 	cmp.w	ip, #9
 800758e:	d815      	bhi.n	80075bc <_strtoul_l.constprop.0+0x88>
 8007590:	4664      	mov	r4, ip
 8007592:	42a3      	cmp	r3, r4
 8007594:	dd23      	ble.n	80075de <_strtoul_l.constprop.0+0xaa>
 8007596:	f1b7 3fff 	cmp.w	r7, #4294967295
 800759a:	d007      	beq.n	80075ac <_strtoul_l.constprop.0+0x78>
 800759c:	4580      	cmp	r8, r0
 800759e:	d31b      	bcc.n	80075d8 <_strtoul_l.constprop.0+0xa4>
 80075a0:	d101      	bne.n	80075a6 <_strtoul_l.constprop.0+0x72>
 80075a2:	45a1      	cmp	r9, r4
 80075a4:	db18      	blt.n	80075d8 <_strtoul_l.constprop.0+0xa4>
 80075a6:	fb00 4003 	mla	r0, r0, r3, r4
 80075aa:	2701      	movs	r7, #1
 80075ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075b0:	e7e9      	b.n	8007586 <_strtoul_l.constprop.0+0x52>
 80075b2:	2c2b      	cmp	r4, #43	; 0x2b
 80075b4:	bf04      	itt	eq
 80075b6:	782c      	ldrbeq	r4, [r5, #0]
 80075b8:	1c85      	addeq	r5, r0, #2
 80075ba:	e7cc      	b.n	8007556 <_strtoul_l.constprop.0+0x22>
 80075bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80075c0:	f1bc 0f19 	cmp.w	ip, #25
 80075c4:	d801      	bhi.n	80075ca <_strtoul_l.constprop.0+0x96>
 80075c6:	3c37      	subs	r4, #55	; 0x37
 80075c8:	e7e3      	b.n	8007592 <_strtoul_l.constprop.0+0x5e>
 80075ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80075ce:	f1bc 0f19 	cmp.w	ip, #25
 80075d2:	d804      	bhi.n	80075de <_strtoul_l.constprop.0+0xaa>
 80075d4:	3c57      	subs	r4, #87	; 0x57
 80075d6:	e7dc      	b.n	8007592 <_strtoul_l.constprop.0+0x5e>
 80075d8:	f04f 37ff 	mov.w	r7, #4294967295
 80075dc:	e7e6      	b.n	80075ac <_strtoul_l.constprop.0+0x78>
 80075de:	1c7b      	adds	r3, r7, #1
 80075e0:	d106      	bne.n	80075f0 <_strtoul_l.constprop.0+0xbc>
 80075e2:	2322      	movs	r3, #34	; 0x22
 80075e4:	f8ce 3000 	str.w	r3, [lr]
 80075e8:	4638      	mov	r0, r7
 80075ea:	b932      	cbnz	r2, 80075fa <_strtoul_l.constprop.0+0xc6>
 80075ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075f0:	b106      	cbz	r6, 80075f4 <_strtoul_l.constprop.0+0xc0>
 80075f2:	4240      	negs	r0, r0
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	d0f9      	beq.n	80075ec <_strtoul_l.constprop.0+0xb8>
 80075f8:	b107      	cbz	r7, 80075fc <_strtoul_l.constprop.0+0xc8>
 80075fa:	1e69      	subs	r1, r5, #1
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	e7f5      	b.n	80075ec <_strtoul_l.constprop.0+0xb8>
 8007600:	2430      	movs	r4, #48	; 0x30
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1b5      	bne.n	8007572 <_strtoul_l.constprop.0+0x3e>
 8007606:	2308      	movs	r3, #8
 8007608:	e7b3      	b.n	8007572 <_strtoul_l.constprop.0+0x3e>
 800760a:	2c30      	cmp	r4, #48	; 0x30
 800760c:	d0a9      	beq.n	8007562 <_strtoul_l.constprop.0+0x2e>
 800760e:	230a      	movs	r3, #10
 8007610:	e7af      	b.n	8007572 <_strtoul_l.constprop.0+0x3e>
 8007612:	bf00      	nop
 8007614:	08007cf1 	.word	0x08007cf1

08007618 <_strtoul_r>:
 8007618:	f7ff bf8c 	b.w	8007534 <_strtoul_l.constprop.0>

0800761c <__ascii_wctomb>:
 800761c:	b149      	cbz	r1, 8007632 <__ascii_wctomb+0x16>
 800761e:	2aff      	cmp	r2, #255	; 0xff
 8007620:	bf85      	ittet	hi
 8007622:	238a      	movhi	r3, #138	; 0x8a
 8007624:	6003      	strhi	r3, [r0, #0]
 8007626:	700a      	strbls	r2, [r1, #0]
 8007628:	f04f 30ff 	movhi.w	r0, #4294967295
 800762c:	bf98      	it	ls
 800762e:	2001      	movls	r0, #1
 8007630:	4770      	bx	lr
 8007632:	4608      	mov	r0, r1
 8007634:	4770      	bx	lr
	...

08007638 <__assert_func>:
 8007638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800763a:	4614      	mov	r4, r2
 800763c:	461a      	mov	r2, r3
 800763e:	4b09      	ldr	r3, [pc, #36]	; (8007664 <__assert_func+0x2c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4605      	mov	r5, r0
 8007644:	68d8      	ldr	r0, [r3, #12]
 8007646:	b14c      	cbz	r4, 800765c <__assert_func+0x24>
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <__assert_func+0x30>)
 800764a:	9100      	str	r1, [sp, #0]
 800764c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007650:	4906      	ldr	r1, [pc, #24]	; (800766c <__assert_func+0x34>)
 8007652:	462b      	mov	r3, r5
 8007654:	f000 f834 	bl	80076c0 <fiprintf>
 8007658:	f000 f844 	bl	80076e4 <abort>
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <__assert_func+0x38>)
 800765e:	461c      	mov	r4, r3
 8007660:	e7f3      	b.n	800764a <__assert_func+0x12>
 8007662:	bf00      	nop
 8007664:	20000064 	.word	0x20000064
 8007668:	08008024 	.word	0x08008024
 800766c:	08008031 	.word	0x08008031
 8007670:	0800805f 	.word	0x0800805f

08007674 <_calloc_r>:
 8007674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007676:	fba1 2402 	umull	r2, r4, r1, r2
 800767a:	b94c      	cbnz	r4, 8007690 <_calloc_r+0x1c>
 800767c:	4611      	mov	r1, r2
 800767e:	9201      	str	r2, [sp, #4]
 8007680:	f7fd f870 	bl	8004764 <_malloc_r>
 8007684:	9a01      	ldr	r2, [sp, #4]
 8007686:	4605      	mov	r5, r0
 8007688:	b930      	cbnz	r0, 8007698 <_calloc_r+0x24>
 800768a:	4628      	mov	r0, r5
 800768c:	b003      	add	sp, #12
 800768e:	bd30      	pop	{r4, r5, pc}
 8007690:	220c      	movs	r2, #12
 8007692:	6002      	str	r2, [r0, #0]
 8007694:	2500      	movs	r5, #0
 8007696:	e7f8      	b.n	800768a <_calloc_r+0x16>
 8007698:	4621      	mov	r1, r4
 800769a:	f7fc ff76 	bl	800458a <memset>
 800769e:	e7f4      	b.n	800768a <_calloc_r+0x16>

080076a0 <malloc>:
 80076a0:	4b02      	ldr	r3, [pc, #8]	; (80076ac <malloc+0xc>)
 80076a2:	4601      	mov	r1, r0
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	f7fd b85d 	b.w	8004764 <_malloc_r>
 80076aa:	bf00      	nop
 80076ac:	20000064 	.word	0x20000064

080076b0 <_malloc_usable_size_r>:
 80076b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b4:	1f18      	subs	r0, r3, #4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bfbc      	itt	lt
 80076ba:	580b      	ldrlt	r3, [r1, r0]
 80076bc:	18c0      	addlt	r0, r0, r3
 80076be:	4770      	bx	lr

080076c0 <fiprintf>:
 80076c0:	b40e      	push	{r1, r2, r3}
 80076c2:	b503      	push	{r0, r1, lr}
 80076c4:	4601      	mov	r1, r0
 80076c6:	ab03      	add	r3, sp, #12
 80076c8:	4805      	ldr	r0, [pc, #20]	; (80076e0 <fiprintf+0x20>)
 80076ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	f000 f837 	bl	8007744 <_vfiprintf_r>
 80076d6:	b002      	add	sp, #8
 80076d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076dc:	b003      	add	sp, #12
 80076de:	4770      	bx	lr
 80076e0:	20000064 	.word	0x20000064

080076e4 <abort>:
 80076e4:	b508      	push	{r3, lr}
 80076e6:	2006      	movs	r0, #6
 80076e8:	f000 fa04 	bl	8007af4 <raise>
 80076ec:	2001      	movs	r0, #1
 80076ee:	f7f9 fe93 	bl	8001418 <_exit>

080076f2 <__sfputc_r>:
 80076f2:	6893      	ldr	r3, [r2, #8]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	b410      	push	{r4}
 80076fa:	6093      	str	r3, [r2, #8]
 80076fc:	da08      	bge.n	8007710 <__sfputc_r+0x1e>
 80076fe:	6994      	ldr	r4, [r2, #24]
 8007700:	42a3      	cmp	r3, r4
 8007702:	db01      	blt.n	8007708 <__sfputc_r+0x16>
 8007704:	290a      	cmp	r1, #10
 8007706:	d103      	bne.n	8007710 <__sfputc_r+0x1e>
 8007708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800770c:	f000 b934 	b.w	8007978 <__swbuf_r>
 8007710:	6813      	ldr	r3, [r2, #0]
 8007712:	1c58      	adds	r0, r3, #1
 8007714:	6010      	str	r0, [r2, #0]
 8007716:	7019      	strb	r1, [r3, #0]
 8007718:	4608      	mov	r0, r1
 800771a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800771e:	4770      	bx	lr

08007720 <__sfputs_r>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	4606      	mov	r6, r0
 8007724:	460f      	mov	r7, r1
 8007726:	4614      	mov	r4, r2
 8007728:	18d5      	adds	r5, r2, r3
 800772a:	42ac      	cmp	r4, r5
 800772c:	d101      	bne.n	8007732 <__sfputs_r+0x12>
 800772e:	2000      	movs	r0, #0
 8007730:	e007      	b.n	8007742 <__sfputs_r+0x22>
 8007732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007736:	463a      	mov	r2, r7
 8007738:	4630      	mov	r0, r6
 800773a:	f7ff ffda 	bl	80076f2 <__sfputc_r>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d1f3      	bne.n	800772a <__sfputs_r+0xa>
 8007742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007744 <_vfiprintf_r>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	460d      	mov	r5, r1
 800774a:	b09d      	sub	sp, #116	; 0x74
 800774c:	4614      	mov	r4, r2
 800774e:	4698      	mov	r8, r3
 8007750:	4606      	mov	r6, r0
 8007752:	b118      	cbz	r0, 800775c <_vfiprintf_r+0x18>
 8007754:	6a03      	ldr	r3, [r0, #32]
 8007756:	b90b      	cbnz	r3, 800775c <_vfiprintf_r+0x18>
 8007758:	f7fc fe50 	bl	80043fc <__sinit>
 800775c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775e:	07d9      	lsls	r1, r3, #31
 8007760:	d405      	bmi.n	800776e <_vfiprintf_r+0x2a>
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	059a      	lsls	r2, r3, #22
 8007766:	d402      	bmi.n	800776e <_vfiprintf_r+0x2a>
 8007768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800776a:	f7fc ff87 	bl	800467c <__retarget_lock_acquire_recursive>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	071b      	lsls	r3, r3, #28
 8007772:	d501      	bpl.n	8007778 <_vfiprintf_r+0x34>
 8007774:	692b      	ldr	r3, [r5, #16]
 8007776:	b99b      	cbnz	r3, 80077a0 <_vfiprintf_r+0x5c>
 8007778:	4629      	mov	r1, r5
 800777a:	4630      	mov	r0, r6
 800777c:	f000 f93a 	bl	80079f4 <__swsetup_r>
 8007780:	b170      	cbz	r0, 80077a0 <_vfiprintf_r+0x5c>
 8007782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007784:	07dc      	lsls	r4, r3, #31
 8007786:	d504      	bpl.n	8007792 <_vfiprintf_r+0x4e>
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	b01d      	add	sp, #116	; 0x74
 800778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007792:	89ab      	ldrh	r3, [r5, #12]
 8007794:	0598      	lsls	r0, r3, #22
 8007796:	d4f7      	bmi.n	8007788 <_vfiprintf_r+0x44>
 8007798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800779a:	f7fc ff70 	bl	800467e <__retarget_lock_release_recursive>
 800779e:	e7f3      	b.n	8007788 <_vfiprintf_r+0x44>
 80077a0:	2300      	movs	r3, #0
 80077a2:	9309      	str	r3, [sp, #36]	; 0x24
 80077a4:	2320      	movs	r3, #32
 80077a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ae:	2330      	movs	r3, #48	; 0x30
 80077b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007964 <_vfiprintf_r+0x220>
 80077b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077b8:	f04f 0901 	mov.w	r9, #1
 80077bc:	4623      	mov	r3, r4
 80077be:	469a      	mov	sl, r3
 80077c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077c4:	b10a      	cbz	r2, 80077ca <_vfiprintf_r+0x86>
 80077c6:	2a25      	cmp	r2, #37	; 0x25
 80077c8:	d1f9      	bne.n	80077be <_vfiprintf_r+0x7a>
 80077ca:	ebba 0b04 	subs.w	fp, sl, r4
 80077ce:	d00b      	beq.n	80077e8 <_vfiprintf_r+0xa4>
 80077d0:	465b      	mov	r3, fp
 80077d2:	4622      	mov	r2, r4
 80077d4:	4629      	mov	r1, r5
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff ffa2 	bl	8007720 <__sfputs_r>
 80077dc:	3001      	adds	r0, #1
 80077de:	f000 80a9 	beq.w	8007934 <_vfiprintf_r+0x1f0>
 80077e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e4:	445a      	add	r2, fp
 80077e6:	9209      	str	r2, [sp, #36]	; 0x24
 80077e8:	f89a 3000 	ldrb.w	r3, [sl]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80a1 	beq.w	8007934 <_vfiprintf_r+0x1f0>
 80077f2:	2300      	movs	r3, #0
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077fc:	f10a 0a01 	add.w	sl, sl, #1
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	9307      	str	r3, [sp, #28]
 8007804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007808:	931a      	str	r3, [sp, #104]	; 0x68
 800780a:	4654      	mov	r4, sl
 800780c:	2205      	movs	r2, #5
 800780e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007812:	4854      	ldr	r0, [pc, #336]	; (8007964 <_vfiprintf_r+0x220>)
 8007814:	f7f8 fcec 	bl	80001f0 <memchr>
 8007818:	9a04      	ldr	r2, [sp, #16]
 800781a:	b9d8      	cbnz	r0, 8007854 <_vfiprintf_r+0x110>
 800781c:	06d1      	lsls	r1, r2, #27
 800781e:	bf44      	itt	mi
 8007820:	2320      	movmi	r3, #32
 8007822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007826:	0713      	lsls	r3, r2, #28
 8007828:	bf44      	itt	mi
 800782a:	232b      	movmi	r3, #43	; 0x2b
 800782c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007830:	f89a 3000 	ldrb.w	r3, [sl]
 8007834:	2b2a      	cmp	r3, #42	; 0x2a
 8007836:	d015      	beq.n	8007864 <_vfiprintf_r+0x120>
 8007838:	9a07      	ldr	r2, [sp, #28]
 800783a:	4654      	mov	r4, sl
 800783c:	2000      	movs	r0, #0
 800783e:	f04f 0c0a 	mov.w	ip, #10
 8007842:	4621      	mov	r1, r4
 8007844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007848:	3b30      	subs	r3, #48	; 0x30
 800784a:	2b09      	cmp	r3, #9
 800784c:	d94d      	bls.n	80078ea <_vfiprintf_r+0x1a6>
 800784e:	b1b0      	cbz	r0, 800787e <_vfiprintf_r+0x13a>
 8007850:	9207      	str	r2, [sp, #28]
 8007852:	e014      	b.n	800787e <_vfiprintf_r+0x13a>
 8007854:	eba0 0308 	sub.w	r3, r0, r8
 8007858:	fa09 f303 	lsl.w	r3, r9, r3
 800785c:	4313      	orrs	r3, r2
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	46a2      	mov	sl, r4
 8007862:	e7d2      	b.n	800780a <_vfiprintf_r+0xc6>
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	1d19      	adds	r1, r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	9103      	str	r1, [sp, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	bfbb      	ittet	lt
 8007870:	425b      	neglt	r3, r3
 8007872:	f042 0202 	orrlt.w	r2, r2, #2
 8007876:	9307      	strge	r3, [sp, #28]
 8007878:	9307      	strlt	r3, [sp, #28]
 800787a:	bfb8      	it	lt
 800787c:	9204      	strlt	r2, [sp, #16]
 800787e:	7823      	ldrb	r3, [r4, #0]
 8007880:	2b2e      	cmp	r3, #46	; 0x2e
 8007882:	d10c      	bne.n	800789e <_vfiprintf_r+0x15a>
 8007884:	7863      	ldrb	r3, [r4, #1]
 8007886:	2b2a      	cmp	r3, #42	; 0x2a
 8007888:	d134      	bne.n	80078f4 <_vfiprintf_r+0x1b0>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	1d1a      	adds	r2, r3, #4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	9203      	str	r2, [sp, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfb8      	it	lt
 8007896:	f04f 33ff 	movlt.w	r3, #4294967295
 800789a:	3402      	adds	r4, #2
 800789c:	9305      	str	r3, [sp, #20]
 800789e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007974 <_vfiprintf_r+0x230>
 80078a2:	7821      	ldrb	r1, [r4, #0]
 80078a4:	2203      	movs	r2, #3
 80078a6:	4650      	mov	r0, sl
 80078a8:	f7f8 fca2 	bl	80001f0 <memchr>
 80078ac:	b138      	cbz	r0, 80078be <_vfiprintf_r+0x17a>
 80078ae:	9b04      	ldr	r3, [sp, #16]
 80078b0:	eba0 000a 	sub.w	r0, r0, sl
 80078b4:	2240      	movs	r2, #64	; 0x40
 80078b6:	4082      	lsls	r2, r0
 80078b8:	4313      	orrs	r3, r2
 80078ba:	3401      	adds	r4, #1
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c2:	4829      	ldr	r0, [pc, #164]	; (8007968 <_vfiprintf_r+0x224>)
 80078c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078c8:	2206      	movs	r2, #6
 80078ca:	f7f8 fc91 	bl	80001f0 <memchr>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d03f      	beq.n	8007952 <_vfiprintf_r+0x20e>
 80078d2:	4b26      	ldr	r3, [pc, #152]	; (800796c <_vfiprintf_r+0x228>)
 80078d4:	bb1b      	cbnz	r3, 800791e <_vfiprintf_r+0x1da>
 80078d6:	9b03      	ldr	r3, [sp, #12]
 80078d8:	3307      	adds	r3, #7
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	3308      	adds	r3, #8
 80078e0:	9303      	str	r3, [sp, #12]
 80078e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e4:	443b      	add	r3, r7
 80078e6:	9309      	str	r3, [sp, #36]	; 0x24
 80078e8:	e768      	b.n	80077bc <_vfiprintf_r+0x78>
 80078ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ee:	460c      	mov	r4, r1
 80078f0:	2001      	movs	r0, #1
 80078f2:	e7a6      	b.n	8007842 <_vfiprintf_r+0xfe>
 80078f4:	2300      	movs	r3, #0
 80078f6:	3401      	adds	r4, #1
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	4619      	mov	r1, r3
 80078fc:	f04f 0c0a 	mov.w	ip, #10
 8007900:	4620      	mov	r0, r4
 8007902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007906:	3a30      	subs	r2, #48	; 0x30
 8007908:	2a09      	cmp	r2, #9
 800790a:	d903      	bls.n	8007914 <_vfiprintf_r+0x1d0>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0c6      	beq.n	800789e <_vfiprintf_r+0x15a>
 8007910:	9105      	str	r1, [sp, #20]
 8007912:	e7c4      	b.n	800789e <_vfiprintf_r+0x15a>
 8007914:	fb0c 2101 	mla	r1, ip, r1, r2
 8007918:	4604      	mov	r4, r0
 800791a:	2301      	movs	r3, #1
 800791c:	e7f0      	b.n	8007900 <_vfiprintf_r+0x1bc>
 800791e:	ab03      	add	r3, sp, #12
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	462a      	mov	r2, r5
 8007924:	4b12      	ldr	r3, [pc, #72]	; (8007970 <_vfiprintf_r+0x22c>)
 8007926:	a904      	add	r1, sp, #16
 8007928:	4630      	mov	r0, r6
 800792a:	f3af 8000 	nop.w
 800792e:	4607      	mov	r7, r0
 8007930:	1c78      	adds	r0, r7, #1
 8007932:	d1d6      	bne.n	80078e2 <_vfiprintf_r+0x19e>
 8007934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007936:	07d9      	lsls	r1, r3, #31
 8007938:	d405      	bmi.n	8007946 <_vfiprintf_r+0x202>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	059a      	lsls	r2, r3, #22
 800793e:	d402      	bmi.n	8007946 <_vfiprintf_r+0x202>
 8007940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007942:	f7fc fe9c 	bl	800467e <__retarget_lock_release_recursive>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	065b      	lsls	r3, r3, #25
 800794a:	f53f af1d 	bmi.w	8007788 <_vfiprintf_r+0x44>
 800794e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007950:	e71c      	b.n	800778c <_vfiprintf_r+0x48>
 8007952:	ab03      	add	r3, sp, #12
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	462a      	mov	r2, r5
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <_vfiprintf_r+0x22c>)
 800795a:	a904      	add	r1, sp, #16
 800795c:	4630      	mov	r0, r6
 800795e:	f7fe f9bd 	bl	8005cdc <_printf_i>
 8007962:	e7e4      	b.n	800792e <_vfiprintf_r+0x1ea>
 8007964:	08007df1 	.word	0x08007df1
 8007968:	08007dfb 	.word	0x08007dfb
 800796c:	00000000 	.word	0x00000000
 8007970:	08007721 	.word	0x08007721
 8007974:	08007df7 	.word	0x08007df7

08007978 <__swbuf_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	460e      	mov	r6, r1
 800797c:	4614      	mov	r4, r2
 800797e:	4605      	mov	r5, r0
 8007980:	b118      	cbz	r0, 800798a <__swbuf_r+0x12>
 8007982:	6a03      	ldr	r3, [r0, #32]
 8007984:	b90b      	cbnz	r3, 800798a <__swbuf_r+0x12>
 8007986:	f7fc fd39 	bl	80043fc <__sinit>
 800798a:	69a3      	ldr	r3, [r4, #24]
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	071a      	lsls	r2, r3, #28
 8007992:	d525      	bpl.n	80079e0 <__swbuf_r+0x68>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	b31b      	cbz	r3, 80079e0 <__swbuf_r+0x68>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	6922      	ldr	r2, [r4, #16]
 800799c:	1a98      	subs	r0, r3, r2
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	b2f6      	uxtb	r6, r6
 80079a2:	4283      	cmp	r3, r0
 80079a4:	4637      	mov	r7, r6
 80079a6:	dc04      	bgt.n	80079b2 <__swbuf_r+0x3a>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	f7fe fc8c 	bl	80062c8 <_fflush_r>
 80079b0:	b9e0      	cbnz	r0, 80079ec <__swbuf_r+0x74>
 80079b2:	68a3      	ldr	r3, [r4, #8]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	60a3      	str	r3, [r4, #8]
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	6022      	str	r2, [r4, #0]
 80079be:	701e      	strb	r6, [r3, #0]
 80079c0:	6962      	ldr	r2, [r4, #20]
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d004      	beq.n	80079d2 <__swbuf_r+0x5a>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	07db      	lsls	r3, r3, #31
 80079cc:	d506      	bpl.n	80079dc <__swbuf_r+0x64>
 80079ce:	2e0a      	cmp	r6, #10
 80079d0:	d104      	bne.n	80079dc <__swbuf_r+0x64>
 80079d2:	4621      	mov	r1, r4
 80079d4:	4628      	mov	r0, r5
 80079d6:	f7fe fc77 	bl	80062c8 <_fflush_r>
 80079da:	b938      	cbnz	r0, 80079ec <__swbuf_r+0x74>
 80079dc:	4638      	mov	r0, r7
 80079de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e0:	4621      	mov	r1, r4
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 f806 	bl	80079f4 <__swsetup_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d0d5      	beq.n	8007998 <__swbuf_r+0x20>
 80079ec:	f04f 37ff 	mov.w	r7, #4294967295
 80079f0:	e7f4      	b.n	80079dc <__swbuf_r+0x64>
	...

080079f4 <__swsetup_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4b2a      	ldr	r3, [pc, #168]	; (8007aa0 <__swsetup_r+0xac>)
 80079f8:	4605      	mov	r5, r0
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	460c      	mov	r4, r1
 80079fe:	b118      	cbz	r0, 8007a08 <__swsetup_r+0x14>
 8007a00:	6a03      	ldr	r3, [r0, #32]
 8007a02:	b90b      	cbnz	r3, 8007a08 <__swsetup_r+0x14>
 8007a04:	f7fc fcfa 	bl	80043fc <__sinit>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a0e:	0718      	lsls	r0, r3, #28
 8007a10:	d422      	bmi.n	8007a58 <__swsetup_r+0x64>
 8007a12:	06d9      	lsls	r1, r3, #27
 8007a14:	d407      	bmi.n	8007a26 <__swsetup_r+0x32>
 8007a16:	2309      	movs	r3, #9
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	e034      	b.n	8007a90 <__swsetup_r+0x9c>
 8007a26:	0758      	lsls	r0, r3, #29
 8007a28:	d512      	bpl.n	8007a50 <__swsetup_r+0x5c>
 8007a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a2c:	b141      	cbz	r1, 8007a40 <__swsetup_r+0x4c>
 8007a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a32:	4299      	cmp	r1, r3
 8007a34:	d002      	beq.n	8007a3c <__swsetup_r+0x48>
 8007a36:	4628      	mov	r0, r5
 8007a38:	f7fc fe28 	bl	800468c <_free_r>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a46:	81a3      	strh	r3, [r4, #12]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6063      	str	r3, [r4, #4]
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f043 0308 	orr.w	r3, r3, #8
 8007a56:	81a3      	strh	r3, [r4, #12]
 8007a58:	6923      	ldr	r3, [r4, #16]
 8007a5a:	b94b      	cbnz	r3, 8007a70 <__swsetup_r+0x7c>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a66:	d003      	beq.n	8007a70 <__swsetup_r+0x7c>
 8007a68:	4621      	mov	r1, r4
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f000 f884 	bl	8007b78 <__smakebuf_r>
 8007a70:	89a0      	ldrh	r0, [r4, #12]
 8007a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a76:	f010 0301 	ands.w	r3, r0, #1
 8007a7a:	d00a      	beq.n	8007a92 <__swsetup_r+0x9e>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60a3      	str	r3, [r4, #8]
 8007a80:	6963      	ldr	r3, [r4, #20]
 8007a82:	425b      	negs	r3, r3
 8007a84:	61a3      	str	r3, [r4, #24]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	b943      	cbnz	r3, 8007a9c <__swsetup_r+0xa8>
 8007a8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a8e:	d1c4      	bne.n	8007a1a <__swsetup_r+0x26>
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
 8007a92:	0781      	lsls	r1, r0, #30
 8007a94:	bf58      	it	pl
 8007a96:	6963      	ldrpl	r3, [r4, #20]
 8007a98:	60a3      	str	r3, [r4, #8]
 8007a9a:	e7f4      	b.n	8007a86 <__swsetup_r+0x92>
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	e7f7      	b.n	8007a90 <__swsetup_r+0x9c>
 8007aa0:	20000064 	.word	0x20000064

08007aa4 <_raise_r>:
 8007aa4:	291f      	cmp	r1, #31
 8007aa6:	b538      	push	{r3, r4, r5, lr}
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	460d      	mov	r5, r1
 8007aac:	d904      	bls.n	8007ab8 <_raise_r+0x14>
 8007aae:	2316      	movs	r3, #22
 8007ab0:	6003      	str	r3, [r0, #0]
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007aba:	b112      	cbz	r2, 8007ac2 <_raise_r+0x1e>
 8007abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ac0:	b94b      	cbnz	r3, 8007ad6 <_raise_r+0x32>
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f830 	bl	8007b28 <_getpid_r>
 8007ac8:	462a      	mov	r2, r5
 8007aca:	4601      	mov	r1, r0
 8007acc:	4620      	mov	r0, r4
 8007ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ad2:	f000 b817 	b.w	8007b04 <_kill_r>
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d00a      	beq.n	8007af0 <_raise_r+0x4c>
 8007ada:	1c59      	adds	r1, r3, #1
 8007adc:	d103      	bne.n	8007ae6 <_raise_r+0x42>
 8007ade:	2316      	movs	r3, #22
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	2001      	movs	r0, #1
 8007ae4:	e7e7      	b.n	8007ab6 <_raise_r+0x12>
 8007ae6:	2400      	movs	r4, #0
 8007ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007aec:	4628      	mov	r0, r5
 8007aee:	4798      	blx	r3
 8007af0:	2000      	movs	r0, #0
 8007af2:	e7e0      	b.n	8007ab6 <_raise_r+0x12>

08007af4 <raise>:
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <raise+0xc>)
 8007af6:	4601      	mov	r1, r0
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	f7ff bfd3 	b.w	8007aa4 <_raise_r>
 8007afe:	bf00      	nop
 8007b00:	20000064 	.word	0x20000064

08007b04 <_kill_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d07      	ldr	r5, [pc, #28]	; (8007b24 <_kill_r+0x20>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	4611      	mov	r1, r2
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	f7f9 fc71 	bl	80013f8 <_kill>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d102      	bne.n	8007b20 <_kill_r+0x1c>
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	b103      	cbz	r3, 8007b20 <_kill_r+0x1c>
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	bd38      	pop	{r3, r4, r5, pc}
 8007b22:	bf00      	nop
 8007b24:	2000040c 	.word	0x2000040c

08007b28 <_getpid_r>:
 8007b28:	f7f9 bc5e 	b.w	80013e8 <_getpid>

08007b2c <__swhatbuf_r>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b34:	2900      	cmp	r1, #0
 8007b36:	b096      	sub	sp, #88	; 0x58
 8007b38:	4615      	mov	r5, r2
 8007b3a:	461e      	mov	r6, r3
 8007b3c:	da0d      	bge.n	8007b5a <__swhatbuf_r+0x2e>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b44:	f04f 0100 	mov.w	r1, #0
 8007b48:	bf0c      	ite	eq
 8007b4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b4e:	2340      	movne	r3, #64	; 0x40
 8007b50:	2000      	movs	r0, #0
 8007b52:	6031      	str	r1, [r6, #0]
 8007b54:	602b      	str	r3, [r5, #0]
 8007b56:	b016      	add	sp, #88	; 0x58
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
 8007b5a:	466a      	mov	r2, sp
 8007b5c:	f000 f848 	bl	8007bf0 <_fstat_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	dbec      	blt.n	8007b3e <__swhatbuf_r+0x12>
 8007b64:	9901      	ldr	r1, [sp, #4]
 8007b66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b6e:	4259      	negs	r1, r3
 8007b70:	4159      	adcs	r1, r3
 8007b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b76:	e7eb      	b.n	8007b50 <__swhatbuf_r+0x24>

08007b78 <__smakebuf_r>:
 8007b78:	898b      	ldrh	r3, [r1, #12]
 8007b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b7c:	079d      	lsls	r5, r3, #30
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	d507      	bpl.n	8007b94 <__smakebuf_r+0x1c>
 8007b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	6163      	str	r3, [r4, #20]
 8007b90:	b002      	add	sp, #8
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	ab01      	add	r3, sp, #4
 8007b96:	466a      	mov	r2, sp
 8007b98:	f7ff ffc8 	bl	8007b2c <__swhatbuf_r>
 8007b9c:	9900      	ldr	r1, [sp, #0]
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7fc fddf 	bl	8004764 <_malloc_r>
 8007ba6:	b948      	cbnz	r0, 8007bbc <__smakebuf_r+0x44>
 8007ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bac:	059a      	lsls	r2, r3, #22
 8007bae:	d4ef      	bmi.n	8007b90 <__smakebuf_r+0x18>
 8007bb0:	f023 0303 	bic.w	r3, r3, #3
 8007bb4:	f043 0302 	orr.w	r3, r3, #2
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	e7e3      	b.n	8007b84 <__smakebuf_r+0xc>
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	6020      	str	r0, [r4, #0]
 8007bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	9b00      	ldr	r3, [sp, #0]
 8007bc8:	6163      	str	r3, [r4, #20]
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	6120      	str	r0, [r4, #16]
 8007bce:	b15b      	cbz	r3, 8007be8 <__smakebuf_r+0x70>
 8007bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 f81d 	bl	8007c14 <_isatty_r>
 8007bda:	b128      	cbz	r0, 8007be8 <__smakebuf_r+0x70>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f023 0303 	bic.w	r3, r3, #3
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	431d      	orrs	r5, r3
 8007bec:	81a5      	strh	r5, [r4, #12]
 8007bee:	e7cf      	b.n	8007b90 <__smakebuf_r+0x18>

08007bf0 <_fstat_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d07      	ldr	r5, [pc, #28]	; (8007c10 <_fstat_r+0x20>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	602b      	str	r3, [r5, #0]
 8007bfe:	f7f9 fc5a 	bl	80014b6 <_fstat>
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	d102      	bne.n	8007c0c <_fstat_r+0x1c>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	b103      	cbz	r3, 8007c0c <_fstat_r+0x1c>
 8007c0a:	6023      	str	r3, [r4, #0]
 8007c0c:	bd38      	pop	{r3, r4, r5, pc}
 8007c0e:	bf00      	nop
 8007c10:	2000040c 	.word	0x2000040c

08007c14 <_isatty_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d06      	ldr	r5, [pc, #24]	; (8007c30 <_isatty_r+0x1c>)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	602b      	str	r3, [r5, #0]
 8007c20:	f7f9 fc59 	bl	80014d6 <_isatty>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	d102      	bne.n	8007c2e <_isatty_r+0x1a>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	b103      	cbz	r3, 8007c2e <_isatty_r+0x1a>
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	2000040c 	.word	0x2000040c

08007c34 <_init>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr

08007c40 <_fini>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr
