
maix_to_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007bf0  08007bf0  00017bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008000  08008000  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008008  08008008  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001d4  080081e4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080081e4  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a10  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f9  00000000  00000000  00028c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  0002a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005af  00000000  00000000  0002acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163a2  00000000  00000000  0002b27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000097e3  00000000  00000000  00041621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087346  00000000  00000000  0004ae04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003358  00000000  00000000  000d214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000d54a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bd4 	.word	0x08007bd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007bd4 	.word	0x08007bd4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a6 	b.w	8000fac <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9e08      	ldr	r6, [sp, #32]
 8000cea:	460d      	mov	r5, r1
 8000cec:	4604      	mov	r4, r0
 8000cee:	460f      	mov	r7, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <__udivmoddi4+0xa6>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4694      	mov	ip, r2
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0xe2>
 8000cfa:	fab2 f382 	clz	r3, r2
 8000cfe:	b143      	cbz	r3, 8000d12 <__udivmoddi4+0x2e>
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	f1c3 0220 	rsb	r2, r3, #32
 8000d08:	409f      	lsls	r7, r3
 8000d0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	409c      	lsls	r4, r3
 8000d12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d16:	fa1f f58c 	uxth.w	r5, ip
 8000d1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d1e:	0c22      	lsrs	r2, r4, #16
 8000d20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d28:	fb01 f005 	mul.w	r0, r1, r5
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x62>
 8000d30:	eb1c 0202 	adds.w	r2, ip, r2
 8000d34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d38:	f080 811c 	bcs.w	8000f74 <__udivmoddi4+0x290>
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	f240 8119 	bls.w	8000f74 <__udivmoddi4+0x290>
 8000d42:	3902      	subs	r1, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a12      	subs	r2, r2, r0
 8000d48:	b2a4      	uxth	r4, r4
 8000d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d56:	fb00 f505 	mul.w	r5, r0, r5
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	d90a      	bls.n	8000d74 <__udivmoddi4+0x90>
 8000d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x294>
 8000d6a:	42a5      	cmp	r5, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x294>
 8000d70:	4464      	add	r4, ip
 8000d72:	3802      	subs	r0, #2
 8000d74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	b11e      	cbz	r6, 8000d86 <__udivmoddi4+0xa2>
 8000d7e:	40dc      	lsrs	r4, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	e9c6 4300 	strd	r4, r3, [r6]
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0xbc>
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f000 80ed 	beq.w	8000f6e <__udivmoddi4+0x28a>
 8000d94:	2100      	movs	r1, #0
 8000d96:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	fab3 f183 	clz	r1, r3
 8000da4:	2900      	cmp	r1, #0
 8000da6:	d149      	bne.n	8000e3c <__udivmoddi4+0x158>
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d302      	bcc.n	8000db2 <__udivmoddi4+0xce>
 8000dac:	4282      	cmp	r2, r0
 8000dae:	f200 80f8 	bhi.w	8000fa2 <__udivmoddi4+0x2be>
 8000db2:	1a84      	subs	r4, r0, r2
 8000db4:	eb65 0203 	sbc.w	r2, r5, r3
 8000db8:	2001      	movs	r0, #1
 8000dba:	4617      	mov	r7, r2
 8000dbc:	2e00      	cmp	r6, #0
 8000dbe:	d0e2      	beq.n	8000d86 <__udivmoddi4+0xa2>
 8000dc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc4:	e7df      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000dc6:	b902      	cbnz	r2, 8000dca <__udivmoddi4+0xe6>
 8000dc8:	deff      	udf	#255	; 0xff
 8000dca:	fab2 f382 	clz	r3, r2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 8090 	bne.w	8000ef4 <__udivmoddi4+0x210>
 8000dd4:	1a8a      	subs	r2, r1, r2
 8000dd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dda:	fa1f fe8c 	uxth.w	lr, ip
 8000dde:	2101      	movs	r1, #1
 8000de0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de4:	fb07 2015 	mls	r0, r7, r5, r2
 8000de8:	0c22      	lsrs	r2, r4, #16
 8000dea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dee:	fb0e f005 	mul.w	r0, lr, r5
 8000df2:	4290      	cmp	r0, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x124>
 8000df6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x122>
 8000e00:	4290      	cmp	r0, r2
 8000e02:	f200 80cb 	bhi.w	8000f9c <__udivmoddi4+0x2b8>
 8000e06:	4645      	mov	r5, r8
 8000e08:	1a12      	subs	r2, r2, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e10:	fb07 2210 	mls	r2, r7, r0, r2
 8000e14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e18:	fb0e fe00 	mul.w	lr, lr, r0
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x14e>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e28:	d202      	bcs.n	8000e30 <__udivmoddi4+0x14c>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	f200 80bb 	bhi.w	8000fa6 <__udivmoddi4+0x2c2>
 8000e30:	4610      	mov	r0, r2
 8000e32:	eba4 040e 	sub.w	r4, r4, lr
 8000e36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3a:	e79f      	b.n	8000d7c <__udivmoddi4+0x98>
 8000e3c:	f1c1 0720 	rsb	r7, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e52:	40fd      	lsrs	r5, r7
 8000e54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e58:	4323      	orrs	r3, r4
 8000e5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e5e:	fa1f fe8c 	uxth.w	lr, ip
 8000e62:	fb09 5518 	mls	r5, r9, r8, r5
 8000e66:	0c1c      	lsrs	r4, r3, #16
 8000e68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7a:	d90b      	bls.n	8000e94 <__udivmoddi4+0x1b0>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e84:	f080 8088 	bcs.w	8000f98 <__udivmoddi4+0x2b4>
 8000e88:	42a5      	cmp	r5, r4
 8000e8a:	f240 8085 	bls.w	8000f98 <__udivmoddi4+0x2b4>
 8000e8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e92:	4464      	add	r4, ip
 8000e94:	1b64      	subs	r4, r4, r5
 8000e96:	b29d      	uxth	r5, r3
 8000e98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x1da>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb4:	d26c      	bcs.n	8000f90 <__udivmoddi4+0x2ac>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	d96a      	bls.n	8000f90 <__udivmoddi4+0x2ac>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	46c8      	mov	r8, r9
 8000ece:	46ae      	mov	lr, r5
 8000ed0:	d356      	bcc.n	8000f80 <__udivmoddi4+0x29c>
 8000ed2:	d053      	beq.n	8000f7c <__udivmoddi4+0x298>
 8000ed4:	b156      	cbz	r6, 8000eec <__udivmoddi4+0x208>
 8000ed6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eda:	eb64 040e 	sbc.w	r4, r4, lr
 8000ede:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee2:	40ca      	lsrs	r2, r1
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	4317      	orrs	r7, r2
 8000ee8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eec:	4618      	mov	r0, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef4:	f1c3 0120 	rsb	r1, r3, #32
 8000ef8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000efc:	fa20 f201 	lsr.w	r2, r0, r1
 8000f00:	fa25 f101 	lsr.w	r1, r5, r1
 8000f04:	409d      	lsls	r5, r3
 8000f06:	432a      	orrs	r2, r5
 8000f08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f14:	fb07 1510 	mls	r5, r7, r0, r1
 8000f18:	0c11      	lsrs	r1, r2, #16
 8000f1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f22:	428d      	cmp	r5, r1
 8000f24:	fa04 f403 	lsl.w	r4, r4, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x258>
 8000f2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f32:	d22f      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f34:	428d      	cmp	r5, r1
 8000f36:	d92d      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1b49      	subs	r1, r1, r5
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f44:	fb07 1115 	mls	r1, r7, r5, r1
 8000f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f50:	4291      	cmp	r1, r2
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x282>
 8000f54:	eb1c 0202 	adds.w	r2, ip, r2
 8000f58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f5c:	d216      	bcs.n	8000f8c <__udivmoddi4+0x2a8>
 8000f5e:	4291      	cmp	r1, r2
 8000f60:	d914      	bls.n	8000f8c <__udivmoddi4+0x2a8>
 8000f62:	3d02      	subs	r5, #2
 8000f64:	4462      	add	r2, ip
 8000f66:	1a52      	subs	r2, r2, r1
 8000f68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f6c:	e738      	b.n	8000de0 <__udivmoddi4+0xfc>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e708      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000f74:	4639      	mov	r1, r7
 8000f76:	e6e6      	b.n	8000d46 <__udivmoddi4+0x62>
 8000f78:	4610      	mov	r0, r2
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x90>
 8000f7c:	4548      	cmp	r0, r9
 8000f7e:	d2a9      	bcs.n	8000ed4 <__udivmoddi4+0x1f0>
 8000f80:	ebb9 0802 	subs.w	r8, r9, r2
 8000f84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	e7a3      	b.n	8000ed4 <__udivmoddi4+0x1f0>
 8000f8c:	4645      	mov	r5, r8
 8000f8e:	e7ea      	b.n	8000f66 <__udivmoddi4+0x282>
 8000f90:	462b      	mov	r3, r5
 8000f92:	e794      	b.n	8000ebe <__udivmoddi4+0x1da>
 8000f94:	4640      	mov	r0, r8
 8000f96:	e7d1      	b.n	8000f3c <__udivmoddi4+0x258>
 8000f98:	46d0      	mov	r8, sl
 8000f9a:	e77b      	b.n	8000e94 <__udivmoddi4+0x1b0>
 8000f9c:	3d02      	subs	r5, #2
 8000f9e:	4462      	add	r2, ip
 8000fa0:	e732      	b.n	8000e08 <__udivmoddi4+0x124>
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	e70a      	b.n	8000dbc <__udivmoddi4+0xd8>
 8000fa6:	4464      	add	r4, ip
 8000fa8:	3802      	subs	r0, #2
 8000faa:	e742      	b.n	8000e32 <__udivmoddi4+0x14e>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f000 fb04 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f810 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 f8c0 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc0:	f000 f89e 	bl	8001100 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 f872 	bl	80010ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, RxData, 10);
 8000fc8:	220a      	movs	r2, #10
 8000fca:	4902      	ldr	r1, [pc, #8]	; (8000fd4 <main+0x24>)
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <main+0x28>)
 8000fce:	f001 fea6 	bl	8002d1e <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x22>
 8000fd4:	20000294 	.word	0x20000294
 8000fd8:	200001f0 	.word	0x200001f0

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fa9d 	bl	800452a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <SystemClock_Config+0xc8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <SystemClock_Config+0xc8>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <SystemClock_Config+0xc8>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <SystemClock_Config+0xcc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <SystemClock_Config+0xcc>)
 8001026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <SystemClock_Config+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f9b7 	bl	80023d4 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106c:	f000 f8b8 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2103      	movs	r1, #3
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fc19 	bl	80028c4 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001098:	f000 f8a2 	bl	80011e0 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3750      	adds	r7, #80	; 0x50
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART1_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f001 fdce 	bl	8002c84 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f877 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001f0 	.word	0x200001f0
 80010fc:	40011000 	.word	0x40011000

08001100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_DMA_Init+0x3c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <MX_DMA_Init+0x3c>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_DMA_Init+0x3c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	203a      	movs	r0, #58	; 0x3a
 8001128:	f000 fb97 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800112c:	203a      	movs	r0, #58	; 0x3a
 800112e:	f000 fbb0 	bl	8001892 <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_GPIO_Init+0x4c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_GPIO_Init+0x4c>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_GPIO_Init+0x4c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_GPIO_Init+0x4c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <MX_GPIO_Init+0x4c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_GPIO_Init+0x4c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
	countfull++;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_UART_RxCpltCallback+0x34>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_UART_RxCpltCallback+0x34>)
 80011a0:	6013      	str	r3, [r2, #0]
	sscanf(RxData, "(%d,%d,%d)", &x_coordinate, &y_coordinate, &area);
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_UART_RxCpltCallback+0x38>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_UART_RxCpltCallback+0x3c>)
 80011a8:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_UART_RxCpltCallback+0x40>)
 80011aa:	490a      	ldr	r1, [pc, #40]	; (80011d4 <HAL_UART_RxCpltCallback+0x44>)
 80011ac:	480a      	ldr	r0, [pc, #40]	; (80011d8 <HAL_UART_RxCpltCallback+0x48>)
 80011ae:	f003 f94b 	bl	8004448 <siscanf>
	HAL_UART_Receive_DMA(&huart1, RxData, 10);
 80011b2:	220a      	movs	r2, #10
 80011b4:	4908      	ldr	r1, [pc, #32]	; (80011d8 <HAL_UART_RxCpltCallback+0x48>)
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_UART_RxCpltCallback+0x4c>)
 80011b8:	f001 fdb1 	bl	8002d1e <HAL_UART_Receive_DMA>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002a0 	.word	0x200002a0
 80011c8:	200002ac 	.word	0x200002ac
 80011cc:	200002a8 	.word	0x200002a8
 80011d0:	200002a4 	.word	0x200002a4
 80011d4:	08007bf0 	.word	0x08007bf0
 80011d8:	20000294 	.word	0x20000294
 80011dc:	200001f0 	.word	0x200001f0

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_MspInit+0x4c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x4c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a34      	ldr	r2, [pc, #208]	; (800132c <HAL_UART_MspInit+0xf0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d162      	bne.n	8001324 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <HAL_UART_MspInit+0xf4>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_UART_MspInit+0xf4>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_UART_MspInit+0xf4>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <HAL_UART_MspInit+0xf4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a2b      	ldr	r2, [pc, #172]	; (8001330 <HAL_UART_MspInit+0xf4>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_UART_MspInit+0xf4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001296:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a8:	2307      	movs	r3, #7
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4820      	ldr	r0, [pc, #128]	; (8001334 <HAL_UART_MspInit+0xf8>)
 80012b4:	f000 ff0a 	bl	80020cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012ba:	4a20      	ldr	r2, [pc, #128]	; (800133c <HAL_UART_MspInit+0x100>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012f8:	480f      	ldr	r0, [pc, #60]	; (8001338 <HAL_UART_MspInit+0xfc>)
 80012fa:	f000 fae5 	bl	80018c8 <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001304:	f7ff ff6c 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_UART_MspInit+0xfc>)
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_UART_MspInit+0xfc>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2025      	movs	r0, #37	; 0x25
 800131a:	f000 fa9e 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800131e:	2025      	movs	r0, #37	; 0x25
 8001320:	f000 fab7 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40011000 	.word	0x40011000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	20000234 	.word	0x20000234
 800133c:	40026440 	.word	0x40026440

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f96a 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <USART1_IRQHandler+0x10>)
 800139a:	f001 fcf1 	bl	8002d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200001f0 	.word	0x200001f0

080013a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Stream2_IRQHandler+0x10>)
 80013ae:	f000 fc23 	bl	8001bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000234 	.word	0x20000234

080013bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_kill>:

int _kill(int pid, int sig)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013d6:	f003 f8f7 	bl	80045c8 <__errno>
 80013da:	4603      	mov	r3, r0
 80013dc:	2216      	movs	r2, #22
 80013de:	601a      	str	r2, [r3, #0]
  return -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_exit>:

void _exit (int status)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ffe7 	bl	80013cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80013fe:	e7fe      	b.n	80013fe <_exit+0x12>

08001400 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	e00a      	b.n	8001428 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001412:	f3af 8000 	nop.w
 8001416:	4601      	mov	r1, r0
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	b2ca      	uxtb	r2, r1
 8001420:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf0      	blt.n	8001412 <_read+0x12>
  }

  return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e009      	b.n	8001460 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	60ba      	str	r2, [r7, #8]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbf1      	blt.n	800144c <_write+0x12>
  }
  return len;
 8001468:	687b      	ldr	r3, [r7, #4]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_close>:

int _close(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149a:	605a      	str	r2, [r3, #4]
  return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_isatty>:

int _isatty(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f003 f85c 	bl	80045c8 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20020000 	.word	0x20020000
 800153c:	00000400 	.word	0x00000400
 8001540:	200002b0 	.word	0x200002b0
 8001544:	20000408 	.word	0x20000408

08001548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <SystemInit+0x20>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <SystemInit+0x20>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001572:	490e      	ldr	r1, [pc, #56]	; (80015ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001588:	4c0b      	ldr	r4, [pc, #44]	; (80015b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001596:	f7ff ffd7 	bl	8001548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f003 f81b 	bl	80045d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff fd07 	bl	8000fb0 <main>
  bx  lr    
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015b0:	08008010 	.word	0x08008010
  ldr r2, =_sbss
 80015b4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015b8:	20000404 	.word	0x20000404

080015bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_Init+0x40>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_Init+0x40>)
 80015d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x40>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f92b 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fdfa 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f943 	bl	80018ae <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f90b 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008
 8001688:	200002b4 	.word	0x200002b4

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200002b4 	.word	0x200002b4

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff29 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff3e 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff31 	bl	8001708 <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa2 	bl	8001800 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff feda 	bl	800168c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e099      	b.n	8001a18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001904:	e00f      	b.n	8001926 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001906:	f7ff fec1 	bl	800168c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b05      	cmp	r3, #5
 8001912:	d908      	bls.n	8001926 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e078      	b.n	8001a18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e8      	bne.n	8001906 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_DMA_Init+0x158>)
 8001940:	4013      	ands	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2b04      	cmp	r3, #4
 800197e:	d107      	bne.n	8001990 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4313      	orrs	r3, r2
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f023 0307 	bic.w	r3, r3, #7
 80019a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d117      	bne.n	80019ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00e      	beq.n	80019ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fb01 	bl	8001fd4 <DMA_CheckFifoParam>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2240      	movs	r2, #64	; 0x40
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019e6:	2301      	movs	r3, #1
 80019e8:	e016      	b.n	8001a18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fab8 	bl	8001f68 <DMA_CalcBaseAndBitshift>
 80019f8:	4603      	mov	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	223f      	movs	r2, #63	; 0x3f
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	f010803f 	.word	0xf010803f

08001a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Start_IT+0x26>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e040      	b.n	8001acc <HAL_DMA_Start_IT+0xa8>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d12f      	bne.n	8001abe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2202      	movs	r2, #2
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fa4a 	bl	8001f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	223f      	movs	r2, #63	; 0x3f
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0216 	orr.w	r2, r2, #22
 8001a92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0208 	orr.w	r2, r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e005      	b.n	8001aca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ae2:	f7ff fdd3 	bl	800168c <HAL_GetTick>
 8001ae6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d008      	beq.n	8001b06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e052      	b.n	8001bac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0216 	bic.w	r2, r2, #22
 8001b14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <HAL_DMA_Abort+0x62>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0208 	bic.w	r2, r2, #8
 8001b44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b56:	e013      	b.n	8001b80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b58:	f7ff fd98 	bl	800168c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d90c      	bls.n	8001b80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e015      	b.n	8001bac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1e4      	bne.n	8001b58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	223f      	movs	r2, #63	; 0x3f
 8001b94:	409a      	lsls	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00c      	b.n	8001bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c04:	4b8e      	ldr	r3, [pc, #568]	; (8001e40 <HAL_DMA_IRQHandler+0x248>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a8e      	ldr	r2, [pc, #568]	; (8001e44 <HAL_DMA_IRQHandler+0x24c>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	2208      	movs	r2, #8
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01a      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0204 	bic.w	r2, r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	2208      	movs	r2, #8
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	2201      	movs	r2, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d012      	beq.n	8001c9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	2201      	movs	r2, #1
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d012      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	f043 0204 	orr.w	r2, r3, #4
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d043      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03c      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d018      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d108      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d024      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
 8001d26:	e01f      	b.n	8001d68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
 8001d38:	e016      	b.n	8001d68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0208 	bic.w	r2, r2, #8
 8001d56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 808f 	beq.w	8001e98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8087 	beq.w	8001e98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2220      	movs	r2, #32
 8001d90:	409a      	lsls	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d136      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0216 	bic.w	r2, r2, #22
 8001db0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <HAL_DMA_IRQHandler+0x1da>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0208 	bic.w	r2, r2, #8
 8001de0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	223f      	movs	r2, #63	; 0x3f
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d07e      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
        }
        return;
 8001e0e:	e079      	b.n	8001f04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01d      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10d      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d031      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e02c      	b.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000
 8001e44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d023      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
 8001e58:	e01e      	b.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10f      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d032      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d022      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2205      	movs	r2, #5
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d307      	bcc.n	8001ee0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f2      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x2cc>
 8001ede:	e000      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ee0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f04:	bf00      	nop
    }
  }
}
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d108      	bne.n	8001f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f4a:	e007      	b.n	8001f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	3b10      	subs	r3, #16
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <DMA_CalcBaseAndBitshift+0x64>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d909      	bls.n	8001faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	1d1a      	adds	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fa8:	e007      	b.n	8001fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	aaaaaaab 	.word	0xaaaaaaab
 8001fd0:	08007c20 	.word	0x08007c20

08001fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11f      	bne.n	800202e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d856      	bhi.n	80020a2 <DMA_CheckFifoParam+0xce>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <DMA_CheckFifoParam+0x28>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	0800201f 	.word	0x0800201f
 8002004:	0800200d 	.word	0x0800200d
 8002008:	080020a3 	.word	0x080020a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d046      	beq.n	80020a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201c:	e043      	b.n	80020a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002026:	d140      	bne.n	80020aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800202c:	e03d      	b.n	80020aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002036:	d121      	bne.n	800207c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d837      	bhi.n	80020ae <DMA_CheckFifoParam+0xda>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <DMA_CheckFifoParam+0x70>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002055 	.word	0x08002055
 8002048:	0800205b 	.word	0x0800205b
 800204c:	08002055 	.word	0x08002055
 8002050:	0800206d 	.word	0x0800206d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      break;
 8002058:	e030      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d025      	beq.n	80020b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206a:	e022      	b.n	80020b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002074:	d11f      	bne.n	80020b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800207a:	e01c      	b.n	80020b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d903      	bls.n	800208a <DMA_CheckFifoParam+0xb6>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d003      	beq.n	8002090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002088:	e018      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      break;
 800208e:	e015      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      break;
 80020a0:	e00b      	b.n	80020ba <DMA_CheckFifoParam+0xe6>
      break;
 80020a2:	bf00      	nop
 80020a4:	e00a      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
 80020a8:	e008      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      break;
 80020aa:	bf00      	nop
 80020ac:	e006      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      break;
 80020ae:	bf00      	nop
 80020b0:	e004      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      break;
 80020b2:	bf00      	nop
 80020b4:	e002      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      break;   
 80020b6:	bf00      	nop
 80020b8:	e000      	b.n	80020bc <DMA_CheckFifoParam+0xe8>
      break;
 80020ba:	bf00      	nop
    }
  } 
  
  return status; 
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e159      	b.n	800239c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 8148 	bne.w	8002396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d005      	beq.n	800211e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	2b02      	cmp	r3, #2
 800211c:	d130      	bne.n	8002180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0201 	and.w	r2, r3, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b03      	cmp	r3, #3
 800218a:	d017      	beq.n	80021bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d123      	bne.n	8002210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80a2 	beq.w	8002396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <HAL_GPIO_Init+0x2e8>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4a56      	ldr	r2, [pc, #344]	; (80023b4 <HAL_GPIO_Init+0x2e8>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	6453      	str	r3, [r2, #68]	; 0x44
 8002262:	4b54      	ldr	r3, [pc, #336]	; (80023b4 <HAL_GPIO_Init+0x2e8>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <HAL_GPIO_Init+0x2ec>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a49      	ldr	r2, [pc, #292]	; (80023bc <HAL_GPIO_Init+0x2f0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x202>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a48      	ldr	r2, [pc, #288]	; (80023c0 <HAL_GPIO_Init+0x2f4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x1fe>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a47      	ldr	r2, [pc, #284]	; (80023c4 <HAL_GPIO_Init+0x2f8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a46      	ldr	r2, [pc, #280]	; (80023c8 <HAL_GPIO_Init+0x2fc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x1f6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a45      	ldr	r2, [pc, #276]	; (80023cc <HAL_GPIO_Init+0x300>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x1f2>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022be:	2307      	movs	r3, #7
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	; (80023b8 <HAL_GPIO_Init+0x2ec>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_GPIO_Init+0x304>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002312:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <HAL_GPIO_Init+0x304>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_GPIO_Init+0x304>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800233c:	4a24      	ldr	r2, [pc, #144]	; (80023d0 <HAL_GPIO_Init+0x304>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_GPIO_Init+0x304>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002366:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_GPIO_Init+0x304>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_GPIO_Init+0x304>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_GPIO_Init+0x304>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f aea2 	bls.w	80020e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e267      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d075      	beq.n	80024de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f2:	4b88      	ldr	r3, [pc, #544]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4b85      	ldr	r3, [pc, #532]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002406:	2b08      	cmp	r3, #8
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b82      	ldr	r3, [pc, #520]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002416:	d10b      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b7e      	ldr	r3, [pc, #504]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05b      	beq.n	80024dc <HAL_RCC_OscConfig+0x108>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d157      	bne.n	80024dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e242      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x74>
 800243a:	4b76      	ldr	r3, [pc, #472]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a75      	ldr	r2, [pc, #468]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b70      	ldr	r3, [pc, #448]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6f      	ldr	r2, [pc, #444]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6c      	ldr	r2, [pc, #432]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 800246c:	4b69      	ldr	r3, [pc, #420]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a68      	ldr	r2, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b66      	ldr	r3, [pc, #408]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a65      	ldr	r2, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff f8fe 	bl	800168c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff f8fa 	bl	800168c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e207      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b5b      	ldr	r3, [pc, #364]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xc0>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff f8ea 	bl	800168c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff f8e6 	bl	800168c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1f3      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b51      	ldr	r3, [pc, #324]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0xe8>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ea:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b44      	ldr	r3, [pc, #272]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1c7      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_RCC_OscConfig+0x244>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff f89f 	bl	800168c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff f89b 	bl	800168c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1a8      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4925      	ldr	r1, [pc, #148]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_RCC_OscConfig+0x244>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f87e 	bl	800168c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002594:	f7ff f87a 	bl	800168c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e187      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d036      	beq.n	800262c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_RCC_OscConfig+0x248>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7ff f85e 	bl	800168c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d4:	f7ff f85a 	bl	800168c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e167      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x240>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x200>
 80025f2:	e01b      	b.n	800262c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_OscConfig+0x248>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7ff f847 	bl	800168c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	e00e      	b.n	8002620 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002602:	f7ff f843 	bl	800168c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d907      	bls.n	8002620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e150      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
 8002614:	40023800 	.word	0x40023800
 8002618:	42470000 	.word	0x42470000
 800261c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	4b88      	ldr	r3, [pc, #544]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ea      	bne.n	8002602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8097 	beq.w	8002768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b81      	ldr	r3, [pc, #516]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	4b7d      	ldr	r3, [pc, #500]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a7c      	ldr	r2, [pc, #496]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
 800265a:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b77      	ldr	r3, [pc, #476]	; (8002848 <HAL_RCC_OscConfig+0x474>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002676:	4b74      	ldr	r3, [pc, #464]	; (8002848 <HAL_RCC_OscConfig+0x474>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a73      	ldr	r2, [pc, #460]	; (8002848 <HAL_RCC_OscConfig+0x474>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7ff f803 	bl	800168c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe ffff 	bl	800168c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e10c      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_OscConfig+0x474>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x2ea>
 80026b0:	4b64      	ldr	r3, [pc, #400]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a63      	ldr	r2, [pc, #396]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	e01c      	b.n	80026f8 <HAL_RCC_OscConfig+0x324>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x30c>
 80026c6:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a5e      	ldr	r2, [pc, #376]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	4b5c      	ldr	r3, [pc, #368]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a5b      	ldr	r2, [pc, #364]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0x324>
 80026e0:	4b58      	ldr	r3, [pc, #352]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	4a57      	ldr	r2, [pc, #348]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	; 0x70
 80026ec:	4b55      	ldr	r3, [pc, #340]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a54      	ldr	r2, [pc, #336]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 0304 	bic.w	r3, r3, #4
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d015      	beq.n	800272c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe ffc4 	bl	800168c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe ffc0 	bl	800168c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0cb      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271e:	4b49      	ldr	r3, [pc, #292]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ee      	beq.n	8002708 <HAL_RCC_OscConfig+0x334>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7fe ffae 	bl	800168c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe ffaa 	bl	800168c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0b5      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274a:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ee      	bne.n	8002734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002766:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a1 	beq.w	80028b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002772:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b08      	cmp	r3, #8
 800277c:	d05c      	beq.n	8002838 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d141      	bne.n	800280a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_RCC_OscConfig+0x478>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe ff7e 	bl	800168c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe ff7a 	bl	800168c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e087      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	019b      	lsls	r3, r3, #6
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	3b01      	subs	r3, #1
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	491b      	ldr	r1, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x478>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe ff53 	bl	800168c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe ff4f 	bl	800168c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e05c      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x416>
 8002808:	e054      	b.n	80028b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_RCC_OscConfig+0x478>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe ff3c 	bl	800168c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002818:	f7fe ff38 	bl	800168c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e045      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x444>
 8002836:	e03d      	b.n	80028b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e038      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
 8002844:	40023800 	.word	0x40023800
 8002848:	40007000 	.word	0x40007000
 800284c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x4ec>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d028      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d121      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d11a      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002880:	4013      	ands	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002888:	4293      	cmp	r3, r2
 800288a:	d111      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0cc      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d90c      	bls.n	8002900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d044      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d119      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d003      	beq.n	8002982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	2b03      	cmp	r3, #3
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e067      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4934      	ldr	r1, [pc, #208]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fe6a 	bl	800168c <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fe66 	bl	800168c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d20c      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fdca 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08007c08 	.word	0x08007c08
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a94:	b090      	sub	sp, #64	; 0x40
 8002a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	f200 80a1 	bhi.w	8002bfc <HAL_RCC_GetSysClockFreq+0x16c>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac2:	e09b      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ac8:	e09b      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002acc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ace:	e098      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ada:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	2200      	movs	r2, #0
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	627a      	str	r2, [r7, #36]	; 0x24
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002af8:	2100      	movs	r1, #0
 8002afa:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002afc:	fb03 f201 	mul.w	r2, r3, r1
 8002b00:	2300      	movs	r3, #0
 8002b02:	fb00 f303 	mul.w	r3, r0, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	4a43      	ldr	r2, [pc, #268]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b10:	460a      	mov	r2, r1
 8002b12:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b16:	4413      	add	r3, r2
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	61fa      	str	r2, [r7, #28]
 8002b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b2a:	f7fe f88d 	bl	8000c48 <__aeabi_uldivmod>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4613      	mov	r3, r2
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b36:	e053      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	099b      	lsrs	r3, r3, #6
 8002b3e:	2200      	movs	r2, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	617a      	str	r2, [r7, #20]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b4a:	f04f 0b00 	mov.w	fp, #0
 8002b4e:	4652      	mov	r2, sl
 8002b50:	465b      	mov	r3, fp
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	0159      	lsls	r1, r3, #5
 8002b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b60:	0150      	lsls	r0, r2, #5
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	ebb2 080a 	subs.w	r8, r2, sl
 8002b6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b82:	ebb2 0408 	subs.w	r4, r2, r8
 8002b86:	eb63 0509 	sbc.w	r5, r3, r9
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	00eb      	lsls	r3, r5, #3
 8002b94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b98:	00e2      	lsls	r2, r4, #3
 8002b9a:	4614      	mov	r4, r2
 8002b9c:	461d      	mov	r5, r3
 8002b9e:	eb14 030a 	adds.w	r3, r4, sl
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	eb45 030b 	adc.w	r3, r5, fp
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	028b      	lsls	r3, r1, #10
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	028a      	lsls	r2, r1, #10
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd4:	f7fe f838 	bl	8000c48 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3740      	adds	r7, #64	; 0x40
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	017d7840 	.word	0x017d7840

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000000 	.word	0x20000000

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c38:	f7ff fff0 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0a9b      	lsrs	r3, r3, #10
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08007c18 	.word	0x08007c18

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c60:	f7ff ffdc 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0b5b      	lsrs	r3, r3, #13
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08007c18 	.word	0x08007c18

08002c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e03f      	b.n	8002d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fac6 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fe69 	bl	80039a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d11d      	bne.n	8002d74 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_UART_Receive_DMA+0x26>
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e016      	b.n	8002d76 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Receive_DMA+0x38>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e00f      	b.n	8002d76 <HAL_UART_Receive_DMA+0x58>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fbb8 	bl	80034e0 <UART_Start_Receive_DMA>
 8002d70:	4603      	mov	r3, r0
 8002d72:	e000      	b.n	8002d76 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b0ba      	sub	sp, #232	; 0xe8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10f      	bne.n	8002de6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_UART_IRQHandler+0x66>
 8002dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fd23 	bl	800382a <UART_Receive_IT>
      return;
 8002de4:	e256      	b.n	8003294 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80de 	beq.w	8002fac <HAL_UART_IRQHandler+0x22c>
 8002df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d106      	bne.n	8002e0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80d1 	beq.w	8002fac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_UART_IRQHandler+0xae>
 8002e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_UART_IRQHandler+0xd2>
 8002e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f043 0202 	orr.w	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_UART_IRQHandler+0xf6>
 8002e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f043 0204 	orr.w	r2, r3, #4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d011      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x126>
 8002e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0208 	orr.w	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 81ed 	beq.w	800328a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_UART_IRQHandler+0x14e>
 8002ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fcae 	bl	800382a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d103      	bne.n	8002efa <HAL_UART_IRQHandler+0x17a>
 8002ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d04f      	beq.n	8002f9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fbb6 	bl	800366c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d141      	bne.n	8002f92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3314      	adds	r3, #20
 8002f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3314      	adds	r3, #20
 8002f36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1d9      	bne.n	8002f0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d013      	beq.n	8002f8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	4a7d      	ldr	r2, [pc, #500]	; (800315c <HAL_UART_IRQHandler+0x3dc>)
 8002f68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fe20 	bl	8001bb4 <HAL_DMA_Abort_IT>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f84:	4610      	mov	r0, r2
 8002f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	e00e      	b.n	8002fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f99a 	bl	80032c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	e00a      	b.n	8002fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f996 	bl	80032c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	e006      	b.n	8002fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f992 	bl	80032c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fa6:	e170      	b.n	800328a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa8:	bf00      	nop
    return;
 8002faa:	e16e      	b.n	800328a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 814a 	bne.w	800324a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8143 	beq.w	800324a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 813c 	beq.w	800324a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	f040 80b4 	bne.w	8003160 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003004:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8140 	beq.w	800328e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003016:	429a      	cmp	r2, r3
 8003018:	f080 8139 	bcs.w	800328e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003022:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302e:	f000 8088 	beq.w	8003142 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800304c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800305e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800306a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1d9      	bne.n	8003032 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3314      	adds	r3, #20
 8003084:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800308e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3314      	adds	r3, #20
 800309e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e1      	bne.n	800307e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3314      	adds	r3, #20
 80030c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3314      	adds	r3, #20
 80030da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e3      	bne.n	80030ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310a:	e853 3f00 	ldrex	r3, [r3]
 800310e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003112:	f023 0310 	bic.w	r3, r3, #16
 8003116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003124:	65ba      	str	r2, [r7, #88]	; 0x58
 8003126:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800312a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e3      	bne.n	8003100 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fcc9 	bl	8001ad4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800314a:	b29b      	uxth	r3, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8c0 	bl	80032d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003158:	e099      	b.n	800328e <HAL_UART_IRQHandler+0x50e>
 800315a:	bf00      	nop
 800315c:	08003733 	.word	0x08003733
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003168:	b29b      	uxth	r3, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 808b 	beq.w	8003292 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800317c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8086 	beq.w	8003292 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800319c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031aa:	647a      	str	r2, [r7, #68]	; 0x44
 80031ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e3      	bne.n	8003186 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	623b      	str	r3, [r7, #32]
   return(result);
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031e2:	633a      	str	r2, [r7, #48]	; 0x30
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e3      	bne.n	80031be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	60fb      	str	r3, [r7, #12]
   return(result);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003228:	61fa      	str	r2, [r7, #28]
 800322a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	69b9      	ldr	r1, [r7, #24]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	617b      	str	r3, [r7, #20]
   return(result);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e3      	bne.n	8003204 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800323c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f848 	bl	80032d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003248:	e023      	b.n	8003292 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_UART_IRQHandler+0x4ea>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa79 	bl	800375a <UART_Transmit_IT>
    return;
 8003268:	e014      	b.n	8003294 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00e      	beq.n	8003294 <HAL_UART_IRQHandler+0x514>
 8003276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fab9 	bl	80037fa <UART_EndTransmit_IT>
    return;
 8003288:	e004      	b.n	8003294 <HAL_UART_IRQHandler+0x514>
    return;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_UART_IRQHandler+0x514>
      return;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_UART_IRQHandler+0x514>
      return;
 8003292:	bf00      	nop
  }
}
 8003294:	37e8      	adds	r7, #232	; 0xe8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop

0800329c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b09c      	sub	sp, #112	; 0x70
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d172      	bne.n	80033f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800330c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330e:	2200      	movs	r2, #0
 8003310:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	66bb      	str	r3, [r7, #104]	; 0x68
 800332a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003332:	65ba      	str	r2, [r7, #88]	; 0x58
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3314      	adds	r3, #20
 800334c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	667b      	str	r3, [r7, #100]	; 0x64
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003366:	647a      	str	r2, [r7, #68]	; 0x44
 8003368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800336c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e5      	bne.n	8003346 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3314      	adds	r3, #20
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	623b      	str	r3, [r7, #32]
   return(result);
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003390:	663b      	str	r3, [r7, #96]	; 0x60
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800339a:	633a      	str	r2, [r7, #48]	; 0x30
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e5      	bne.n	800337a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d119      	bne.n	80033f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f023 0310 	bic.w	r3, r3, #16
 80033d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033de:	61fa      	str	r2, [r7, #28]
 80033e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	617b      	str	r3, [r7, #20]
   return(result);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e5      	bne.n	80033be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d106      	bne.n	8003408 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033fe:	4619      	mov	r1, r3
 8003400:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003402:	f7ff ff69 	bl	80032d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003406:	e002      	b.n	800340e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003408:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800340a:	f7fd fec1 	bl	8001190 <HAL_UART_RxCpltCallback>
}
 800340e:	bf00      	nop
 8003410:	3770      	adds	r7, #112	; 0x70
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	2b01      	cmp	r3, #1
 800342a:	d108      	bne.n	800343e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff ff4e 	bl	80032d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800343c:	e002      	b.n	8003444 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff ff36 	bl	80032b0 <HAL_UART_RxHalfCpltCallback>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b80      	cmp	r3, #128	; 0x80
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b21      	cmp	r3, #33	; 0x21
 800347e:	d108      	bne.n	8003492 <UART_DMAError+0x46>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2200      	movs	r2, #0
 800348a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	f000 f8c5 	bl	800361c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b22      	cmp	r3, #34	; 0x22
 80034b2:	d108      	bne.n	80034c6 <UART_DMAError+0x7a>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2200      	movs	r2, #0
 80034be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80034c0:	68b8      	ldr	r0, [r7, #8]
 80034c2:	f000 f8d3 	bl	800366c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d2:	68b8      	ldr	r0, [r7, #8]
 80034d4:	f7ff fef6 	bl	80032c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b098      	sub	sp, #96	; 0x60
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2222      	movs	r2, #34	; 0x22
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	4a40      	ldr	r2, [pc, #256]	; (8003610 <UART_Start_Receive_DMA+0x130>)
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	4a3f      	ldr	r2, [pc, #252]	; (8003614 <UART_Start_Receive_DMA+0x134>)
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	4a3e      	ldr	r2, [pc, #248]	; (8003618 <UART_Start_Receive_DMA+0x138>)
 800351e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	2200      	movs	r2, #0
 8003526:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f7fe fa70 	bl	8001a24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	65bb      	str	r3, [r7, #88]	; 0x58
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800358a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800358c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e5      	bne.n	800356a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	657b      	str	r3, [r7, #84]	; 0x54
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3314      	adds	r3, #20
 80035bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035be:	63ba      	str	r2, [r7, #56]	; 0x38
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e5      	bne.n	800359e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3314      	adds	r3, #20
 80035d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	617b      	str	r3, [r7, #20]
   return(result);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e8:	653b      	str	r3, [r7, #80]	; 0x50
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3314      	adds	r3, #20
 80035f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035f2:	627a      	str	r2, [r7, #36]	; 0x24
 80035f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6a39      	ldr	r1, [r7, #32]
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3760      	adds	r7, #96	; 0x60
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	080032f1 	.word	0x080032f1
 8003614:	08003417 	.word	0x08003417
 8003618:	0800344d 	.word	0x0800344d

0800361c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60bb      	str	r3, [r7, #8]
   return(result);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	61ba      	str	r2, [r7, #24]
 8003646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	613b      	str	r3, [r7, #16]
   return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003660:	bf00      	nop
 8003662:	3724      	adds	r7, #36	; 0x24
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800366c:	b480      	push	{r7}
 800366e:	b095      	sub	sp, #84	; 0x54
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003694:	643a      	str	r2, [r7, #64]	; 0x40
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800369a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e5      	bne.n	80036a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d119      	bne.n	8003718 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 0310 	bic.w	r3, r3, #16
 80036fa:	647b      	str	r3, [r7, #68]	; 0x44
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003704:	61ba      	str	r2, [r7, #24]
 8003706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6979      	ldr	r1, [r7, #20]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	613b      	str	r3, [r7, #16]
   return(result);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e5      	bne.n	80036e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003726:	bf00      	nop
 8003728:	3754      	adds	r7, #84	; 0x54
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff fdb9 	bl	80032c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b21      	cmp	r3, #33	; 0x21
 800376c:	d13e      	bne.n	80037ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003776:	d114      	bne.n	80037a2 <UART_Transmit_IT+0x48>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d110      	bne.n	80037a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	621a      	str	r2, [r3, #32]
 80037a0:	e008      	b.n	80037b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6211      	str	r1, [r2, #32]
 80037ac:	781a      	ldrb	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29b      	uxth	r3, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4619      	mov	r1, r3
 80037c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fd3e 	bl	800329c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08c      	sub	sp, #48	; 0x30
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b22      	cmp	r3, #34	; 0x22
 800383c:	f040 80ab 	bne.w	8003996 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d117      	bne.n	800387a <UART_Receive_IT+0x50>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d113      	bne.n	800387a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	b29a      	uxth	r2, r3
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
 8003878:	e026      	b.n	80038c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388c:	d007      	beq.n	800389e <UART_Receive_IT+0x74>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <UART_Receive_IT+0x82>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e008      	b.n	80038be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4619      	mov	r1, r3
 80038d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d15a      	bne.n	8003992 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0220 	bic.w	r2, r2, #32
 80038ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	2b01      	cmp	r3, #1
 800391a:	d135      	bne.n	8003988 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	613b      	str	r3, [r7, #16]
   return(result);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f023 0310 	bic.w	r3, r3, #16
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	330c      	adds	r3, #12
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	623a      	str	r2, [r7, #32]
 8003944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	69f9      	ldr	r1, [r7, #28]
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e5      	bne.n	8003922 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d10a      	bne.n	800397a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fca9 	bl	80032d8 <HAL_UARTEx_RxEventCallback>
 8003986:	e002      	b.n	800398e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd fc01 	bl	8001190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e002      	b.n	8003998 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3730      	adds	r7, #48	; 0x30
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b0c0      	sub	sp, #256	; 0x100
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	68d9      	ldr	r1, [r3, #12]
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	ea40 0301 	orr.w	r3, r0, r1
 80039c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	431a      	orrs	r2, r3
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039f8:	f021 010c 	bic.w	r1, r1, #12
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a06:	430b      	orrs	r3, r1
 8003a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	6999      	ldr	r1, [r3, #24]
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	ea40 0301 	orr.w	r3, r0, r1
 8003a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b8f      	ldr	r3, [pc, #572]	; (8003c6c <UART_SetConfig+0x2cc>)
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d005      	beq.n	8003a40 <UART_SetConfig+0xa0>
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b8d      	ldr	r3, [pc, #564]	; (8003c70 <UART_SetConfig+0x2d0>)
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d104      	bne.n	8003a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a40:	f7ff f90c 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003a44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a48:	e003      	b.n	8003a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a4a:	f7ff f8f3 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8003a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5c:	f040 810c 	bne.w	8003c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a72:	4622      	mov	r2, r4
 8003a74:	462b      	mov	r3, r5
 8003a76:	1891      	adds	r1, r2, r2
 8003a78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a7a:	415b      	adcs	r3, r3
 8003a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a82:	4621      	mov	r1, r4
 8003a84:	eb12 0801 	adds.w	r8, r2, r1
 8003a88:	4629      	mov	r1, r5
 8003a8a:	eb43 0901 	adc.w	r9, r3, r1
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aa2:	4690      	mov	r8, r2
 8003aa4:	4699      	mov	r9, r3
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	eb18 0303 	adds.w	r3, r8, r3
 8003aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	eb49 0303 	adc.w	r3, r9, r3
 8003ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ace:	460b      	mov	r3, r1
 8003ad0:	18db      	adds	r3, r3, r3
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	eb42 0303 	adc.w	r3, r2, r3
 8003ada:	657b      	str	r3, [r7, #84]	; 0x54
 8003adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ae4:	f7fd f8b0 	bl	8000c48 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <UART_SetConfig+0x2d4>)
 8003aee:	fba3 2302 	umull	r2, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	011c      	lsls	r4, r3, #4
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b10:	415b      	adcs	r3, r3
 8003b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b18:	4641      	mov	r1, r8
 8003b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b1e:	4649      	mov	r1, r9
 8003b20:	eb43 0b01 	adc.w	fp, r3, r1
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b38:	4692      	mov	sl, r2
 8003b3a:	469b      	mov	fp, r3
 8003b3c:	4643      	mov	r3, r8
 8003b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b46:	464b      	mov	r3, r9
 8003b48:	eb4b 0303 	adc.w	r3, fp, r3
 8003b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b64:	460b      	mov	r3, r1
 8003b66:	18db      	adds	r3, r3, r3
 8003b68:	643b      	str	r3, [r7, #64]	; 0x40
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
 8003b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b7a:	f7fd f865 	bl	8000c48 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <UART_SetConfig+0x2d4>)
 8003b86:	fba3 2301 	umull	r2, r3, r3, r1
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2264      	movs	r2, #100	; 0x64
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	1acb      	subs	r3, r1, r3
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b9a:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <UART_SetConfig+0x2d4>)
 8003b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba8:	441c      	add	r4, r3
 8003baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c00:	464b      	mov	r3, r9
 8003c02:	460a      	mov	r2, r1
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c20:	460b      	mov	r3, r1
 8003c22:	18db      	adds	r3, r3, r3
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c26:	4613      	mov	r3, r2
 8003c28:	eb42 0303 	adc.w	r3, r2, r3
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c36:	f7fd f807 	bl	8000c48 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <UART_SetConfig+0x2d4>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	; 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	3332      	adds	r3, #50	; 0x32
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <UART_SetConfig+0x2d4>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 0207 	and.w	r2, r3, #7
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4422      	add	r2, r4
 8003c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c68:	e106      	b.n	8003e78 <UART_SetConfig+0x4d8>
 8003c6a:	bf00      	nop
 8003c6c:	40011000 	.word	0x40011000
 8003c70:	40011400 	.word	0x40011400
 8003c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c8a:	4642      	mov	r2, r8
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	1891      	adds	r1, r2, r2
 8003c90:	6239      	str	r1, [r7, #32]
 8003c92:	415b      	adcs	r3, r3
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	1854      	adds	r4, r2, r1
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	eb43 0501 	adc.w	r5, r3, r1
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	00eb      	lsls	r3, r5, #3
 8003cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb2:	00e2      	lsls	r2, r4, #3
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	461d      	mov	r5, r3
 8003cb8:	4643      	mov	r3, r8
 8003cba:	18e3      	adds	r3, r4, r3
 8003cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	eb45 0303 	adc.w	r3, r5, r3
 8003cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	008b      	lsls	r3, r1, #2
 8003cea:	4621      	mov	r1, r4
 8003cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	008a      	lsls	r2, r1, #2
 8003cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cf8:	f7fc ffa6 	bl	8000c48 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4b60      	ldr	r3, [pc, #384]	; (8003e84 <UART_SetConfig+0x4e4>)
 8003d02:	fba3 2302 	umull	r2, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	011c      	lsls	r4, r3, #4
 8003d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	61b9      	str	r1, [r7, #24]
 8003d24:	415b      	adcs	r3, r3
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	1851      	adds	r1, r2, r1
 8003d30:	6139      	str	r1, [r7, #16]
 8003d32:	4649      	mov	r1, r9
 8003d34:	414b      	adcs	r3, r1
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d44:	4659      	mov	r1, fp
 8003d46:	00cb      	lsls	r3, r1, #3
 8003d48:	4651      	mov	r1, sl
 8003d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4e:	4651      	mov	r1, sl
 8003d50:	00ca      	lsls	r2, r1, #3
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	4642      	mov	r2, r8
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d60:	464b      	mov	r3, r9
 8003d62:	460a      	mov	r2, r1
 8003d64:	eb42 0303 	adc.w	r3, r2, r3
 8003d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d84:	4649      	mov	r1, r9
 8003d86:	008b      	lsls	r3, r1, #2
 8003d88:	4641      	mov	r1, r8
 8003d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d8e:	4641      	mov	r1, r8
 8003d90:	008a      	lsls	r2, r1, #2
 8003d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d96:	f7fc ff57 	bl	8000c48 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <UART_SetConfig+0x4e4>)
 8003da2:	fba3 2301 	umull	r2, r3, r3, r1
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	2264      	movs	r2, #100	; 0x64
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	1acb      	subs	r3, r1, r3
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	3332      	adds	r3, #50	; 0x32
 8003db4:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <UART_SetConfig+0x4e4>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc0:	441c      	add	r4, r3
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003dca:	677a      	str	r2, [r7, #116]	; 0x74
 8003dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	1891      	adds	r1, r2, r2
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	415b      	adcs	r3, r3
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de0:	4641      	mov	r1, r8
 8003de2:	1851      	adds	r1, r2, r1
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	4649      	mov	r1, r9
 8003de8:	414b      	adcs	r3, r1
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003df8:	4659      	mov	r1, fp
 8003dfa:	00cb      	lsls	r3, r1, #3
 8003dfc:	4651      	mov	r1, sl
 8003dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e02:	4651      	mov	r1, sl
 8003e04:	00ca      	lsls	r2, r1, #3
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e12:	464b      	mov	r3, r9
 8003e14:	460a      	mov	r2, r1
 8003e16:	eb42 0303 	adc.w	r3, r2, r3
 8003e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	663b      	str	r3, [r7, #96]	; 0x60
 8003e26:	667a      	str	r2, [r7, #100]	; 0x64
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e34:	4649      	mov	r1, r9
 8003e36:	008b      	lsls	r3, r1, #2
 8003e38:	4641      	mov	r1, r8
 8003e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e3e:	4641      	mov	r1, r8
 8003e40:	008a      	lsls	r2, r1, #2
 8003e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e46:	f7fc feff 	bl	8000c48 <__aeabi_uldivmod>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <UART_SetConfig+0x4e4>)
 8003e50:	fba3 1302 	umull	r1, r3, r3, r2
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	2164      	movs	r1, #100	; 0x64
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	3332      	adds	r3, #50	; 0x32
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <UART_SetConfig+0x4e4>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	f003 020f 	and.w	r2, r3, #15
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4422      	add	r2, r4
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e84:	51eb851f 	.word	0x51eb851f

08003e88 <_scanf_float>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	b087      	sub	sp, #28
 8003e8e:	4617      	mov	r7, r2
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	688b      	ldr	r3, [r1, #8]
 8003e94:	1e5a      	subs	r2, r3, #1
 8003e96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003e9a:	bf83      	ittte	hi
 8003e9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003ea0:	195b      	addhi	r3, r3, r5
 8003ea2:	9302      	strhi	r3, [sp, #8]
 8003ea4:	2300      	movls	r3, #0
 8003ea6:	bf86      	itte	hi
 8003ea8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003eac:	608b      	strhi	r3, [r1, #8]
 8003eae:	9302      	strls	r3, [sp, #8]
 8003eb0:	680b      	ldr	r3, [r1, #0]
 8003eb2:	468b      	mov	fp, r1
 8003eb4:	2500      	movs	r5, #0
 8003eb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003eba:	f84b 3b1c 	str.w	r3, [fp], #28
 8003ebe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	465e      	mov	r6, fp
 8003ec8:	46aa      	mov	sl, r5
 8003eca:	46a9      	mov	r9, r5
 8003ecc:	9501      	str	r5, [sp, #4]
 8003ece:	68a2      	ldr	r2, [r4, #8]
 8003ed0:	b152      	cbz	r2, 8003ee8 <_scanf_float+0x60>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ed8:	d864      	bhi.n	8003fa4 <_scanf_float+0x11c>
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d83c      	bhi.n	8003f58 <_scanf_float+0xd0>
 8003ede:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003ee2:	b2c8      	uxtb	r0, r1
 8003ee4:	280e      	cmp	r0, #14
 8003ee6:	d93a      	bls.n	8003f5e <_scanf_float+0xd6>
 8003ee8:	f1b9 0f00 	cmp.w	r9, #0
 8003eec:	d003      	beq.n	8003ef6 <_scanf_float+0x6e>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003efa:	f1ba 0f01 	cmp.w	sl, #1
 8003efe:	f200 8113 	bhi.w	8004128 <_scanf_float+0x2a0>
 8003f02:	455e      	cmp	r6, fp
 8003f04:	f200 8105 	bhi.w	8004112 <_scanf_float+0x28a>
 8003f08:	2501      	movs	r5, #1
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	b007      	add	sp, #28
 8003f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003f16:	2a0d      	cmp	r2, #13
 8003f18:	d8e6      	bhi.n	8003ee8 <_scanf_float+0x60>
 8003f1a:	a101      	add	r1, pc, #4	; (adr r1, 8003f20 <_scanf_float+0x98>)
 8003f1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003f20:	0800405f 	.word	0x0800405f
 8003f24:	08003ee9 	.word	0x08003ee9
 8003f28:	08003ee9 	.word	0x08003ee9
 8003f2c:	08003ee9 	.word	0x08003ee9
 8003f30:	080040bf 	.word	0x080040bf
 8003f34:	08004097 	.word	0x08004097
 8003f38:	08003ee9 	.word	0x08003ee9
 8003f3c:	08003ee9 	.word	0x08003ee9
 8003f40:	0800406d 	.word	0x0800406d
 8003f44:	08003ee9 	.word	0x08003ee9
 8003f48:	08003ee9 	.word	0x08003ee9
 8003f4c:	08003ee9 	.word	0x08003ee9
 8003f50:	08003ee9 	.word	0x08003ee9
 8003f54:	08004025 	.word	0x08004025
 8003f58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003f5c:	e7db      	b.n	8003f16 <_scanf_float+0x8e>
 8003f5e:	290e      	cmp	r1, #14
 8003f60:	d8c2      	bhi.n	8003ee8 <_scanf_float+0x60>
 8003f62:	a001      	add	r0, pc, #4	; (adr r0, 8003f68 <_scanf_float+0xe0>)
 8003f64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003f68:	08004017 	.word	0x08004017
 8003f6c:	08003ee9 	.word	0x08003ee9
 8003f70:	08004017 	.word	0x08004017
 8003f74:	080040ab 	.word	0x080040ab
 8003f78:	08003ee9 	.word	0x08003ee9
 8003f7c:	08003fc5 	.word	0x08003fc5
 8003f80:	08004001 	.word	0x08004001
 8003f84:	08004001 	.word	0x08004001
 8003f88:	08004001 	.word	0x08004001
 8003f8c:	08004001 	.word	0x08004001
 8003f90:	08004001 	.word	0x08004001
 8003f94:	08004001 	.word	0x08004001
 8003f98:	08004001 	.word	0x08004001
 8003f9c:	08004001 	.word	0x08004001
 8003fa0:	08004001 	.word	0x08004001
 8003fa4:	2b6e      	cmp	r3, #110	; 0x6e
 8003fa6:	d809      	bhi.n	8003fbc <_scanf_float+0x134>
 8003fa8:	2b60      	cmp	r3, #96	; 0x60
 8003faa:	d8b2      	bhi.n	8003f12 <_scanf_float+0x8a>
 8003fac:	2b54      	cmp	r3, #84	; 0x54
 8003fae:	d077      	beq.n	80040a0 <_scanf_float+0x218>
 8003fb0:	2b59      	cmp	r3, #89	; 0x59
 8003fb2:	d199      	bne.n	8003ee8 <_scanf_float+0x60>
 8003fb4:	2d07      	cmp	r5, #7
 8003fb6:	d197      	bne.n	8003ee8 <_scanf_float+0x60>
 8003fb8:	2508      	movs	r5, #8
 8003fba:	e029      	b.n	8004010 <_scanf_float+0x188>
 8003fbc:	2b74      	cmp	r3, #116	; 0x74
 8003fbe:	d06f      	beq.n	80040a0 <_scanf_float+0x218>
 8003fc0:	2b79      	cmp	r3, #121	; 0x79
 8003fc2:	e7f6      	b.n	8003fb2 <_scanf_float+0x12a>
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	05c8      	lsls	r0, r1, #23
 8003fc8:	d51a      	bpl.n	8004000 <_scanf_float+0x178>
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003fd0:	6021      	str	r1, [r4, #0]
 8003fd2:	f109 0901 	add.w	r9, r9, #1
 8003fd6:	b11b      	cbz	r3, 8003fe0 <_scanf_float+0x158>
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	3201      	adds	r2, #1
 8003fdc:	9302      	str	r3, [sp, #8]
 8003fde:	60a2      	str	r2, [r4, #8]
 8003fe0:	68a3      	ldr	r3, [r4, #8]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	6123      	str	r3, [r4, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	f340 8084 	ble.w	8004100 <_scanf_float+0x278>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	e766      	b.n	8003ece <_scanf_float+0x46>
 8004000:	eb1a 0f05 	cmn.w	sl, r5
 8004004:	f47f af70 	bne.w	8003ee8 <_scanf_float+0x60>
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	f806 3b01 	strb.w	r3, [r6], #1
 8004014:	e7e4      	b.n	8003fe0 <_scanf_float+0x158>
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	0610      	lsls	r0, r2, #24
 800401a:	f57f af65 	bpl.w	8003ee8 <_scanf_float+0x60>
 800401e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004022:	e7f4      	b.n	800400e <_scanf_float+0x186>
 8004024:	f1ba 0f00 	cmp.w	sl, #0
 8004028:	d10e      	bne.n	8004048 <_scanf_float+0x1c0>
 800402a:	f1b9 0f00 	cmp.w	r9, #0
 800402e:	d10e      	bne.n	800404e <_scanf_float+0x1c6>
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004036:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800403a:	d108      	bne.n	800404e <_scanf_float+0x1c6>
 800403c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004040:	6022      	str	r2, [r4, #0]
 8004042:	f04f 0a01 	mov.w	sl, #1
 8004046:	e7e3      	b.n	8004010 <_scanf_float+0x188>
 8004048:	f1ba 0f02 	cmp.w	sl, #2
 800404c:	d055      	beq.n	80040fa <_scanf_float+0x272>
 800404e:	2d01      	cmp	r5, #1
 8004050:	d002      	beq.n	8004058 <_scanf_float+0x1d0>
 8004052:	2d04      	cmp	r5, #4
 8004054:	f47f af48 	bne.w	8003ee8 <_scanf_float+0x60>
 8004058:	3501      	adds	r5, #1
 800405a:	b2ed      	uxtb	r5, r5
 800405c:	e7d8      	b.n	8004010 <_scanf_float+0x188>
 800405e:	f1ba 0f01 	cmp.w	sl, #1
 8004062:	f47f af41 	bne.w	8003ee8 <_scanf_float+0x60>
 8004066:	f04f 0a02 	mov.w	sl, #2
 800406a:	e7d1      	b.n	8004010 <_scanf_float+0x188>
 800406c:	b97d      	cbnz	r5, 800408e <_scanf_float+0x206>
 800406e:	f1b9 0f00 	cmp.w	r9, #0
 8004072:	f47f af3c 	bne.w	8003eee <_scanf_float+0x66>
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800407c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004080:	f47f af39 	bne.w	8003ef6 <_scanf_float+0x6e>
 8004084:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004088:	6022      	str	r2, [r4, #0]
 800408a:	2501      	movs	r5, #1
 800408c:	e7c0      	b.n	8004010 <_scanf_float+0x188>
 800408e:	2d03      	cmp	r5, #3
 8004090:	d0e2      	beq.n	8004058 <_scanf_float+0x1d0>
 8004092:	2d05      	cmp	r5, #5
 8004094:	e7de      	b.n	8004054 <_scanf_float+0x1cc>
 8004096:	2d02      	cmp	r5, #2
 8004098:	f47f af26 	bne.w	8003ee8 <_scanf_float+0x60>
 800409c:	2503      	movs	r5, #3
 800409e:	e7b7      	b.n	8004010 <_scanf_float+0x188>
 80040a0:	2d06      	cmp	r5, #6
 80040a2:	f47f af21 	bne.w	8003ee8 <_scanf_float+0x60>
 80040a6:	2507      	movs	r5, #7
 80040a8:	e7b2      	b.n	8004010 <_scanf_float+0x188>
 80040aa:	6822      	ldr	r2, [r4, #0]
 80040ac:	0591      	lsls	r1, r2, #22
 80040ae:	f57f af1b 	bpl.w	8003ee8 <_scanf_float+0x60>
 80040b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80040bc:	e7a8      	b.n	8004010 <_scanf_float+0x188>
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80040c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80040c8:	d006      	beq.n	80040d8 <_scanf_float+0x250>
 80040ca:	0550      	lsls	r0, r2, #21
 80040cc:	f57f af0c 	bpl.w	8003ee8 <_scanf_float+0x60>
 80040d0:	f1b9 0f00 	cmp.w	r9, #0
 80040d4:	f43f af0f 	beq.w	8003ef6 <_scanf_float+0x6e>
 80040d8:	0591      	lsls	r1, r2, #22
 80040da:	bf58      	it	pl
 80040dc:	9901      	ldrpl	r1, [sp, #4]
 80040de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80040e2:	bf58      	it	pl
 80040e4:	eba9 0101 	subpl.w	r1, r9, r1
 80040e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80040ec:	bf58      	it	pl
 80040ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80040f2:	6022      	str	r2, [r4, #0]
 80040f4:	f04f 0900 	mov.w	r9, #0
 80040f8:	e78a      	b.n	8004010 <_scanf_float+0x188>
 80040fa:	f04f 0a03 	mov.w	sl, #3
 80040fe:	e787      	b.n	8004010 <_scanf_float+0x188>
 8004100:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004104:	4639      	mov	r1, r7
 8004106:	4640      	mov	r0, r8
 8004108:	4798      	blx	r3
 800410a:	2800      	cmp	r0, #0
 800410c:	f43f aedf 	beq.w	8003ece <_scanf_float+0x46>
 8004110:	e6ea      	b.n	8003ee8 <_scanf_float+0x60>
 8004112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004116:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800411a:	463a      	mov	r2, r7
 800411c:	4640      	mov	r0, r8
 800411e:	4798      	blx	r3
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	3b01      	subs	r3, #1
 8004124:	6123      	str	r3, [r4, #16]
 8004126:	e6ec      	b.n	8003f02 <_scanf_float+0x7a>
 8004128:	1e6b      	subs	r3, r5, #1
 800412a:	2b06      	cmp	r3, #6
 800412c:	d825      	bhi.n	800417a <_scanf_float+0x2f2>
 800412e:	2d02      	cmp	r5, #2
 8004130:	d836      	bhi.n	80041a0 <_scanf_float+0x318>
 8004132:	455e      	cmp	r6, fp
 8004134:	f67f aee8 	bls.w	8003f08 <_scanf_float+0x80>
 8004138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800413c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004140:	463a      	mov	r2, r7
 8004142:	4640      	mov	r0, r8
 8004144:	4798      	blx	r3
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	3b01      	subs	r3, #1
 800414a:	6123      	str	r3, [r4, #16]
 800414c:	e7f1      	b.n	8004132 <_scanf_float+0x2aa>
 800414e:	9802      	ldr	r0, [sp, #8]
 8004150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004154:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004158:	9002      	str	r0, [sp, #8]
 800415a:	463a      	mov	r2, r7
 800415c:	4640      	mov	r0, r8
 800415e:	4798      	blx	r3
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	3b01      	subs	r3, #1
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800416a:	fa5f fa8a 	uxtb.w	sl, sl
 800416e:	f1ba 0f02 	cmp.w	sl, #2
 8004172:	d1ec      	bne.n	800414e <_scanf_float+0x2c6>
 8004174:	3d03      	subs	r5, #3
 8004176:	b2ed      	uxtb	r5, r5
 8004178:	1b76      	subs	r6, r6, r5
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	05da      	lsls	r2, r3, #23
 800417e:	d52f      	bpl.n	80041e0 <_scanf_float+0x358>
 8004180:	055b      	lsls	r3, r3, #21
 8004182:	d510      	bpl.n	80041a6 <_scanf_float+0x31e>
 8004184:	455e      	cmp	r6, fp
 8004186:	f67f aebf 	bls.w	8003f08 <_scanf_float+0x80>
 800418a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800418e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004192:	463a      	mov	r2, r7
 8004194:	4640      	mov	r0, r8
 8004196:	4798      	blx	r3
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	3b01      	subs	r3, #1
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	e7f1      	b.n	8004184 <_scanf_float+0x2fc>
 80041a0:	46aa      	mov	sl, r5
 80041a2:	9602      	str	r6, [sp, #8]
 80041a4:	e7df      	b.n	8004166 <_scanf_float+0x2de>
 80041a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	2965      	cmp	r1, #101	; 0x65
 80041ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80041b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80041b6:	6123      	str	r3, [r4, #16]
 80041b8:	d00c      	beq.n	80041d4 <_scanf_float+0x34c>
 80041ba:	2945      	cmp	r1, #69	; 0x45
 80041bc:	d00a      	beq.n	80041d4 <_scanf_float+0x34c>
 80041be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041c2:	463a      	mov	r2, r7
 80041c4:	4640      	mov	r0, r8
 80041c6:	4798      	blx	r3
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	1eb5      	subs	r5, r6, #2
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041d8:	463a      	mov	r2, r7
 80041da:	4640      	mov	r0, r8
 80041dc:	4798      	blx	r3
 80041de:	462e      	mov	r6, r5
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	f015 0510 	ands.w	r5, r5, #16
 80041e6:	d158      	bne.n	800429a <_scanf_float+0x412>
 80041e8:	7035      	strb	r5, [r6, #0]
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f4:	d11c      	bne.n	8004230 <_scanf_float+0x3a8>
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	454b      	cmp	r3, r9
 80041fa:	eba3 0209 	sub.w	r2, r3, r9
 80041fe:	d124      	bne.n	800424a <_scanf_float+0x3c2>
 8004200:	2200      	movs	r2, #0
 8004202:	4659      	mov	r1, fp
 8004204:	4640      	mov	r0, r8
 8004206:	f001 f917 	bl	8005438 <_strtod_r>
 800420a:	9b03      	ldr	r3, [sp, #12]
 800420c:	6821      	ldr	r1, [r4, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f011 0f02 	tst.w	r1, #2
 8004214:	ec57 6b10 	vmov	r6, r7, d0
 8004218:	f103 0204 	add.w	r2, r3, #4
 800421c:	d020      	beq.n	8004260 <_scanf_float+0x3d8>
 800421e:	9903      	ldr	r1, [sp, #12]
 8004220:	600a      	str	r2, [r1, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	e9c3 6700 	strd	r6, r7, [r3]
 8004228:	68e3      	ldr	r3, [r4, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60e3      	str	r3, [r4, #12]
 800422e:	e66c      	b.n	8003f0a <_scanf_float+0x82>
 8004230:	9b04      	ldr	r3, [sp, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0e4      	beq.n	8004200 <_scanf_float+0x378>
 8004236:	9905      	ldr	r1, [sp, #20]
 8004238:	230a      	movs	r3, #10
 800423a:	462a      	mov	r2, r5
 800423c:	3101      	adds	r1, #1
 800423e:	4640      	mov	r0, r8
 8004240:	f001 f982 	bl	8005548 <_strtol_r>
 8004244:	9b04      	ldr	r3, [sp, #16]
 8004246:	9e05      	ldr	r6, [sp, #20]
 8004248:	1ac2      	subs	r2, r0, r3
 800424a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800424e:	429e      	cmp	r6, r3
 8004250:	bf28      	it	cs
 8004252:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004256:	4912      	ldr	r1, [pc, #72]	; (80042a0 <_scanf_float+0x418>)
 8004258:	4630      	mov	r0, r6
 800425a:	f000 f8d5 	bl	8004408 <siprintf>
 800425e:	e7cf      	b.n	8004200 <_scanf_float+0x378>
 8004260:	f011 0f04 	tst.w	r1, #4
 8004264:	9903      	ldr	r1, [sp, #12]
 8004266:	600a      	str	r2, [r1, #0]
 8004268:	d1db      	bne.n	8004222 <_scanf_float+0x39a>
 800426a:	f8d3 8000 	ldr.w	r8, [r3]
 800426e:	ee10 2a10 	vmov	r2, s0
 8004272:	ee10 0a10 	vmov	r0, s0
 8004276:	463b      	mov	r3, r7
 8004278:	4639      	mov	r1, r7
 800427a:	f7fc fc5f 	bl	8000b3c <__aeabi_dcmpun>
 800427e:	b128      	cbz	r0, 800428c <_scanf_float+0x404>
 8004280:	4808      	ldr	r0, [pc, #32]	; (80042a4 <_scanf_float+0x41c>)
 8004282:	f000 f9cd 	bl	8004620 <nanf>
 8004286:	ed88 0a00 	vstr	s0, [r8]
 800428a:	e7cd      	b.n	8004228 <_scanf_float+0x3a0>
 800428c:	4630      	mov	r0, r6
 800428e:	4639      	mov	r1, r7
 8004290:	f7fc fc8a 	bl	8000ba8 <__aeabi_d2f>
 8004294:	f8c8 0000 	str.w	r0, [r8]
 8004298:	e7c6      	b.n	8004228 <_scanf_float+0x3a0>
 800429a:	2500      	movs	r5, #0
 800429c:	e635      	b.n	8003f0a <_scanf_float+0x82>
 800429e:	bf00      	nop
 80042a0:	08007c28 	.word	0x08007c28
 80042a4:	08007fff 	.word	0x08007fff

080042a8 <std>:
 80042a8:	2300      	movs	r3, #0
 80042aa:	b510      	push	{r4, lr}
 80042ac:	4604      	mov	r4, r0
 80042ae:	e9c0 3300 	strd	r3, r3, [r0]
 80042b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042b6:	6083      	str	r3, [r0, #8]
 80042b8:	8181      	strh	r1, [r0, #12]
 80042ba:	6643      	str	r3, [r0, #100]	; 0x64
 80042bc:	81c2      	strh	r2, [r0, #14]
 80042be:	6183      	str	r3, [r0, #24]
 80042c0:	4619      	mov	r1, r3
 80042c2:	2208      	movs	r2, #8
 80042c4:	305c      	adds	r0, #92	; 0x5c
 80042c6:	f000 f930 	bl	800452a <memset>
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <std+0x38>)
 80042cc:	6263      	str	r3, [r4, #36]	; 0x24
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <std+0x3c>)
 80042d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <std+0x40>)
 80042d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <std+0x44>)
 80042d8:	6224      	str	r4, [r4, #32]
 80042da:	6323      	str	r3, [r4, #48]	; 0x30
 80042dc:	bd10      	pop	{r4, pc}
 80042de:	bf00      	nop
 80042e0:	080044a1 	.word	0x080044a1
 80042e4:	080044c7 	.word	0x080044c7
 80042e8:	080044ff 	.word	0x080044ff
 80042ec:	08004523 	.word	0x08004523

080042f0 <stdio_exit_handler>:
 80042f0:	4a02      	ldr	r2, [pc, #8]	; (80042fc <stdio_exit_handler+0xc>)
 80042f2:	4903      	ldr	r1, [pc, #12]	; (8004300 <stdio_exit_handler+0x10>)
 80042f4:	4803      	ldr	r0, [pc, #12]	; (8004304 <stdio_exit_handler+0x14>)
 80042f6:	f000 b869 	b.w	80043cc <_fwalk_sglue>
 80042fa:	bf00      	nop
 80042fc:	2000000c 	.word	0x2000000c
 8004300:	08006269 	.word	0x08006269
 8004304:	20000018 	.word	0x20000018

08004308 <cleanup_stdio>:
 8004308:	6841      	ldr	r1, [r0, #4]
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <cleanup_stdio+0x34>)
 800430c:	4299      	cmp	r1, r3
 800430e:	b510      	push	{r4, lr}
 8004310:	4604      	mov	r4, r0
 8004312:	d001      	beq.n	8004318 <cleanup_stdio+0x10>
 8004314:	f001 ffa8 	bl	8006268 <_fflush_r>
 8004318:	68a1      	ldr	r1, [r4, #8]
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <cleanup_stdio+0x38>)
 800431c:	4299      	cmp	r1, r3
 800431e:	d002      	beq.n	8004326 <cleanup_stdio+0x1e>
 8004320:	4620      	mov	r0, r4
 8004322:	f001 ffa1 	bl	8006268 <_fflush_r>
 8004326:	68e1      	ldr	r1, [r4, #12]
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <cleanup_stdio+0x3c>)
 800432a:	4299      	cmp	r1, r3
 800432c:	d004      	beq.n	8004338 <cleanup_stdio+0x30>
 800432e:	4620      	mov	r0, r4
 8004330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004334:	f001 bf98 	b.w	8006268 <_fflush_r>
 8004338:	bd10      	pop	{r4, pc}
 800433a:	bf00      	nop
 800433c:	200002b8 	.word	0x200002b8
 8004340:	20000320 	.word	0x20000320
 8004344:	20000388 	.word	0x20000388

08004348 <global_stdio_init.part.0>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <global_stdio_init.part.0+0x30>)
 800434c:	4c0b      	ldr	r4, [pc, #44]	; (800437c <global_stdio_init.part.0+0x34>)
 800434e:	4a0c      	ldr	r2, [pc, #48]	; (8004380 <global_stdio_init.part.0+0x38>)
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	4620      	mov	r0, r4
 8004354:	2200      	movs	r2, #0
 8004356:	2104      	movs	r1, #4
 8004358:	f7ff ffa6 	bl	80042a8 <std>
 800435c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004360:	2201      	movs	r2, #1
 8004362:	2109      	movs	r1, #9
 8004364:	f7ff ffa0 	bl	80042a8 <std>
 8004368:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800436c:	2202      	movs	r2, #2
 800436e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004372:	2112      	movs	r1, #18
 8004374:	f7ff bf98 	b.w	80042a8 <std>
 8004378:	200003f0 	.word	0x200003f0
 800437c:	200002b8 	.word	0x200002b8
 8004380:	080042f1 	.word	0x080042f1

08004384 <__sfp_lock_acquire>:
 8004384:	4801      	ldr	r0, [pc, #4]	; (800438c <__sfp_lock_acquire+0x8>)
 8004386:	f000 b949 	b.w	800461c <__retarget_lock_acquire_recursive>
 800438a:	bf00      	nop
 800438c:	200003f9 	.word	0x200003f9

08004390 <__sfp_lock_release>:
 8004390:	4801      	ldr	r0, [pc, #4]	; (8004398 <__sfp_lock_release+0x8>)
 8004392:	f000 b944 	b.w	800461e <__retarget_lock_release_recursive>
 8004396:	bf00      	nop
 8004398:	200003f9 	.word	0x200003f9

0800439c <__sinit>:
 800439c:	b510      	push	{r4, lr}
 800439e:	4604      	mov	r4, r0
 80043a0:	f7ff fff0 	bl	8004384 <__sfp_lock_acquire>
 80043a4:	6a23      	ldr	r3, [r4, #32]
 80043a6:	b11b      	cbz	r3, 80043b0 <__sinit+0x14>
 80043a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ac:	f7ff bff0 	b.w	8004390 <__sfp_lock_release>
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <__sinit+0x28>)
 80043b2:	6223      	str	r3, [r4, #32]
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <__sinit+0x2c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f5      	bne.n	80043a8 <__sinit+0xc>
 80043bc:	f7ff ffc4 	bl	8004348 <global_stdio_init.part.0>
 80043c0:	e7f2      	b.n	80043a8 <__sinit+0xc>
 80043c2:	bf00      	nop
 80043c4:	08004309 	.word	0x08004309
 80043c8:	200003f0 	.word	0x200003f0

080043cc <_fwalk_sglue>:
 80043cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d0:	4607      	mov	r7, r0
 80043d2:	4688      	mov	r8, r1
 80043d4:	4614      	mov	r4, r2
 80043d6:	2600      	movs	r6, #0
 80043d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043dc:	f1b9 0901 	subs.w	r9, r9, #1
 80043e0:	d505      	bpl.n	80043ee <_fwalk_sglue+0x22>
 80043e2:	6824      	ldr	r4, [r4, #0]
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	d1f7      	bne.n	80043d8 <_fwalk_sglue+0xc>
 80043e8:	4630      	mov	r0, r6
 80043ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ee:	89ab      	ldrh	r3, [r5, #12]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d907      	bls.n	8004404 <_fwalk_sglue+0x38>
 80043f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043f8:	3301      	adds	r3, #1
 80043fa:	d003      	beq.n	8004404 <_fwalk_sglue+0x38>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4638      	mov	r0, r7
 8004400:	47c0      	blx	r8
 8004402:	4306      	orrs	r6, r0
 8004404:	3568      	adds	r5, #104	; 0x68
 8004406:	e7e9      	b.n	80043dc <_fwalk_sglue+0x10>

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	b500      	push	{lr}
 800440c:	b09c      	sub	sp, #112	; 0x70
 800440e:	ab1d      	add	r3, sp, #116	; 0x74
 8004410:	9002      	str	r0, [sp, #8]
 8004412:	9006      	str	r0, [sp, #24]
 8004414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004418:	4809      	ldr	r0, [pc, #36]	; (8004440 <siprintf+0x38>)
 800441a:	9107      	str	r1, [sp, #28]
 800441c:	9104      	str	r1, [sp, #16]
 800441e:	4909      	ldr	r1, [pc, #36]	; (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	a902      	add	r1, sp, #8
 800442c:	f001 f8e8 	bl	8005600 <_svfiprintf_r>
 8004430:	9b02      	ldr	r3, [sp, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	; 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	20000064 	.word	0x20000064
 8004444:	ffff0208 	.word	0xffff0208

08004448 <siscanf>:
 8004448:	b40e      	push	{r1, r2, r3}
 800444a:	b510      	push	{r4, lr}
 800444c:	b09f      	sub	sp, #124	; 0x7c
 800444e:	ac21      	add	r4, sp, #132	; 0x84
 8004450:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004454:	f854 2b04 	ldr.w	r2, [r4], #4
 8004458:	9201      	str	r2, [sp, #4]
 800445a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800445e:	9004      	str	r0, [sp, #16]
 8004460:	9008      	str	r0, [sp, #32]
 8004462:	f7fb febd 	bl	80001e0 <strlen>
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <siscanf+0x50>)
 8004468:	9005      	str	r0, [sp, #20]
 800446a:	9009      	str	r0, [sp, #36]	; 0x24
 800446c:	930d      	str	r3, [sp, #52]	; 0x34
 800446e:	480b      	ldr	r0, [pc, #44]	; (800449c <siscanf+0x54>)
 8004470:	9a01      	ldr	r2, [sp, #4]
 8004472:	6800      	ldr	r0, [r0, #0]
 8004474:	9403      	str	r4, [sp, #12]
 8004476:	2300      	movs	r3, #0
 8004478:	9311      	str	r3, [sp, #68]	; 0x44
 800447a:	9316      	str	r3, [sp, #88]	; 0x58
 800447c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004480:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004484:	a904      	add	r1, sp, #16
 8004486:	4623      	mov	r3, r4
 8004488:	f001 fa12 	bl	80058b0 <__ssvfiscanf_r>
 800448c:	b01f      	add	sp, #124	; 0x7c
 800448e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004492:	b003      	add	sp, #12
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	080044c3 	.word	0x080044c3
 800449c:	20000064 	.word	0x20000064

080044a0 <__sread>:
 80044a0:	b510      	push	{r4, lr}
 80044a2:	460c      	mov	r4, r1
 80044a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a8:	f000 f86a 	bl	8004580 <_read_r>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	bfab      	itete	ge
 80044b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044b2:	89a3      	ldrhlt	r3, [r4, #12]
 80044b4:	181b      	addge	r3, r3, r0
 80044b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044ba:	bfac      	ite	ge
 80044bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044be:	81a3      	strhlt	r3, [r4, #12]
 80044c0:	bd10      	pop	{r4, pc}

080044c2 <__seofread>:
 80044c2:	2000      	movs	r0, #0
 80044c4:	4770      	bx	lr

080044c6 <__swrite>:
 80044c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ca:	461f      	mov	r7, r3
 80044cc:	898b      	ldrh	r3, [r1, #12]
 80044ce:	05db      	lsls	r3, r3, #23
 80044d0:	4605      	mov	r5, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4616      	mov	r6, r2
 80044d6:	d505      	bpl.n	80044e4 <__swrite+0x1e>
 80044d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044dc:	2302      	movs	r3, #2
 80044de:	2200      	movs	r2, #0
 80044e0:	f000 f83c 	bl	800455c <_lseek_r>
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	4632      	mov	r2, r6
 80044f2:	463b      	mov	r3, r7
 80044f4:	4628      	mov	r0, r5
 80044f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044fa:	f000 b853 	b.w	80045a4 <_write_r>

080044fe <__sseek>:
 80044fe:	b510      	push	{r4, lr}
 8004500:	460c      	mov	r4, r1
 8004502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004506:	f000 f829 	bl	800455c <_lseek_r>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	bf15      	itete	ne
 8004510:	6560      	strne	r0, [r4, #84]	; 0x54
 8004512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800451a:	81a3      	strheq	r3, [r4, #12]
 800451c:	bf18      	it	ne
 800451e:	81a3      	strhne	r3, [r4, #12]
 8004520:	bd10      	pop	{r4, pc}

08004522 <__sclose>:
 8004522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004526:	f000 b809 	b.w	800453c <_close_r>

0800452a <memset>:
 800452a:	4402      	add	r2, r0
 800452c:	4603      	mov	r3, r0
 800452e:	4293      	cmp	r3, r2
 8004530:	d100      	bne.n	8004534 <memset+0xa>
 8004532:	4770      	bx	lr
 8004534:	f803 1b01 	strb.w	r1, [r3], #1
 8004538:	e7f9      	b.n	800452e <memset+0x4>
	...

0800453c <_close_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4d06      	ldr	r5, [pc, #24]	; (8004558 <_close_r+0x1c>)
 8004540:	2300      	movs	r3, #0
 8004542:	4604      	mov	r4, r0
 8004544:	4608      	mov	r0, r1
 8004546:	602b      	str	r3, [r5, #0]
 8004548:	f7fc ff93 	bl	8001472 <_close>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_close_r+0x1a>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_close_r+0x1a>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	200003f4 	.word	0x200003f4

0800455c <_lseek_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4d07      	ldr	r5, [pc, #28]	; (800457c <_lseek_r+0x20>)
 8004560:	4604      	mov	r4, r0
 8004562:	4608      	mov	r0, r1
 8004564:	4611      	mov	r1, r2
 8004566:	2200      	movs	r2, #0
 8004568:	602a      	str	r2, [r5, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	f7fc ffa8 	bl	80014c0 <_lseek>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_lseek_r+0x1e>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_lseek_r+0x1e>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	200003f4 	.word	0x200003f4

08004580 <_read_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	; (80045a0 <_read_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fc ff36 	bl	8001400 <_read>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_read_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_read_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	200003f4 	.word	0x200003f4

080045a4 <_write_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	; (80045c4 <_write_r+0x20>)
 80045a8:	4604      	mov	r4, r0
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fc ff41 	bl	800143a <_write>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_write_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_write_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	200003f4 	.word	0x200003f4

080045c8 <__errno>:
 80045c8:	4b01      	ldr	r3, [pc, #4]	; (80045d0 <__errno+0x8>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000064 	.word	0x20000064

080045d4 <__libc_init_array>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	4d0d      	ldr	r5, [pc, #52]	; (800460c <__libc_init_array+0x38>)
 80045d8:	4c0d      	ldr	r4, [pc, #52]	; (8004610 <__libc_init_array+0x3c>)
 80045da:	1b64      	subs	r4, r4, r5
 80045dc:	10a4      	asrs	r4, r4, #2
 80045de:	2600      	movs	r6, #0
 80045e0:	42a6      	cmp	r6, r4
 80045e2:	d109      	bne.n	80045f8 <__libc_init_array+0x24>
 80045e4:	4d0b      	ldr	r5, [pc, #44]	; (8004614 <__libc_init_array+0x40>)
 80045e6:	4c0c      	ldr	r4, [pc, #48]	; (8004618 <__libc_init_array+0x44>)
 80045e8:	f003 faf4 	bl	8007bd4 <_init>
 80045ec:	1b64      	subs	r4, r4, r5
 80045ee:	10a4      	asrs	r4, r4, #2
 80045f0:	2600      	movs	r6, #0
 80045f2:	42a6      	cmp	r6, r4
 80045f4:	d105      	bne.n	8004602 <__libc_init_array+0x2e>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fc:	4798      	blx	r3
 80045fe:	3601      	adds	r6, #1
 8004600:	e7ee      	b.n	80045e0 <__libc_init_array+0xc>
 8004602:	f855 3b04 	ldr.w	r3, [r5], #4
 8004606:	4798      	blx	r3
 8004608:	3601      	adds	r6, #1
 800460a:	e7f2      	b.n	80045f2 <__libc_init_array+0x1e>
 800460c:	08008008 	.word	0x08008008
 8004610:	08008008 	.word	0x08008008
 8004614:	08008008 	.word	0x08008008
 8004618:	0800800c 	.word	0x0800800c

0800461c <__retarget_lock_acquire_recursive>:
 800461c:	4770      	bx	lr

0800461e <__retarget_lock_release_recursive>:
 800461e:	4770      	bx	lr

08004620 <nanf>:
 8004620:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004628 <nanf+0x8>
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	7fc00000 	.word	0x7fc00000

0800462c <_free_r>:
 800462c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800462e:	2900      	cmp	r1, #0
 8004630:	d044      	beq.n	80046bc <_free_r+0x90>
 8004632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004636:	9001      	str	r0, [sp, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f1a1 0404 	sub.w	r4, r1, #4
 800463e:	bfb8      	it	lt
 8004640:	18e4      	addlt	r4, r4, r3
 8004642:	f000 f8df 	bl	8004804 <__malloc_lock>
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <_free_r+0x94>)
 8004648:	9801      	ldr	r0, [sp, #4]
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	b933      	cbnz	r3, 800465c <_free_r+0x30>
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	6014      	str	r4, [r2, #0]
 8004652:	b003      	add	sp, #12
 8004654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004658:	f000 b8da 	b.w	8004810 <__malloc_unlock>
 800465c:	42a3      	cmp	r3, r4
 800465e:	d908      	bls.n	8004672 <_free_r+0x46>
 8004660:	6825      	ldr	r5, [r4, #0]
 8004662:	1961      	adds	r1, r4, r5
 8004664:	428b      	cmp	r3, r1
 8004666:	bf01      	itttt	eq
 8004668:	6819      	ldreq	r1, [r3, #0]
 800466a:	685b      	ldreq	r3, [r3, #4]
 800466c:	1949      	addeq	r1, r1, r5
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	e7ed      	b.n	800464e <_free_r+0x22>
 8004672:	461a      	mov	r2, r3
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b10b      	cbz	r3, 800467c <_free_r+0x50>
 8004678:	42a3      	cmp	r3, r4
 800467a:	d9fa      	bls.n	8004672 <_free_r+0x46>
 800467c:	6811      	ldr	r1, [r2, #0]
 800467e:	1855      	adds	r5, r2, r1
 8004680:	42a5      	cmp	r5, r4
 8004682:	d10b      	bne.n	800469c <_free_r+0x70>
 8004684:	6824      	ldr	r4, [r4, #0]
 8004686:	4421      	add	r1, r4
 8004688:	1854      	adds	r4, r2, r1
 800468a:	42a3      	cmp	r3, r4
 800468c:	6011      	str	r1, [r2, #0]
 800468e:	d1e0      	bne.n	8004652 <_free_r+0x26>
 8004690:	681c      	ldr	r4, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	6053      	str	r3, [r2, #4]
 8004696:	440c      	add	r4, r1
 8004698:	6014      	str	r4, [r2, #0]
 800469a:	e7da      	b.n	8004652 <_free_r+0x26>
 800469c:	d902      	bls.n	80046a4 <_free_r+0x78>
 800469e:	230c      	movs	r3, #12
 80046a0:	6003      	str	r3, [r0, #0]
 80046a2:	e7d6      	b.n	8004652 <_free_r+0x26>
 80046a4:	6825      	ldr	r5, [r4, #0]
 80046a6:	1961      	adds	r1, r4, r5
 80046a8:	428b      	cmp	r3, r1
 80046aa:	bf04      	itt	eq
 80046ac:	6819      	ldreq	r1, [r3, #0]
 80046ae:	685b      	ldreq	r3, [r3, #4]
 80046b0:	6063      	str	r3, [r4, #4]
 80046b2:	bf04      	itt	eq
 80046b4:	1949      	addeq	r1, r1, r5
 80046b6:	6021      	streq	r1, [r4, #0]
 80046b8:	6054      	str	r4, [r2, #4]
 80046ba:	e7ca      	b.n	8004652 <_free_r+0x26>
 80046bc:	b003      	add	sp, #12
 80046be:	bd30      	pop	{r4, r5, pc}
 80046c0:	200003fc 	.word	0x200003fc

080046c4 <sbrk_aligned>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4e0e      	ldr	r6, [pc, #56]	; (8004700 <sbrk_aligned+0x3c>)
 80046c8:	460c      	mov	r4, r1
 80046ca:	6831      	ldr	r1, [r6, #0]
 80046cc:	4605      	mov	r5, r0
 80046ce:	b911      	cbnz	r1, 80046d6 <sbrk_aligned+0x12>
 80046d0:	f001 fe92 	bl	80063f8 <_sbrk_r>
 80046d4:	6030      	str	r0, [r6, #0]
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f001 fe8d 	bl	80063f8 <_sbrk_r>
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	d00a      	beq.n	80046f8 <sbrk_aligned+0x34>
 80046e2:	1cc4      	adds	r4, r0, #3
 80046e4:	f024 0403 	bic.w	r4, r4, #3
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d007      	beq.n	80046fc <sbrk_aligned+0x38>
 80046ec:	1a21      	subs	r1, r4, r0
 80046ee:	4628      	mov	r0, r5
 80046f0:	f001 fe82 	bl	80063f8 <_sbrk_r>
 80046f4:	3001      	adds	r0, #1
 80046f6:	d101      	bne.n	80046fc <sbrk_aligned+0x38>
 80046f8:	f04f 34ff 	mov.w	r4, #4294967295
 80046fc:	4620      	mov	r0, r4
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	20000400 	.word	0x20000400

08004704 <_malloc_r>:
 8004704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004708:	1ccd      	adds	r5, r1, #3
 800470a:	f025 0503 	bic.w	r5, r5, #3
 800470e:	3508      	adds	r5, #8
 8004710:	2d0c      	cmp	r5, #12
 8004712:	bf38      	it	cc
 8004714:	250c      	movcc	r5, #12
 8004716:	2d00      	cmp	r5, #0
 8004718:	4607      	mov	r7, r0
 800471a:	db01      	blt.n	8004720 <_malloc_r+0x1c>
 800471c:	42a9      	cmp	r1, r5
 800471e:	d905      	bls.n	800472c <_malloc_r+0x28>
 8004720:	230c      	movs	r3, #12
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	2600      	movs	r6, #0
 8004726:	4630      	mov	r0, r6
 8004728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800472c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004800 <_malloc_r+0xfc>
 8004730:	f000 f868 	bl	8004804 <__malloc_lock>
 8004734:	f8d8 3000 	ldr.w	r3, [r8]
 8004738:	461c      	mov	r4, r3
 800473a:	bb5c      	cbnz	r4, 8004794 <_malloc_r+0x90>
 800473c:	4629      	mov	r1, r5
 800473e:	4638      	mov	r0, r7
 8004740:	f7ff ffc0 	bl	80046c4 <sbrk_aligned>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	4604      	mov	r4, r0
 8004748:	d155      	bne.n	80047f6 <_malloc_r+0xf2>
 800474a:	f8d8 4000 	ldr.w	r4, [r8]
 800474e:	4626      	mov	r6, r4
 8004750:	2e00      	cmp	r6, #0
 8004752:	d145      	bne.n	80047e0 <_malloc_r+0xdc>
 8004754:	2c00      	cmp	r4, #0
 8004756:	d048      	beq.n	80047ea <_malloc_r+0xe6>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	4631      	mov	r1, r6
 800475c:	4638      	mov	r0, r7
 800475e:	eb04 0903 	add.w	r9, r4, r3
 8004762:	f001 fe49 	bl	80063f8 <_sbrk_r>
 8004766:	4581      	cmp	r9, r0
 8004768:	d13f      	bne.n	80047ea <_malloc_r+0xe6>
 800476a:	6821      	ldr	r1, [r4, #0]
 800476c:	1a6d      	subs	r5, r5, r1
 800476e:	4629      	mov	r1, r5
 8004770:	4638      	mov	r0, r7
 8004772:	f7ff ffa7 	bl	80046c4 <sbrk_aligned>
 8004776:	3001      	adds	r0, #1
 8004778:	d037      	beq.n	80047ea <_malloc_r+0xe6>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	442b      	add	r3, r5
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	f8d8 3000 	ldr.w	r3, [r8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d038      	beq.n	80047fa <_malloc_r+0xf6>
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	42a2      	cmp	r2, r4
 800478c:	d12b      	bne.n	80047e6 <_malloc_r+0xe2>
 800478e:	2200      	movs	r2, #0
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	e00f      	b.n	80047b4 <_malloc_r+0xb0>
 8004794:	6822      	ldr	r2, [r4, #0]
 8004796:	1b52      	subs	r2, r2, r5
 8004798:	d41f      	bmi.n	80047da <_malloc_r+0xd6>
 800479a:	2a0b      	cmp	r2, #11
 800479c:	d917      	bls.n	80047ce <_malloc_r+0xca>
 800479e:	1961      	adds	r1, r4, r5
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	6025      	str	r5, [r4, #0]
 80047a4:	bf18      	it	ne
 80047a6:	6059      	strne	r1, [r3, #4]
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	bf08      	it	eq
 80047ac:	f8c8 1000 	streq.w	r1, [r8]
 80047b0:	5162      	str	r2, [r4, r5]
 80047b2:	604b      	str	r3, [r1, #4]
 80047b4:	4638      	mov	r0, r7
 80047b6:	f104 060b 	add.w	r6, r4, #11
 80047ba:	f000 f829 	bl	8004810 <__malloc_unlock>
 80047be:	f026 0607 	bic.w	r6, r6, #7
 80047c2:	1d23      	adds	r3, r4, #4
 80047c4:	1af2      	subs	r2, r6, r3
 80047c6:	d0ae      	beq.n	8004726 <_malloc_r+0x22>
 80047c8:	1b9b      	subs	r3, r3, r6
 80047ca:	50a3      	str	r3, [r4, r2]
 80047cc:	e7ab      	b.n	8004726 <_malloc_r+0x22>
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	6862      	ldr	r2, [r4, #4]
 80047d2:	d1dd      	bne.n	8004790 <_malloc_r+0x8c>
 80047d4:	f8c8 2000 	str.w	r2, [r8]
 80047d8:	e7ec      	b.n	80047b4 <_malloc_r+0xb0>
 80047da:	4623      	mov	r3, r4
 80047dc:	6864      	ldr	r4, [r4, #4]
 80047de:	e7ac      	b.n	800473a <_malloc_r+0x36>
 80047e0:	4634      	mov	r4, r6
 80047e2:	6876      	ldr	r6, [r6, #4]
 80047e4:	e7b4      	b.n	8004750 <_malloc_r+0x4c>
 80047e6:	4613      	mov	r3, r2
 80047e8:	e7cc      	b.n	8004784 <_malloc_r+0x80>
 80047ea:	230c      	movs	r3, #12
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4638      	mov	r0, r7
 80047f0:	f000 f80e 	bl	8004810 <__malloc_unlock>
 80047f4:	e797      	b.n	8004726 <_malloc_r+0x22>
 80047f6:	6025      	str	r5, [r4, #0]
 80047f8:	e7dc      	b.n	80047b4 <_malloc_r+0xb0>
 80047fa:	605b      	str	r3, [r3, #4]
 80047fc:	deff      	udf	#255	; 0xff
 80047fe:	bf00      	nop
 8004800:	200003fc 	.word	0x200003fc

08004804 <__malloc_lock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_lock+0x8>)
 8004806:	f7ff bf09 	b.w	800461c <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	200003f8 	.word	0x200003f8

08004810 <__malloc_unlock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_unlock+0x8>)
 8004812:	f7ff bf04 	b.w	800461e <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	200003f8 	.word	0x200003f8

0800481c <sulp>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4604      	mov	r4, r0
 8004820:	460d      	mov	r5, r1
 8004822:	ec45 4b10 	vmov	d0, r4, r5
 8004826:	4616      	mov	r6, r2
 8004828:	f002 fce4 	bl	80071f4 <__ulp>
 800482c:	ec51 0b10 	vmov	r0, r1, d0
 8004830:	b17e      	cbz	r6, 8004852 <sulp+0x36>
 8004832:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004836:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800483a:	2b00      	cmp	r3, #0
 800483c:	dd09      	ble.n	8004852 <sulp+0x36>
 800483e:	051b      	lsls	r3, r3, #20
 8004840:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004844:	2400      	movs	r4, #0
 8004846:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	f7fb fedb 	bl	8000608 <__aeabi_dmul>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	0000      	movs	r0, r0
	...

08004858 <_strtod_l>:
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	ed2d 8b02 	vpush	{d8}
 8004860:	b09b      	sub	sp, #108	; 0x6c
 8004862:	4604      	mov	r4, r0
 8004864:	9213      	str	r2, [sp, #76]	; 0x4c
 8004866:	2200      	movs	r2, #0
 8004868:	9216      	str	r2, [sp, #88]	; 0x58
 800486a:	460d      	mov	r5, r1
 800486c:	f04f 0800 	mov.w	r8, #0
 8004870:	f04f 0900 	mov.w	r9, #0
 8004874:	460a      	mov	r2, r1
 8004876:	9215      	str	r2, [sp, #84]	; 0x54
 8004878:	7811      	ldrb	r1, [r2, #0]
 800487a:	292b      	cmp	r1, #43	; 0x2b
 800487c:	d04c      	beq.n	8004918 <_strtod_l+0xc0>
 800487e:	d83a      	bhi.n	80048f6 <_strtod_l+0x9e>
 8004880:	290d      	cmp	r1, #13
 8004882:	d834      	bhi.n	80048ee <_strtod_l+0x96>
 8004884:	2908      	cmp	r1, #8
 8004886:	d834      	bhi.n	80048f2 <_strtod_l+0x9a>
 8004888:	2900      	cmp	r1, #0
 800488a:	d03d      	beq.n	8004908 <_strtod_l+0xb0>
 800488c:	2200      	movs	r2, #0
 800488e:	920a      	str	r2, [sp, #40]	; 0x28
 8004890:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004892:	7832      	ldrb	r2, [r6, #0]
 8004894:	2a30      	cmp	r2, #48	; 0x30
 8004896:	f040 80b4 	bne.w	8004a02 <_strtod_l+0x1aa>
 800489a:	7872      	ldrb	r2, [r6, #1]
 800489c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80048a0:	2a58      	cmp	r2, #88	; 0x58
 80048a2:	d170      	bne.n	8004986 <_strtod_l+0x12e>
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	ab16      	add	r3, sp, #88	; 0x58
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4a8e      	ldr	r2, [pc, #568]	; (8004ae8 <_strtod_l+0x290>)
 80048b0:	ab17      	add	r3, sp, #92	; 0x5c
 80048b2:	a915      	add	r1, sp, #84	; 0x54
 80048b4:	4620      	mov	r0, r4
 80048b6:	f001 fe2f 	bl	8006518 <__gethex>
 80048ba:	f010 070f 	ands.w	r7, r0, #15
 80048be:	4605      	mov	r5, r0
 80048c0:	d005      	beq.n	80048ce <_strtod_l+0x76>
 80048c2:	2f06      	cmp	r7, #6
 80048c4:	d12a      	bne.n	800491c <_strtod_l+0xc4>
 80048c6:	3601      	adds	r6, #1
 80048c8:	2300      	movs	r3, #0
 80048ca:	9615      	str	r6, [sp, #84]	; 0x54
 80048cc:	930a      	str	r3, [sp, #40]	; 0x28
 80048ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 857f 	bne.w	80053d4 <_strtod_l+0xb7c>
 80048d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d8:	b1db      	cbz	r3, 8004912 <_strtod_l+0xba>
 80048da:	4642      	mov	r2, r8
 80048dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80048e0:	ec43 2b10 	vmov	d0, r2, r3
 80048e4:	b01b      	add	sp, #108	; 0x6c
 80048e6:	ecbd 8b02 	vpop	{d8}
 80048ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ee:	2920      	cmp	r1, #32
 80048f0:	d1cc      	bne.n	800488c <_strtod_l+0x34>
 80048f2:	3201      	adds	r2, #1
 80048f4:	e7bf      	b.n	8004876 <_strtod_l+0x1e>
 80048f6:	292d      	cmp	r1, #45	; 0x2d
 80048f8:	d1c8      	bne.n	800488c <_strtod_l+0x34>
 80048fa:	2101      	movs	r1, #1
 80048fc:	910a      	str	r1, [sp, #40]	; 0x28
 80048fe:	1c51      	adds	r1, r2, #1
 8004900:	9115      	str	r1, [sp, #84]	; 0x54
 8004902:	7852      	ldrb	r2, [r2, #1]
 8004904:	2a00      	cmp	r2, #0
 8004906:	d1c3      	bne.n	8004890 <_strtod_l+0x38>
 8004908:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800490a:	9515      	str	r5, [sp, #84]	; 0x54
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 855f 	bne.w	80053d0 <_strtod_l+0xb78>
 8004912:	4642      	mov	r2, r8
 8004914:	464b      	mov	r3, r9
 8004916:	e7e3      	b.n	80048e0 <_strtod_l+0x88>
 8004918:	2100      	movs	r1, #0
 800491a:	e7ef      	b.n	80048fc <_strtod_l+0xa4>
 800491c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800491e:	b13a      	cbz	r2, 8004930 <_strtod_l+0xd8>
 8004920:	2135      	movs	r1, #53	; 0x35
 8004922:	a818      	add	r0, sp, #96	; 0x60
 8004924:	f002 fd63 	bl	80073ee <__copybits>
 8004928:	9916      	ldr	r1, [sp, #88]	; 0x58
 800492a:	4620      	mov	r0, r4
 800492c:	f002 f936 	bl	8006b9c <_Bfree>
 8004930:	3f01      	subs	r7, #1
 8004932:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004934:	2f04      	cmp	r7, #4
 8004936:	d806      	bhi.n	8004946 <_strtod_l+0xee>
 8004938:	e8df f007 	tbb	[pc, r7]
 800493c:	201d0314 	.word	0x201d0314
 8004940:	14          	.byte	0x14
 8004941:	00          	.byte	0x00
 8004942:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8004946:	05e9      	lsls	r1, r5, #23
 8004948:	bf48      	it	mi
 800494a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800494e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004952:	0d1b      	lsrs	r3, r3, #20
 8004954:	051b      	lsls	r3, r3, #20
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1b9      	bne.n	80048ce <_strtod_l+0x76>
 800495a:	f7ff fe35 	bl	80045c8 <__errno>
 800495e:	2322      	movs	r3, #34	; 0x22
 8004960:	6003      	str	r3, [r0, #0]
 8004962:	e7b4      	b.n	80048ce <_strtod_l+0x76>
 8004964:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8004968:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800496c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004970:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004974:	e7e7      	b.n	8004946 <_strtod_l+0xee>
 8004976:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004af0 <_strtod_l+0x298>
 800497a:	e7e4      	b.n	8004946 <_strtod_l+0xee>
 800497c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004980:	f04f 38ff 	mov.w	r8, #4294967295
 8004984:	e7df      	b.n	8004946 <_strtod_l+0xee>
 8004986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	9215      	str	r2, [sp, #84]	; 0x54
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b30      	cmp	r3, #48	; 0x30
 8004990:	d0f9      	beq.n	8004986 <_strtod_l+0x12e>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d09b      	beq.n	80048ce <_strtod_l+0x76>
 8004996:	2301      	movs	r3, #1
 8004998:	f04f 0a00 	mov.w	sl, #0
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80049a6:	46d3      	mov	fp, sl
 80049a8:	220a      	movs	r2, #10
 80049aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80049ac:	7806      	ldrb	r6, [r0, #0]
 80049ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80049b2:	b2d9      	uxtb	r1, r3
 80049b4:	2909      	cmp	r1, #9
 80049b6:	d926      	bls.n	8004a06 <_strtod_l+0x1ae>
 80049b8:	494c      	ldr	r1, [pc, #304]	; (8004aec <_strtod_l+0x294>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	f001 fd09 	bl	80063d2 <strncmp>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d030      	beq.n	8004a26 <_strtod_l+0x1ce>
 80049c4:	2000      	movs	r0, #0
 80049c6:	4632      	mov	r2, r6
 80049c8:	9005      	str	r0, [sp, #20]
 80049ca:	465e      	mov	r6, fp
 80049cc:	4603      	mov	r3, r0
 80049ce:	2a65      	cmp	r2, #101	; 0x65
 80049d0:	d001      	beq.n	80049d6 <_strtod_l+0x17e>
 80049d2:	2a45      	cmp	r2, #69	; 0x45
 80049d4:	d113      	bne.n	80049fe <_strtod_l+0x1a6>
 80049d6:	b91e      	cbnz	r6, 80049e0 <_strtod_l+0x188>
 80049d8:	9a04      	ldr	r2, [sp, #16]
 80049da:	4302      	orrs	r2, r0
 80049dc:	d094      	beq.n	8004908 <_strtod_l+0xb0>
 80049de:	2600      	movs	r6, #0
 80049e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80049e2:	1c6a      	adds	r2, r5, #1
 80049e4:	9215      	str	r2, [sp, #84]	; 0x54
 80049e6:	786a      	ldrb	r2, [r5, #1]
 80049e8:	2a2b      	cmp	r2, #43	; 0x2b
 80049ea:	d074      	beq.n	8004ad6 <_strtod_l+0x27e>
 80049ec:	2a2d      	cmp	r2, #45	; 0x2d
 80049ee:	d078      	beq.n	8004ae2 <_strtod_l+0x28a>
 80049f0:	f04f 0c00 	mov.w	ip, #0
 80049f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80049f8:	2909      	cmp	r1, #9
 80049fa:	d97f      	bls.n	8004afc <_strtod_l+0x2a4>
 80049fc:	9515      	str	r5, [sp, #84]	; 0x54
 80049fe:	2700      	movs	r7, #0
 8004a00:	e09e      	b.n	8004b40 <_strtod_l+0x2e8>
 8004a02:	2300      	movs	r3, #0
 8004a04:	e7c8      	b.n	8004998 <_strtod_l+0x140>
 8004a06:	f1bb 0f08 	cmp.w	fp, #8
 8004a0a:	bfd8      	it	le
 8004a0c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004a0e:	f100 0001 	add.w	r0, r0, #1
 8004a12:	bfda      	itte	le
 8004a14:	fb02 3301 	mlale	r3, r2, r1, r3
 8004a18:	9309      	strle	r3, [sp, #36]	; 0x24
 8004a1a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004a1e:	f10b 0b01 	add.w	fp, fp, #1
 8004a22:	9015      	str	r0, [sp, #84]	; 0x54
 8004a24:	e7c1      	b.n	80049aa <_strtod_l+0x152>
 8004a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	9215      	str	r2, [sp, #84]	; 0x54
 8004a2c:	785a      	ldrb	r2, [r3, #1]
 8004a2e:	f1bb 0f00 	cmp.w	fp, #0
 8004a32:	d037      	beq.n	8004aa4 <_strtod_l+0x24c>
 8004a34:	9005      	str	r0, [sp, #20]
 8004a36:	465e      	mov	r6, fp
 8004a38:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004a3c:	2b09      	cmp	r3, #9
 8004a3e:	d912      	bls.n	8004a66 <_strtod_l+0x20e>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e7c4      	b.n	80049ce <_strtod_l+0x176>
 8004a44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	9215      	str	r2, [sp, #84]	; 0x54
 8004a4a:	785a      	ldrb	r2, [r3, #1]
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	2a30      	cmp	r2, #48	; 0x30
 8004a50:	d0f8      	beq.n	8004a44 <_strtod_l+0x1ec>
 8004a52:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	f200 84c1 	bhi.w	80053de <_strtod_l+0xb86>
 8004a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a5e:	9005      	str	r0, [sp, #20]
 8004a60:	2000      	movs	r0, #0
 8004a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a64:	4606      	mov	r6, r0
 8004a66:	3a30      	subs	r2, #48	; 0x30
 8004a68:	f100 0301 	add.w	r3, r0, #1
 8004a6c:	d014      	beq.n	8004a98 <_strtod_l+0x240>
 8004a6e:	9905      	ldr	r1, [sp, #20]
 8004a70:	4419      	add	r1, r3
 8004a72:	9105      	str	r1, [sp, #20]
 8004a74:	4633      	mov	r3, r6
 8004a76:	eb00 0c06 	add.w	ip, r0, r6
 8004a7a:	210a      	movs	r1, #10
 8004a7c:	4563      	cmp	r3, ip
 8004a7e:	d113      	bne.n	8004aa8 <_strtod_l+0x250>
 8004a80:	1833      	adds	r3, r6, r0
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	f106 0601 	add.w	r6, r6, #1
 8004a88:	4406      	add	r6, r0
 8004a8a:	dc1a      	bgt.n	8004ac2 <_strtod_l+0x26a>
 8004a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a8e:	230a      	movs	r3, #10
 8004a90:	fb03 2301 	mla	r3, r3, r1, r2
 8004a94:	9309      	str	r3, [sp, #36]	; 0x24
 8004a96:	2300      	movs	r3, #0
 8004a98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a9a:	1c51      	adds	r1, r2, #1
 8004a9c:	9115      	str	r1, [sp, #84]	; 0x54
 8004a9e:	7852      	ldrb	r2, [r2, #1]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	e7c9      	b.n	8004a38 <_strtod_l+0x1e0>
 8004aa4:	4658      	mov	r0, fp
 8004aa6:	e7d2      	b.n	8004a4e <_strtod_l+0x1f6>
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	f103 0301 	add.w	r3, r3, #1
 8004aae:	dc03      	bgt.n	8004ab8 <_strtod_l+0x260>
 8004ab0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004ab2:	434f      	muls	r7, r1
 8004ab4:	9709      	str	r7, [sp, #36]	; 0x24
 8004ab6:	e7e1      	b.n	8004a7c <_strtod_l+0x224>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	bfd8      	it	le
 8004abc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004ac0:	e7dc      	b.n	8004a7c <_strtod_l+0x224>
 8004ac2:	2e10      	cmp	r6, #16
 8004ac4:	bfdc      	itt	le
 8004ac6:	230a      	movle	r3, #10
 8004ac8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004acc:	e7e3      	b.n	8004a96 <_strtod_l+0x23e>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e780      	b.n	80049d8 <_strtod_l+0x180>
 8004ad6:	f04f 0c00 	mov.w	ip, #0
 8004ada:	1caa      	adds	r2, r5, #2
 8004adc:	9215      	str	r2, [sp, #84]	; 0x54
 8004ade:	78aa      	ldrb	r2, [r5, #2]
 8004ae0:	e788      	b.n	80049f4 <_strtod_l+0x19c>
 8004ae2:	f04f 0c01 	mov.w	ip, #1
 8004ae6:	e7f8      	b.n	8004ada <_strtod_l+0x282>
 8004ae8:	08007c3c 	.word	0x08007c3c
 8004aec:	08007c2d 	.word	0x08007c2d
 8004af0:	7ff00000 	.word	0x7ff00000
 8004af4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004af6:	1c51      	adds	r1, r2, #1
 8004af8:	9115      	str	r1, [sp, #84]	; 0x54
 8004afa:	7852      	ldrb	r2, [r2, #1]
 8004afc:	2a30      	cmp	r2, #48	; 0x30
 8004afe:	d0f9      	beq.n	8004af4 <_strtod_l+0x29c>
 8004b00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004b04:	2908      	cmp	r1, #8
 8004b06:	f63f af7a 	bhi.w	80049fe <_strtod_l+0x1a6>
 8004b0a:	3a30      	subs	r2, #48	; 0x30
 8004b0c:	9208      	str	r2, [sp, #32]
 8004b0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b10:	920c      	str	r2, [sp, #48]	; 0x30
 8004b12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b14:	1c57      	adds	r7, r2, #1
 8004b16:	9715      	str	r7, [sp, #84]	; 0x54
 8004b18:	7852      	ldrb	r2, [r2, #1]
 8004b1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004b1e:	f1be 0f09 	cmp.w	lr, #9
 8004b22:	d938      	bls.n	8004b96 <_strtod_l+0x33e>
 8004b24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b26:	1a7f      	subs	r7, r7, r1
 8004b28:	2f08      	cmp	r7, #8
 8004b2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004b2e:	dc03      	bgt.n	8004b38 <_strtod_l+0x2e0>
 8004b30:	9908      	ldr	r1, [sp, #32]
 8004b32:	428f      	cmp	r7, r1
 8004b34:	bfa8      	it	ge
 8004b36:	460f      	movge	r7, r1
 8004b38:	f1bc 0f00 	cmp.w	ip, #0
 8004b3c:	d000      	beq.n	8004b40 <_strtod_l+0x2e8>
 8004b3e:	427f      	negs	r7, r7
 8004b40:	2e00      	cmp	r6, #0
 8004b42:	d14f      	bne.n	8004be4 <_strtod_l+0x38c>
 8004b44:	9904      	ldr	r1, [sp, #16]
 8004b46:	4301      	orrs	r1, r0
 8004b48:	f47f aec1 	bne.w	80048ce <_strtod_l+0x76>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f47f aedb 	bne.w	8004908 <_strtod_l+0xb0>
 8004b52:	2a69      	cmp	r2, #105	; 0x69
 8004b54:	d029      	beq.n	8004baa <_strtod_l+0x352>
 8004b56:	dc26      	bgt.n	8004ba6 <_strtod_l+0x34e>
 8004b58:	2a49      	cmp	r2, #73	; 0x49
 8004b5a:	d026      	beq.n	8004baa <_strtod_l+0x352>
 8004b5c:	2a4e      	cmp	r2, #78	; 0x4e
 8004b5e:	f47f aed3 	bne.w	8004908 <_strtod_l+0xb0>
 8004b62:	499b      	ldr	r1, [pc, #620]	; (8004dd0 <_strtod_l+0x578>)
 8004b64:	a815      	add	r0, sp, #84	; 0x54
 8004b66:	f001 ff17 	bl	8006998 <__match>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	f43f aecc 	beq.w	8004908 <_strtod_l+0xb0>
 8004b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b28      	cmp	r3, #40	; 0x28
 8004b76:	d12f      	bne.n	8004bd8 <_strtod_l+0x380>
 8004b78:	4996      	ldr	r1, [pc, #600]	; (8004dd4 <_strtod_l+0x57c>)
 8004b7a:	aa18      	add	r2, sp, #96	; 0x60
 8004b7c:	a815      	add	r0, sp, #84	; 0x54
 8004b7e:	f001 ff1f 	bl	80069c0 <__hexnan>
 8004b82:	2805      	cmp	r0, #5
 8004b84:	d128      	bne.n	8004bd8 <_strtod_l+0x380>
 8004b86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004b90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004b94:	e69b      	b.n	80048ce <_strtod_l+0x76>
 8004b96:	9f08      	ldr	r7, [sp, #32]
 8004b98:	210a      	movs	r1, #10
 8004b9a:	fb01 2107 	mla	r1, r1, r7, r2
 8004b9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004ba2:	9208      	str	r2, [sp, #32]
 8004ba4:	e7b5      	b.n	8004b12 <_strtod_l+0x2ba>
 8004ba6:	2a6e      	cmp	r2, #110	; 0x6e
 8004ba8:	e7d9      	b.n	8004b5e <_strtod_l+0x306>
 8004baa:	498b      	ldr	r1, [pc, #556]	; (8004dd8 <_strtod_l+0x580>)
 8004bac:	a815      	add	r0, sp, #84	; 0x54
 8004bae:	f001 fef3 	bl	8006998 <__match>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	f43f aea8 	beq.w	8004908 <_strtod_l+0xb0>
 8004bb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bba:	4988      	ldr	r1, [pc, #544]	; (8004ddc <_strtod_l+0x584>)
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	a815      	add	r0, sp, #84	; 0x54
 8004bc0:	9315      	str	r3, [sp, #84]	; 0x54
 8004bc2:	f001 fee9 	bl	8006998 <__match>
 8004bc6:	b910      	cbnz	r0, 8004bce <_strtod_l+0x376>
 8004bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bca:	3301      	adds	r3, #1
 8004bcc:	9315      	str	r3, [sp, #84]	; 0x54
 8004bce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004dec <_strtod_l+0x594>
 8004bd2:	f04f 0800 	mov.w	r8, #0
 8004bd6:	e67a      	b.n	80048ce <_strtod_l+0x76>
 8004bd8:	4881      	ldr	r0, [pc, #516]	; (8004de0 <_strtod_l+0x588>)
 8004bda:	f001 fc2d 	bl	8006438 <nan>
 8004bde:	ec59 8b10 	vmov	r8, r9, d0
 8004be2:	e674      	b.n	80048ce <_strtod_l+0x76>
 8004be4:	9b05      	ldr	r3, [sp, #20]
 8004be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be8:	1afb      	subs	r3, r7, r3
 8004bea:	f1bb 0f00 	cmp.w	fp, #0
 8004bee:	bf08      	it	eq
 8004bf0:	46b3      	moveq	fp, r6
 8004bf2:	2e10      	cmp	r6, #16
 8004bf4:	9308      	str	r3, [sp, #32]
 8004bf6:	4635      	mov	r5, r6
 8004bf8:	bfa8      	it	ge
 8004bfa:	2510      	movge	r5, #16
 8004bfc:	f7fb fc8a 	bl	8000514 <__aeabi_ui2d>
 8004c00:	2e09      	cmp	r6, #9
 8004c02:	4680      	mov	r8, r0
 8004c04:	4689      	mov	r9, r1
 8004c06:	dd13      	ble.n	8004c30 <_strtod_l+0x3d8>
 8004c08:	4b76      	ldr	r3, [pc, #472]	; (8004de4 <_strtod_l+0x58c>)
 8004c0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004c12:	f7fb fcf9 	bl	8000608 <__aeabi_dmul>
 8004c16:	4680      	mov	r8, r0
 8004c18:	4650      	mov	r0, sl
 8004c1a:	4689      	mov	r9, r1
 8004c1c:	f7fb fc7a 	bl	8000514 <__aeabi_ui2d>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4640      	mov	r0, r8
 8004c26:	4649      	mov	r1, r9
 8004c28:	f7fb fb38 	bl	800029c <__adddf3>
 8004c2c:	4680      	mov	r8, r0
 8004c2e:	4689      	mov	r9, r1
 8004c30:	2e0f      	cmp	r6, #15
 8004c32:	dc38      	bgt.n	8004ca6 <_strtod_l+0x44e>
 8004c34:	9b08      	ldr	r3, [sp, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f43f ae49 	beq.w	80048ce <_strtod_l+0x76>
 8004c3c:	dd24      	ble.n	8004c88 <_strtod_l+0x430>
 8004c3e:	2b16      	cmp	r3, #22
 8004c40:	dc0b      	bgt.n	8004c5a <_strtod_l+0x402>
 8004c42:	4968      	ldr	r1, [pc, #416]	; (8004de4 <_strtod_l+0x58c>)
 8004c44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	f7fb fcda 	bl	8000608 <__aeabi_dmul>
 8004c54:	4680      	mov	r8, r0
 8004c56:	4689      	mov	r9, r1
 8004c58:	e639      	b.n	80048ce <_strtod_l+0x76>
 8004c5a:	9a08      	ldr	r2, [sp, #32]
 8004c5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8004c60:	4293      	cmp	r3, r2
 8004c62:	db20      	blt.n	8004ca6 <_strtod_l+0x44e>
 8004c64:	4c5f      	ldr	r4, [pc, #380]	; (8004de4 <_strtod_l+0x58c>)
 8004c66:	f1c6 060f 	rsb	r6, r6, #15
 8004c6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8004c6e:	4642      	mov	r2, r8
 8004c70:	464b      	mov	r3, r9
 8004c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c76:	f7fb fcc7 	bl	8000608 <__aeabi_dmul>
 8004c7a:	9b08      	ldr	r3, [sp, #32]
 8004c7c:	1b9e      	subs	r6, r3, r6
 8004c7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8004c82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004c86:	e7e3      	b.n	8004c50 <_strtod_l+0x3f8>
 8004c88:	9b08      	ldr	r3, [sp, #32]
 8004c8a:	3316      	adds	r3, #22
 8004c8c:	db0b      	blt.n	8004ca6 <_strtod_l+0x44e>
 8004c8e:	9b05      	ldr	r3, [sp, #20]
 8004c90:	1bdf      	subs	r7, r3, r7
 8004c92:	4b54      	ldr	r3, [pc, #336]	; (8004de4 <_strtod_l+0x58c>)
 8004c94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	f7fb fddc 	bl	800085c <__aeabi_ddiv>
 8004ca4:	e7d6      	b.n	8004c54 <_strtod_l+0x3fc>
 8004ca6:	9b08      	ldr	r3, [sp, #32]
 8004ca8:	1b75      	subs	r5, r6, r5
 8004caa:	441d      	add	r5, r3
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	dd70      	ble.n	8004d92 <_strtod_l+0x53a>
 8004cb0:	f015 030f 	ands.w	r3, r5, #15
 8004cb4:	d00a      	beq.n	8004ccc <_strtod_l+0x474>
 8004cb6:	494b      	ldr	r1, [pc, #300]	; (8004de4 <_strtod_l+0x58c>)
 8004cb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cc4:	f7fb fca0 	bl	8000608 <__aeabi_dmul>
 8004cc8:	4680      	mov	r8, r0
 8004cca:	4689      	mov	r9, r1
 8004ccc:	f035 050f 	bics.w	r5, r5, #15
 8004cd0:	d04d      	beq.n	8004d6e <_strtod_l+0x516>
 8004cd2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8004cd6:	dd22      	ble.n	8004d1e <_strtod_l+0x4c6>
 8004cd8:	2500      	movs	r5, #0
 8004cda:	46ab      	mov	fp, r5
 8004cdc:	9509      	str	r5, [sp, #36]	; 0x24
 8004cde:	9505      	str	r5, [sp, #20]
 8004ce0:	2322      	movs	r3, #34	; 0x22
 8004ce2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004dec <_strtod_l+0x594>
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	f04f 0800 	mov.w	r8, #0
 8004cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f43f aded 	beq.w	80048ce <_strtod_l+0x76>
 8004cf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f001 ff50 	bl	8006b9c <_Bfree>
 8004cfc:	9905      	ldr	r1, [sp, #20]
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f001 ff4c 	bl	8006b9c <_Bfree>
 8004d04:	4659      	mov	r1, fp
 8004d06:	4620      	mov	r0, r4
 8004d08:	f001 ff48 	bl	8006b9c <_Bfree>
 8004d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f001 ff44 	bl	8006b9c <_Bfree>
 8004d14:	4629      	mov	r1, r5
 8004d16:	4620      	mov	r0, r4
 8004d18:	f001 ff40 	bl	8006b9c <_Bfree>
 8004d1c:	e5d7      	b.n	80048ce <_strtod_l+0x76>
 8004d1e:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <_strtod_l+0x590>)
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	2300      	movs	r3, #0
 8004d24:	112d      	asrs	r5, r5, #4
 8004d26:	4640      	mov	r0, r8
 8004d28:	4649      	mov	r1, r9
 8004d2a:	469a      	mov	sl, r3
 8004d2c:	2d01      	cmp	r5, #1
 8004d2e:	dc21      	bgt.n	8004d74 <_strtod_l+0x51c>
 8004d30:	b10b      	cbz	r3, 8004d36 <_strtod_l+0x4de>
 8004d32:	4680      	mov	r8, r0
 8004d34:	4689      	mov	r9, r1
 8004d36:	492c      	ldr	r1, [pc, #176]	; (8004de8 <_strtod_l+0x590>)
 8004d38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004d3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d48:	f7fb fc5e 	bl	8000608 <__aeabi_dmul>
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <_strtod_l+0x594>)
 8004d4e:	460a      	mov	r2, r1
 8004d50:	400b      	ands	r3, r1
 8004d52:	4927      	ldr	r1, [pc, #156]	; (8004df0 <_strtod_l+0x598>)
 8004d54:	428b      	cmp	r3, r1
 8004d56:	4680      	mov	r8, r0
 8004d58:	d8be      	bhi.n	8004cd8 <_strtod_l+0x480>
 8004d5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004d5e:	428b      	cmp	r3, r1
 8004d60:	bf86      	itte	hi
 8004d62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8004df4 <_strtod_l+0x59c>
 8004d66:	f04f 38ff 	movhi.w	r8, #4294967295
 8004d6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	e07b      	b.n	8004e6c <_strtod_l+0x614>
 8004d74:	07ea      	lsls	r2, r5, #31
 8004d76:	d505      	bpl.n	8004d84 <_strtod_l+0x52c>
 8004d78:	9b04      	ldr	r3, [sp, #16]
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fc43 	bl	8000608 <__aeabi_dmul>
 8004d82:	2301      	movs	r3, #1
 8004d84:	9a04      	ldr	r2, [sp, #16]
 8004d86:	3208      	adds	r2, #8
 8004d88:	f10a 0a01 	add.w	sl, sl, #1
 8004d8c:	106d      	asrs	r5, r5, #1
 8004d8e:	9204      	str	r2, [sp, #16]
 8004d90:	e7cc      	b.n	8004d2c <_strtod_l+0x4d4>
 8004d92:	d0ec      	beq.n	8004d6e <_strtod_l+0x516>
 8004d94:	426d      	negs	r5, r5
 8004d96:	f015 020f 	ands.w	r2, r5, #15
 8004d9a:	d00a      	beq.n	8004db2 <_strtod_l+0x55a>
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <_strtod_l+0x58c>)
 8004d9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004da2:	4640      	mov	r0, r8
 8004da4:	4649      	mov	r1, r9
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb fd57 	bl	800085c <__aeabi_ddiv>
 8004dae:	4680      	mov	r8, r0
 8004db0:	4689      	mov	r9, r1
 8004db2:	112d      	asrs	r5, r5, #4
 8004db4:	d0db      	beq.n	8004d6e <_strtod_l+0x516>
 8004db6:	2d1f      	cmp	r5, #31
 8004db8:	dd1e      	ble.n	8004df8 <_strtod_l+0x5a0>
 8004dba:	2500      	movs	r5, #0
 8004dbc:	46ab      	mov	fp, r5
 8004dbe:	9509      	str	r5, [sp, #36]	; 0x24
 8004dc0:	9505      	str	r5, [sp, #20]
 8004dc2:	2322      	movs	r3, #34	; 0x22
 8004dc4:	f04f 0800 	mov.w	r8, #0
 8004dc8:	f04f 0900 	mov.w	r9, #0
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	e78d      	b.n	8004cec <_strtod_l+0x494>
 8004dd0:	08007c38 	.word	0x08007c38
 8004dd4:	08007c50 	.word	0x08007c50
 8004dd8:	08007c2f 	.word	0x08007c2f
 8004ddc:	08007c32 	.word	0x08007c32
 8004de0:	08007fff 	.word	0x08007fff
 8004de4:	08007ef0 	.word	0x08007ef0
 8004de8:	08007ec8 	.word	0x08007ec8
 8004dec:	7ff00000 	.word	0x7ff00000
 8004df0:	7ca00000 	.word	0x7ca00000
 8004df4:	7fefffff 	.word	0x7fefffff
 8004df8:	f015 0310 	ands.w	r3, r5, #16
 8004dfc:	bf18      	it	ne
 8004dfe:	236a      	movne	r3, #106	; 0x6a
 8004e00:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80051a4 <_strtod_l+0x94c>
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	4640      	mov	r0, r8
 8004e08:	4649      	mov	r1, r9
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	07ea      	lsls	r2, r5, #31
 8004e0e:	d504      	bpl.n	8004e1a <_strtod_l+0x5c2>
 8004e10:	e9da 2300 	ldrd	r2, r3, [sl]
 8004e14:	f7fb fbf8 	bl	8000608 <__aeabi_dmul>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	106d      	asrs	r5, r5, #1
 8004e1c:	f10a 0a08 	add.w	sl, sl, #8
 8004e20:	d1f4      	bne.n	8004e0c <_strtod_l+0x5b4>
 8004e22:	b10b      	cbz	r3, 8004e28 <_strtod_l+0x5d0>
 8004e24:	4680      	mov	r8, r0
 8004e26:	4689      	mov	r9, r1
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	b1bb      	cbz	r3, 8004e5c <_strtod_l+0x604>
 8004e2c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004e30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	4649      	mov	r1, r9
 8004e38:	dd10      	ble.n	8004e5c <_strtod_l+0x604>
 8004e3a:	2b1f      	cmp	r3, #31
 8004e3c:	f340 811e 	ble.w	800507c <_strtod_l+0x824>
 8004e40:	2b34      	cmp	r3, #52	; 0x34
 8004e42:	bfde      	ittt	le
 8004e44:	f04f 33ff 	movle.w	r3, #4294967295
 8004e48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004e4c:	4093      	lslle	r3, r2
 8004e4e:	f04f 0800 	mov.w	r8, #0
 8004e52:	bfcc      	ite	gt
 8004e54:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004e58:	ea03 0901 	andle.w	r9, r3, r1
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2300      	movs	r3, #0
 8004e60:	4640      	mov	r0, r8
 8004e62:	4649      	mov	r1, r9
 8004e64:	f7fb fe38 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d1a6      	bne.n	8004dba <_strtod_l+0x562>
 8004e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e72:	4633      	mov	r3, r6
 8004e74:	465a      	mov	r2, fp
 8004e76:	4620      	mov	r0, r4
 8004e78:	f001 fef8 	bl	8006c6c <__s2b>
 8004e7c:	9009      	str	r0, [sp, #36]	; 0x24
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f43f af2a 	beq.w	8004cd8 <_strtod_l+0x480>
 8004e84:	9a08      	ldr	r2, [sp, #32]
 8004e86:	9b05      	ldr	r3, [sp, #20]
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	eba3 0307 	sub.w	r3, r3, r7
 8004e8e:	bfa8      	it	ge
 8004e90:	2300      	movge	r3, #0
 8004e92:	930c      	str	r3, [sp, #48]	; 0x30
 8004e94:	2500      	movs	r5, #0
 8004e96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004e9a:	9312      	str	r3, [sp, #72]	; 0x48
 8004e9c:	46ab      	mov	fp, r5
 8004e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	f001 fe3a 	bl	8006b1c <_Balloc>
 8004ea8:	9005      	str	r0, [sp, #20]
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f43f af18 	beq.w	8004ce0 <_strtod_l+0x488>
 8004eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	3202      	adds	r2, #2
 8004eb6:	f103 010c 	add.w	r1, r3, #12
 8004eba:	0092      	lsls	r2, r2, #2
 8004ebc:	300c      	adds	r0, #12
 8004ebe:	f001 faab 	bl	8006418 <memcpy>
 8004ec2:	ec49 8b10 	vmov	d0, r8, r9
 8004ec6:	aa18      	add	r2, sp, #96	; 0x60
 8004ec8:	a917      	add	r1, sp, #92	; 0x5c
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f002 fa02 	bl	80072d4 <__d2b>
 8004ed0:	ec49 8b18 	vmov	d8, r8, r9
 8004ed4:	9016      	str	r0, [sp, #88]	; 0x58
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	f43f af02 	beq.w	8004ce0 <_strtod_l+0x488>
 8004edc:	2101      	movs	r1, #1
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f001 ff5c 	bl	8006d9c <__i2b>
 8004ee4:	4683      	mov	fp, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	f43f aefa 	beq.w	8004ce0 <_strtod_l+0x488>
 8004eec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004eee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	bfab      	itete	ge
 8004ef4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8004ef6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8004ef8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004efa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8004efe:	bfac      	ite	ge
 8004f00:	eb06 0a03 	addge.w	sl, r6, r3
 8004f04:	1b9f      	sublt	r7, r3, r6
 8004f06:	9b04      	ldr	r3, [sp, #16]
 8004f08:	1af6      	subs	r6, r6, r3
 8004f0a:	4416      	add	r6, r2
 8004f0c:	4ba0      	ldr	r3, [pc, #640]	; (8005190 <_strtod_l+0x938>)
 8004f0e:	3e01      	subs	r6, #1
 8004f10:	429e      	cmp	r6, r3
 8004f12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004f16:	f280 80c4 	bge.w	80050a2 <_strtod_l+0x84a>
 8004f1a:	1b9b      	subs	r3, r3, r6
 8004f1c:	2b1f      	cmp	r3, #31
 8004f1e:	eba2 0203 	sub.w	r2, r2, r3
 8004f22:	f04f 0101 	mov.w	r1, #1
 8004f26:	f300 80b0 	bgt.w	800508a <_strtod_l+0x832>
 8004f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2e:	930e      	str	r3, [sp, #56]	; 0x38
 8004f30:	2300      	movs	r3, #0
 8004f32:	930d      	str	r3, [sp, #52]	; 0x34
 8004f34:	eb0a 0602 	add.w	r6, sl, r2
 8004f38:	9b04      	ldr	r3, [sp, #16]
 8004f3a:	45b2      	cmp	sl, r6
 8004f3c:	4417      	add	r7, r2
 8004f3e:	441f      	add	r7, r3
 8004f40:	4653      	mov	r3, sl
 8004f42:	bfa8      	it	ge
 8004f44:	4633      	movge	r3, r6
 8004f46:	42bb      	cmp	r3, r7
 8004f48:	bfa8      	it	ge
 8004f4a:	463b      	movge	r3, r7
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bfc2      	ittt	gt
 8004f50:	1af6      	subgt	r6, r6, r3
 8004f52:	1aff      	subgt	r7, r7, r3
 8004f54:	ebaa 0a03 	subgt.w	sl, sl, r3
 8004f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	dd17      	ble.n	8004f8e <_strtod_l+0x736>
 8004f5e:	4659      	mov	r1, fp
 8004f60:	461a      	mov	r2, r3
 8004f62:	4620      	mov	r0, r4
 8004f64:	f001 ffda 	bl	8006f1c <__pow5mult>
 8004f68:	4683      	mov	fp, r0
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f43f aeb8 	beq.w	8004ce0 <_strtod_l+0x488>
 8004f70:	4601      	mov	r1, r0
 8004f72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004f74:	4620      	mov	r0, r4
 8004f76:	f001 ff27 	bl	8006dc8 <__multiply>
 8004f7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	f43f aeaf 	beq.w	8004ce0 <_strtod_l+0x488>
 8004f82:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004f84:	4620      	mov	r0, r4
 8004f86:	f001 fe09 	bl	8006b9c <_Bfree>
 8004f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f8c:	9316      	str	r3, [sp, #88]	; 0x58
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	f300 808c 	bgt.w	80050ac <_strtod_l+0x854>
 8004f94:	9b08      	ldr	r3, [sp, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd08      	ble.n	8004fac <_strtod_l+0x754>
 8004f9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f9c:	9905      	ldr	r1, [sp, #20]
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f001 ffbc 	bl	8006f1c <__pow5mult>
 8004fa4:	9005      	str	r0, [sp, #20]
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f43f ae9a 	beq.w	8004ce0 <_strtod_l+0x488>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	dd08      	ble.n	8004fc2 <_strtod_l+0x76a>
 8004fb0:	9905      	ldr	r1, [sp, #20]
 8004fb2:	463a      	mov	r2, r7
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f002 f80b 	bl	8006fd0 <__lshift>
 8004fba:	9005      	str	r0, [sp, #20]
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	f43f ae8f 	beq.w	8004ce0 <_strtod_l+0x488>
 8004fc2:	f1ba 0f00 	cmp.w	sl, #0
 8004fc6:	dd08      	ble.n	8004fda <_strtod_l+0x782>
 8004fc8:	4659      	mov	r1, fp
 8004fca:	4652      	mov	r2, sl
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f001 ffff 	bl	8006fd0 <__lshift>
 8004fd2:	4683      	mov	fp, r0
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f43f ae83 	beq.w	8004ce0 <_strtod_l+0x488>
 8004fda:	9a05      	ldr	r2, [sp, #20]
 8004fdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f002 f87e 	bl	80070e0 <__mdiff>
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f43f ae7a 	beq.w	8004ce0 <_strtod_l+0x488>
 8004fec:	68c3      	ldr	r3, [r0, #12]
 8004fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60c3      	str	r3, [r0, #12]
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	f002 f857 	bl	80070a8 <__mcmp>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	da60      	bge.n	80050c0 <_strtod_l+0x868>
 8004ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005000:	ea53 0308 	orrs.w	r3, r3, r8
 8005004:	f040 8084 	bne.w	8005110 <_strtod_l+0x8b8>
 8005008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800500c:	2b00      	cmp	r3, #0
 800500e:	d17f      	bne.n	8005110 <_strtod_l+0x8b8>
 8005010:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005014:	0d1b      	lsrs	r3, r3, #20
 8005016:	051b      	lsls	r3, r3, #20
 8005018:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800501c:	d978      	bls.n	8005110 <_strtod_l+0x8b8>
 800501e:	696b      	ldr	r3, [r5, #20]
 8005020:	b913      	cbnz	r3, 8005028 <_strtod_l+0x7d0>
 8005022:	692b      	ldr	r3, [r5, #16]
 8005024:	2b01      	cmp	r3, #1
 8005026:	dd73      	ble.n	8005110 <_strtod_l+0x8b8>
 8005028:	4629      	mov	r1, r5
 800502a:	2201      	movs	r2, #1
 800502c:	4620      	mov	r0, r4
 800502e:	f001 ffcf 	bl	8006fd0 <__lshift>
 8005032:	4659      	mov	r1, fp
 8005034:	4605      	mov	r5, r0
 8005036:	f002 f837 	bl	80070a8 <__mcmp>
 800503a:	2800      	cmp	r0, #0
 800503c:	dd68      	ble.n	8005110 <_strtod_l+0x8b8>
 800503e:	9904      	ldr	r1, [sp, #16]
 8005040:	4a54      	ldr	r2, [pc, #336]	; (8005194 <_strtod_l+0x93c>)
 8005042:	464b      	mov	r3, r9
 8005044:	2900      	cmp	r1, #0
 8005046:	f000 8084 	beq.w	8005152 <_strtod_l+0x8fa>
 800504a:	ea02 0109 	and.w	r1, r2, r9
 800504e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005052:	dc7e      	bgt.n	8005152 <_strtod_l+0x8fa>
 8005054:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005058:	f77f aeb3 	ble.w	8004dc2 <_strtod_l+0x56a>
 800505c:	4b4e      	ldr	r3, [pc, #312]	; (8005198 <_strtod_l+0x940>)
 800505e:	4640      	mov	r0, r8
 8005060:	4649      	mov	r1, r9
 8005062:	2200      	movs	r2, #0
 8005064:	f7fb fad0 	bl	8000608 <__aeabi_dmul>
 8005068:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <_strtod_l+0x93c>)
 800506a:	400b      	ands	r3, r1
 800506c:	4680      	mov	r8, r0
 800506e:	4689      	mov	r9, r1
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f ae3f 	bne.w	8004cf4 <_strtod_l+0x49c>
 8005076:	2322      	movs	r3, #34	; 0x22
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	e63b      	b.n	8004cf4 <_strtod_l+0x49c>
 800507c:	f04f 32ff 	mov.w	r2, #4294967295
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	ea03 0808 	and.w	r8, r3, r8
 8005088:	e6e8      	b.n	8004e5c <_strtod_l+0x604>
 800508a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800508e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005092:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005096:	36e2      	adds	r6, #226	; 0xe2
 8005098:	fa01 f306 	lsl.w	r3, r1, r6
 800509c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80050a0:	e748      	b.n	8004f34 <_strtod_l+0x6dc>
 80050a2:	2100      	movs	r1, #0
 80050a4:	2301      	movs	r3, #1
 80050a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80050aa:	e743      	b.n	8004f34 <_strtod_l+0x6dc>
 80050ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80050ae:	4632      	mov	r2, r6
 80050b0:	4620      	mov	r0, r4
 80050b2:	f001 ff8d 	bl	8006fd0 <__lshift>
 80050b6:	9016      	str	r0, [sp, #88]	; 0x58
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f47f af6b 	bne.w	8004f94 <_strtod_l+0x73c>
 80050be:	e60f      	b.n	8004ce0 <_strtod_l+0x488>
 80050c0:	46ca      	mov	sl, r9
 80050c2:	d171      	bne.n	80051a8 <_strtod_l+0x950>
 80050c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050ca:	b352      	cbz	r2, 8005122 <_strtod_l+0x8ca>
 80050cc:	4a33      	ldr	r2, [pc, #204]	; (800519c <_strtod_l+0x944>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d12a      	bne.n	8005128 <_strtod_l+0x8d0>
 80050d2:	9b04      	ldr	r3, [sp, #16]
 80050d4:	4641      	mov	r1, r8
 80050d6:	b1fb      	cbz	r3, 8005118 <_strtod_l+0x8c0>
 80050d8:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <_strtod_l+0x93c>)
 80050da:	ea09 0303 	and.w	r3, r9, r3
 80050de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	d81a      	bhi.n	800511e <_strtod_l+0x8c6>
 80050e8:	0d1b      	lsrs	r3, r3, #20
 80050ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	4299      	cmp	r1, r3
 80050f4:	d118      	bne.n	8005128 <_strtod_l+0x8d0>
 80050f6:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <_strtod_l+0x948>)
 80050f8:	459a      	cmp	sl, r3
 80050fa:	d102      	bne.n	8005102 <_strtod_l+0x8aa>
 80050fc:	3101      	adds	r1, #1
 80050fe:	f43f adef 	beq.w	8004ce0 <_strtod_l+0x488>
 8005102:	4b24      	ldr	r3, [pc, #144]	; (8005194 <_strtod_l+0x93c>)
 8005104:	ea0a 0303 	and.w	r3, sl, r3
 8005108:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800510c:	f04f 0800 	mov.w	r8, #0
 8005110:	9b04      	ldr	r3, [sp, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1a2      	bne.n	800505c <_strtod_l+0x804>
 8005116:	e5ed      	b.n	8004cf4 <_strtod_l+0x49c>
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	e7e9      	b.n	80050f2 <_strtod_l+0x89a>
 800511e:	4613      	mov	r3, r2
 8005120:	e7e7      	b.n	80050f2 <_strtod_l+0x89a>
 8005122:	ea53 0308 	orrs.w	r3, r3, r8
 8005126:	d08a      	beq.n	800503e <_strtod_l+0x7e6>
 8005128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800512a:	b1e3      	cbz	r3, 8005166 <_strtod_l+0x90e>
 800512c:	ea13 0f0a 	tst.w	r3, sl
 8005130:	d0ee      	beq.n	8005110 <_strtod_l+0x8b8>
 8005132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005134:	9a04      	ldr	r2, [sp, #16]
 8005136:	4640      	mov	r0, r8
 8005138:	4649      	mov	r1, r9
 800513a:	b1c3      	cbz	r3, 800516e <_strtod_l+0x916>
 800513c:	f7ff fb6e 	bl	800481c <sulp>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	ec51 0b18 	vmov	r0, r1, d8
 8005148:	f7fb f8a8 	bl	800029c <__adddf3>
 800514c:	4680      	mov	r8, r0
 800514e:	4689      	mov	r9, r1
 8005150:	e7de      	b.n	8005110 <_strtod_l+0x8b8>
 8005152:	4013      	ands	r3, r2
 8005154:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005158:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800515c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005160:	f04f 38ff 	mov.w	r8, #4294967295
 8005164:	e7d4      	b.n	8005110 <_strtod_l+0x8b8>
 8005166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005168:	ea13 0f08 	tst.w	r3, r8
 800516c:	e7e0      	b.n	8005130 <_strtod_l+0x8d8>
 800516e:	f7ff fb55 	bl	800481c <sulp>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	ec51 0b18 	vmov	r0, r1, d8
 800517a:	f7fb f88d 	bl	8000298 <__aeabi_dsub>
 800517e:	2200      	movs	r2, #0
 8005180:	2300      	movs	r3, #0
 8005182:	4680      	mov	r8, r0
 8005184:	4689      	mov	r9, r1
 8005186:	f7fb fca7 	bl	8000ad8 <__aeabi_dcmpeq>
 800518a:	2800      	cmp	r0, #0
 800518c:	d0c0      	beq.n	8005110 <_strtod_l+0x8b8>
 800518e:	e618      	b.n	8004dc2 <_strtod_l+0x56a>
 8005190:	fffffc02 	.word	0xfffffc02
 8005194:	7ff00000 	.word	0x7ff00000
 8005198:	39500000 	.word	0x39500000
 800519c:	000fffff 	.word	0x000fffff
 80051a0:	7fefffff 	.word	0x7fefffff
 80051a4:	08007c68 	.word	0x08007c68
 80051a8:	4659      	mov	r1, fp
 80051aa:	4628      	mov	r0, r5
 80051ac:	f002 f8ec 	bl	8007388 <__ratio>
 80051b0:	ec57 6b10 	vmov	r6, r7, d0
 80051b4:	ee10 0a10 	vmov	r0, s0
 80051b8:	2200      	movs	r2, #0
 80051ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb fc9e 	bl	8000b00 <__aeabi_dcmple>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d071      	beq.n	80052ac <_strtod_l+0xa54>
 80051c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d17c      	bne.n	80052c8 <_strtod_l+0xa70>
 80051ce:	f1b8 0f00 	cmp.w	r8, #0
 80051d2:	d15a      	bne.n	800528a <_strtod_l+0xa32>
 80051d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d15d      	bne.n	8005298 <_strtod_l+0xa40>
 80051dc:	4b90      	ldr	r3, [pc, #576]	; (8005420 <_strtod_l+0xbc8>)
 80051de:	2200      	movs	r2, #0
 80051e0:	4630      	mov	r0, r6
 80051e2:	4639      	mov	r1, r7
 80051e4:	f7fb fc82 	bl	8000aec <__aeabi_dcmplt>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d15c      	bne.n	80052a6 <_strtod_l+0xa4e>
 80051ec:	4630      	mov	r0, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	4b8c      	ldr	r3, [pc, #560]	; (8005424 <_strtod_l+0xbcc>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	f7fb fa08 	bl	8000608 <__aeabi_dmul>
 80051f8:	4606      	mov	r6, r0
 80051fa:	460f      	mov	r7, r1
 80051fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005200:	9606      	str	r6, [sp, #24]
 8005202:	9307      	str	r3, [sp, #28]
 8005204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005208:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800520c:	4b86      	ldr	r3, [pc, #536]	; (8005428 <_strtod_l+0xbd0>)
 800520e:	ea0a 0303 	and.w	r3, sl, r3
 8005212:	930d      	str	r3, [sp, #52]	; 0x34
 8005214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005216:	4b85      	ldr	r3, [pc, #532]	; (800542c <_strtod_l+0xbd4>)
 8005218:	429a      	cmp	r2, r3
 800521a:	f040 8090 	bne.w	800533e <_strtod_l+0xae6>
 800521e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005222:	ec49 8b10 	vmov	d0, r8, r9
 8005226:	f001 ffe5 	bl	80071f4 <__ulp>
 800522a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800522e:	ec51 0b10 	vmov	r0, r1, d0
 8005232:	f7fb f9e9 	bl	8000608 <__aeabi_dmul>
 8005236:	4642      	mov	r2, r8
 8005238:	464b      	mov	r3, r9
 800523a:	f7fb f82f 	bl	800029c <__adddf3>
 800523e:	460b      	mov	r3, r1
 8005240:	4979      	ldr	r1, [pc, #484]	; (8005428 <_strtod_l+0xbd0>)
 8005242:	4a7b      	ldr	r2, [pc, #492]	; (8005430 <_strtod_l+0xbd8>)
 8005244:	4019      	ands	r1, r3
 8005246:	4291      	cmp	r1, r2
 8005248:	4680      	mov	r8, r0
 800524a:	d944      	bls.n	80052d6 <_strtod_l+0xa7e>
 800524c:	ee18 2a90 	vmov	r2, s17
 8005250:	4b78      	ldr	r3, [pc, #480]	; (8005434 <_strtod_l+0xbdc>)
 8005252:	429a      	cmp	r2, r3
 8005254:	d104      	bne.n	8005260 <_strtod_l+0xa08>
 8005256:	ee18 3a10 	vmov	r3, s16
 800525a:	3301      	adds	r3, #1
 800525c:	f43f ad40 	beq.w	8004ce0 <_strtod_l+0x488>
 8005260:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005434 <_strtod_l+0xbdc>
 8005264:	f04f 38ff 	mov.w	r8, #4294967295
 8005268:	9916      	ldr	r1, [sp, #88]	; 0x58
 800526a:	4620      	mov	r0, r4
 800526c:	f001 fc96 	bl	8006b9c <_Bfree>
 8005270:	9905      	ldr	r1, [sp, #20]
 8005272:	4620      	mov	r0, r4
 8005274:	f001 fc92 	bl	8006b9c <_Bfree>
 8005278:	4659      	mov	r1, fp
 800527a:	4620      	mov	r0, r4
 800527c:	f001 fc8e 	bl	8006b9c <_Bfree>
 8005280:	4629      	mov	r1, r5
 8005282:	4620      	mov	r0, r4
 8005284:	f001 fc8a 	bl	8006b9c <_Bfree>
 8005288:	e609      	b.n	8004e9e <_strtod_l+0x646>
 800528a:	f1b8 0f01 	cmp.w	r8, #1
 800528e:	d103      	bne.n	8005298 <_strtod_l+0xa40>
 8005290:	f1b9 0f00 	cmp.w	r9, #0
 8005294:	f43f ad95 	beq.w	8004dc2 <_strtod_l+0x56a>
 8005298:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80053f0 <_strtod_l+0xb98>
 800529c:	4f60      	ldr	r7, [pc, #384]	; (8005420 <_strtod_l+0xbc8>)
 800529e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80052a2:	2600      	movs	r6, #0
 80052a4:	e7ae      	b.n	8005204 <_strtod_l+0x9ac>
 80052a6:	4f5f      	ldr	r7, [pc, #380]	; (8005424 <_strtod_l+0xbcc>)
 80052a8:	2600      	movs	r6, #0
 80052aa:	e7a7      	b.n	80051fc <_strtod_l+0x9a4>
 80052ac:	4b5d      	ldr	r3, [pc, #372]	; (8005424 <_strtod_l+0xbcc>)
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	2200      	movs	r2, #0
 80052b4:	f7fb f9a8 	bl	8000608 <__aeabi_dmul>
 80052b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ba:	4606      	mov	r6, r0
 80052bc:	460f      	mov	r7, r1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d09c      	beq.n	80051fc <_strtod_l+0x9a4>
 80052c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80052c6:	e79d      	b.n	8005204 <_strtod_l+0x9ac>
 80052c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80053f8 <_strtod_l+0xba0>
 80052cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80052d0:	ec57 6b17 	vmov	r6, r7, d7
 80052d4:	e796      	b.n	8005204 <_strtod_l+0x9ac>
 80052d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	46ca      	mov	sl, r9
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1c2      	bne.n	8005268 <_strtod_l+0xa10>
 80052e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052e8:	0d1b      	lsrs	r3, r3, #20
 80052ea:	051b      	lsls	r3, r3, #20
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d1bb      	bne.n	8005268 <_strtod_l+0xa10>
 80052f0:	4630      	mov	r0, r6
 80052f2:	4639      	mov	r1, r7
 80052f4:	f7fb fcc0 	bl	8000c78 <__aeabi_d2lz>
 80052f8:	f7fb f958 	bl	80005ac <__aeabi_l2d>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4630      	mov	r0, r6
 8005302:	4639      	mov	r1, r7
 8005304:	f7fa ffc8 	bl	8000298 <__aeabi_dsub>
 8005308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800530a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800530e:	ea43 0308 	orr.w	r3, r3, r8
 8005312:	4313      	orrs	r3, r2
 8005314:	4606      	mov	r6, r0
 8005316:	460f      	mov	r7, r1
 8005318:	d054      	beq.n	80053c4 <_strtod_l+0xb6c>
 800531a:	a339      	add	r3, pc, #228	; (adr r3, 8005400 <_strtod_l+0xba8>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fb fbe4 	bl	8000aec <__aeabi_dcmplt>
 8005324:	2800      	cmp	r0, #0
 8005326:	f47f ace5 	bne.w	8004cf4 <_strtod_l+0x49c>
 800532a:	a337      	add	r3, pc, #220	; (adr r3, 8005408 <_strtod_l+0xbb0>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	f7fb fbf8 	bl	8000b28 <__aeabi_dcmpgt>
 8005338:	2800      	cmp	r0, #0
 800533a:	d095      	beq.n	8005268 <_strtod_l+0xa10>
 800533c:	e4da      	b.n	8004cf4 <_strtod_l+0x49c>
 800533e:	9b04      	ldr	r3, [sp, #16]
 8005340:	b333      	cbz	r3, 8005390 <_strtod_l+0xb38>
 8005342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005344:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005348:	d822      	bhi.n	8005390 <_strtod_l+0xb38>
 800534a:	a331      	add	r3, pc, #196	; (adr r3, 8005410 <_strtod_l+0xbb8>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	4630      	mov	r0, r6
 8005352:	4639      	mov	r1, r7
 8005354:	f7fb fbd4 	bl	8000b00 <__aeabi_dcmple>
 8005358:	b1a0      	cbz	r0, 8005384 <_strtod_l+0xb2c>
 800535a:	4639      	mov	r1, r7
 800535c:	4630      	mov	r0, r6
 800535e:	f7fb fc03 	bl	8000b68 <__aeabi_d2uiz>
 8005362:	2801      	cmp	r0, #1
 8005364:	bf38      	it	cc
 8005366:	2001      	movcc	r0, #1
 8005368:	f7fb f8d4 	bl	8000514 <__aeabi_ui2d>
 800536c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800536e:	4606      	mov	r6, r0
 8005370:	460f      	mov	r7, r1
 8005372:	bb23      	cbnz	r3, 80053be <_strtod_l+0xb66>
 8005374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005378:	9010      	str	r0, [sp, #64]	; 0x40
 800537a:	9311      	str	r3, [sp, #68]	; 0x44
 800537c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005380:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005388:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005390:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005394:	eeb0 0a48 	vmov.f32	s0, s16
 8005398:	eef0 0a68 	vmov.f32	s1, s17
 800539c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80053a0:	f001 ff28 	bl	80071f4 <__ulp>
 80053a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80053a8:	ec53 2b10 	vmov	r2, r3, d0
 80053ac:	f7fb f92c 	bl	8000608 <__aeabi_dmul>
 80053b0:	ec53 2b18 	vmov	r2, r3, d8
 80053b4:	f7fa ff72 	bl	800029c <__adddf3>
 80053b8:	4680      	mov	r8, r0
 80053ba:	4689      	mov	r9, r1
 80053bc:	e78d      	b.n	80052da <_strtod_l+0xa82>
 80053be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80053c2:	e7db      	b.n	800537c <_strtod_l+0xb24>
 80053c4:	a314      	add	r3, pc, #80	; (adr r3, 8005418 <_strtod_l+0xbc0>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fb fb8f 	bl	8000aec <__aeabi_dcmplt>
 80053ce:	e7b3      	b.n	8005338 <_strtod_l+0xae0>
 80053d0:	2300      	movs	r3, #0
 80053d2:	930a      	str	r3, [sp, #40]	; 0x28
 80053d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	f7ff ba7c 	b.w	80048d6 <_strtod_l+0x7e>
 80053de:	2a65      	cmp	r2, #101	; 0x65
 80053e0:	f43f ab75 	beq.w	8004ace <_strtod_l+0x276>
 80053e4:	2a45      	cmp	r2, #69	; 0x45
 80053e6:	f43f ab72 	beq.w	8004ace <_strtod_l+0x276>
 80053ea:	2301      	movs	r3, #1
 80053ec:	f7ff bbaa 	b.w	8004b44 <_strtod_l+0x2ec>
 80053f0:	00000000 	.word	0x00000000
 80053f4:	bff00000 	.word	0xbff00000
 80053f8:	00000000 	.word	0x00000000
 80053fc:	3ff00000 	.word	0x3ff00000
 8005400:	94a03595 	.word	0x94a03595
 8005404:	3fdfffff 	.word	0x3fdfffff
 8005408:	35afe535 	.word	0x35afe535
 800540c:	3fe00000 	.word	0x3fe00000
 8005410:	ffc00000 	.word	0xffc00000
 8005414:	41dfffff 	.word	0x41dfffff
 8005418:	94a03595 	.word	0x94a03595
 800541c:	3fcfffff 	.word	0x3fcfffff
 8005420:	3ff00000 	.word	0x3ff00000
 8005424:	3fe00000 	.word	0x3fe00000
 8005428:	7ff00000 	.word	0x7ff00000
 800542c:	7fe00000 	.word	0x7fe00000
 8005430:	7c9fffff 	.word	0x7c9fffff
 8005434:	7fefffff 	.word	0x7fefffff

08005438 <_strtod_r>:
 8005438:	4b01      	ldr	r3, [pc, #4]	; (8005440 <_strtod_r+0x8>)
 800543a:	f7ff ba0d 	b.w	8004858 <_strtod_l>
 800543e:	bf00      	nop
 8005440:	20000068 	.word	0x20000068

08005444 <_strtol_l.constprop.0>:
 8005444:	2b01      	cmp	r3, #1
 8005446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544a:	d001      	beq.n	8005450 <_strtol_l.constprop.0+0xc>
 800544c:	2b24      	cmp	r3, #36	; 0x24
 800544e:	d906      	bls.n	800545e <_strtol_l.constprop.0+0x1a>
 8005450:	f7ff f8ba 	bl	80045c8 <__errno>
 8005454:	2316      	movs	r3, #22
 8005456:	6003      	str	r3, [r0, #0]
 8005458:	2000      	movs	r0, #0
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005544 <_strtol_l.constprop.0+0x100>
 8005462:	460d      	mov	r5, r1
 8005464:	462e      	mov	r6, r5
 8005466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800546a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800546e:	f017 0708 	ands.w	r7, r7, #8
 8005472:	d1f7      	bne.n	8005464 <_strtol_l.constprop.0+0x20>
 8005474:	2c2d      	cmp	r4, #45	; 0x2d
 8005476:	d132      	bne.n	80054de <_strtol_l.constprop.0+0x9a>
 8005478:	782c      	ldrb	r4, [r5, #0]
 800547a:	2701      	movs	r7, #1
 800547c:	1cb5      	adds	r5, r6, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d05b      	beq.n	800553a <_strtol_l.constprop.0+0xf6>
 8005482:	2b10      	cmp	r3, #16
 8005484:	d109      	bne.n	800549a <_strtol_l.constprop.0+0x56>
 8005486:	2c30      	cmp	r4, #48	; 0x30
 8005488:	d107      	bne.n	800549a <_strtol_l.constprop.0+0x56>
 800548a:	782c      	ldrb	r4, [r5, #0]
 800548c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005490:	2c58      	cmp	r4, #88	; 0x58
 8005492:	d14d      	bne.n	8005530 <_strtol_l.constprop.0+0xec>
 8005494:	786c      	ldrb	r4, [r5, #1]
 8005496:	2310      	movs	r3, #16
 8005498:	3502      	adds	r5, #2
 800549a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800549e:	f108 38ff 	add.w	r8, r8, #4294967295
 80054a2:	f04f 0e00 	mov.w	lr, #0
 80054a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80054aa:	4676      	mov	r6, lr
 80054ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80054b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80054b4:	f1bc 0f09 	cmp.w	ip, #9
 80054b8:	d816      	bhi.n	80054e8 <_strtol_l.constprop.0+0xa4>
 80054ba:	4664      	mov	r4, ip
 80054bc:	42a3      	cmp	r3, r4
 80054be:	dd24      	ble.n	800550a <_strtol_l.constprop.0+0xc6>
 80054c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80054c4:	d008      	beq.n	80054d8 <_strtol_l.constprop.0+0x94>
 80054c6:	45b1      	cmp	r9, r6
 80054c8:	d31c      	bcc.n	8005504 <_strtol_l.constprop.0+0xc0>
 80054ca:	d101      	bne.n	80054d0 <_strtol_l.constprop.0+0x8c>
 80054cc:	45a2      	cmp	sl, r4
 80054ce:	db19      	blt.n	8005504 <_strtol_l.constprop.0+0xc0>
 80054d0:	fb06 4603 	mla	r6, r6, r3, r4
 80054d4:	f04f 0e01 	mov.w	lr, #1
 80054d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054dc:	e7e8      	b.n	80054b0 <_strtol_l.constprop.0+0x6c>
 80054de:	2c2b      	cmp	r4, #43	; 0x2b
 80054e0:	bf04      	itt	eq
 80054e2:	782c      	ldrbeq	r4, [r5, #0]
 80054e4:	1cb5      	addeq	r5, r6, #2
 80054e6:	e7ca      	b.n	800547e <_strtol_l.constprop.0+0x3a>
 80054e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80054ec:	f1bc 0f19 	cmp.w	ip, #25
 80054f0:	d801      	bhi.n	80054f6 <_strtol_l.constprop.0+0xb2>
 80054f2:	3c37      	subs	r4, #55	; 0x37
 80054f4:	e7e2      	b.n	80054bc <_strtol_l.constprop.0+0x78>
 80054f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80054fa:	f1bc 0f19 	cmp.w	ip, #25
 80054fe:	d804      	bhi.n	800550a <_strtol_l.constprop.0+0xc6>
 8005500:	3c57      	subs	r4, #87	; 0x57
 8005502:	e7db      	b.n	80054bc <_strtol_l.constprop.0+0x78>
 8005504:	f04f 3eff 	mov.w	lr, #4294967295
 8005508:	e7e6      	b.n	80054d8 <_strtol_l.constprop.0+0x94>
 800550a:	f1be 3fff 	cmp.w	lr, #4294967295
 800550e:	d105      	bne.n	800551c <_strtol_l.constprop.0+0xd8>
 8005510:	2322      	movs	r3, #34	; 0x22
 8005512:	6003      	str	r3, [r0, #0]
 8005514:	4646      	mov	r6, r8
 8005516:	b942      	cbnz	r2, 800552a <_strtol_l.constprop.0+0xe6>
 8005518:	4630      	mov	r0, r6
 800551a:	e79e      	b.n	800545a <_strtol_l.constprop.0+0x16>
 800551c:	b107      	cbz	r7, 8005520 <_strtol_l.constprop.0+0xdc>
 800551e:	4276      	negs	r6, r6
 8005520:	2a00      	cmp	r2, #0
 8005522:	d0f9      	beq.n	8005518 <_strtol_l.constprop.0+0xd4>
 8005524:	f1be 0f00 	cmp.w	lr, #0
 8005528:	d000      	beq.n	800552c <_strtol_l.constprop.0+0xe8>
 800552a:	1e69      	subs	r1, r5, #1
 800552c:	6011      	str	r1, [r2, #0]
 800552e:	e7f3      	b.n	8005518 <_strtol_l.constprop.0+0xd4>
 8005530:	2430      	movs	r4, #48	; 0x30
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1b1      	bne.n	800549a <_strtol_l.constprop.0+0x56>
 8005536:	2308      	movs	r3, #8
 8005538:	e7af      	b.n	800549a <_strtol_l.constprop.0+0x56>
 800553a:	2c30      	cmp	r4, #48	; 0x30
 800553c:	d0a5      	beq.n	800548a <_strtol_l.constprop.0+0x46>
 800553e:	230a      	movs	r3, #10
 8005540:	e7ab      	b.n	800549a <_strtol_l.constprop.0+0x56>
 8005542:	bf00      	nop
 8005544:	08007c91 	.word	0x08007c91

08005548 <_strtol_r>:
 8005548:	f7ff bf7c 	b.w	8005444 <_strtol_l.constprop.0>

0800554c <__ssputs_r>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	688e      	ldr	r6, [r1, #8]
 8005552:	461f      	mov	r7, r3
 8005554:	42be      	cmp	r6, r7
 8005556:	680b      	ldr	r3, [r1, #0]
 8005558:	4682      	mov	sl, r0
 800555a:	460c      	mov	r4, r1
 800555c:	4690      	mov	r8, r2
 800555e:	d82c      	bhi.n	80055ba <__ssputs_r+0x6e>
 8005560:	898a      	ldrh	r2, [r1, #12]
 8005562:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005566:	d026      	beq.n	80055b6 <__ssputs_r+0x6a>
 8005568:	6965      	ldr	r5, [r4, #20]
 800556a:	6909      	ldr	r1, [r1, #16]
 800556c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005570:	eba3 0901 	sub.w	r9, r3, r1
 8005574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005578:	1c7b      	adds	r3, r7, #1
 800557a:	444b      	add	r3, r9
 800557c:	106d      	asrs	r5, r5, #1
 800557e:	429d      	cmp	r5, r3
 8005580:	bf38      	it	cc
 8005582:	461d      	movcc	r5, r3
 8005584:	0553      	lsls	r3, r2, #21
 8005586:	d527      	bpl.n	80055d8 <__ssputs_r+0x8c>
 8005588:	4629      	mov	r1, r5
 800558a:	f7ff f8bb 	bl	8004704 <_malloc_r>
 800558e:	4606      	mov	r6, r0
 8005590:	b360      	cbz	r0, 80055ec <__ssputs_r+0xa0>
 8005592:	6921      	ldr	r1, [r4, #16]
 8005594:	464a      	mov	r2, r9
 8005596:	f000 ff3f 	bl	8006418 <memcpy>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a4:	81a3      	strh	r3, [r4, #12]
 80055a6:	6126      	str	r6, [r4, #16]
 80055a8:	6165      	str	r5, [r4, #20]
 80055aa:	444e      	add	r6, r9
 80055ac:	eba5 0509 	sub.w	r5, r5, r9
 80055b0:	6026      	str	r6, [r4, #0]
 80055b2:	60a5      	str	r5, [r4, #8]
 80055b4:	463e      	mov	r6, r7
 80055b6:	42be      	cmp	r6, r7
 80055b8:	d900      	bls.n	80055bc <__ssputs_r+0x70>
 80055ba:	463e      	mov	r6, r7
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	4632      	mov	r2, r6
 80055c0:	4641      	mov	r1, r8
 80055c2:	f000 feec 	bl	800639e <memmove>
 80055c6:	68a3      	ldr	r3, [r4, #8]
 80055c8:	1b9b      	subs	r3, r3, r6
 80055ca:	60a3      	str	r3, [r4, #8]
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	4433      	add	r3, r6
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	2000      	movs	r0, #0
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	462a      	mov	r2, r5
 80055da:	f001 ff4c 	bl	8007476 <_realloc_r>
 80055de:	4606      	mov	r6, r0
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d1e0      	bne.n	80055a6 <__ssputs_r+0x5a>
 80055e4:	6921      	ldr	r1, [r4, #16]
 80055e6:	4650      	mov	r0, sl
 80055e8:	f7ff f820 	bl	800462c <_free_r>
 80055ec:	230c      	movs	r3, #12
 80055ee:	f8ca 3000 	str.w	r3, [sl]
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295
 80055fe:	e7e9      	b.n	80055d4 <__ssputs_r+0x88>

08005600 <_svfiprintf_r>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	4698      	mov	r8, r3
 8005606:	898b      	ldrh	r3, [r1, #12]
 8005608:	061b      	lsls	r3, r3, #24
 800560a:	b09d      	sub	sp, #116	; 0x74
 800560c:	4607      	mov	r7, r0
 800560e:	460d      	mov	r5, r1
 8005610:	4614      	mov	r4, r2
 8005612:	d50e      	bpl.n	8005632 <_svfiprintf_r+0x32>
 8005614:	690b      	ldr	r3, [r1, #16]
 8005616:	b963      	cbnz	r3, 8005632 <_svfiprintf_r+0x32>
 8005618:	2140      	movs	r1, #64	; 0x40
 800561a:	f7ff f873 	bl	8004704 <_malloc_r>
 800561e:	6028      	str	r0, [r5, #0]
 8005620:	6128      	str	r0, [r5, #16]
 8005622:	b920      	cbnz	r0, 800562e <_svfiprintf_r+0x2e>
 8005624:	230c      	movs	r3, #12
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e0d0      	b.n	80057d0 <_svfiprintf_r+0x1d0>
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	616b      	str	r3, [r5, #20]
 8005632:	2300      	movs	r3, #0
 8005634:	9309      	str	r3, [sp, #36]	; 0x24
 8005636:	2320      	movs	r3, #32
 8005638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005640:	2330      	movs	r3, #48	; 0x30
 8005642:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057e8 <_svfiprintf_r+0x1e8>
 8005646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800564a:	f04f 0901 	mov.w	r9, #1
 800564e:	4623      	mov	r3, r4
 8005650:	469a      	mov	sl, r3
 8005652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005656:	b10a      	cbz	r2, 800565c <_svfiprintf_r+0x5c>
 8005658:	2a25      	cmp	r2, #37	; 0x25
 800565a:	d1f9      	bne.n	8005650 <_svfiprintf_r+0x50>
 800565c:	ebba 0b04 	subs.w	fp, sl, r4
 8005660:	d00b      	beq.n	800567a <_svfiprintf_r+0x7a>
 8005662:	465b      	mov	r3, fp
 8005664:	4622      	mov	r2, r4
 8005666:	4629      	mov	r1, r5
 8005668:	4638      	mov	r0, r7
 800566a:	f7ff ff6f 	bl	800554c <__ssputs_r>
 800566e:	3001      	adds	r0, #1
 8005670:	f000 80a9 	beq.w	80057c6 <_svfiprintf_r+0x1c6>
 8005674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005676:	445a      	add	r2, fp
 8005678:	9209      	str	r2, [sp, #36]	; 0x24
 800567a:	f89a 3000 	ldrb.w	r3, [sl]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80a1 	beq.w	80057c6 <_svfiprintf_r+0x1c6>
 8005684:	2300      	movs	r3, #0
 8005686:	f04f 32ff 	mov.w	r2, #4294967295
 800568a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568e:	f10a 0a01 	add.w	sl, sl, #1
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	9307      	str	r3, [sp, #28]
 8005696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800569a:	931a      	str	r3, [sp, #104]	; 0x68
 800569c:	4654      	mov	r4, sl
 800569e:	2205      	movs	r2, #5
 80056a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a4:	4850      	ldr	r0, [pc, #320]	; (80057e8 <_svfiprintf_r+0x1e8>)
 80056a6:	f7fa fda3 	bl	80001f0 <memchr>
 80056aa:	9a04      	ldr	r2, [sp, #16]
 80056ac:	b9d8      	cbnz	r0, 80056e6 <_svfiprintf_r+0xe6>
 80056ae:	06d0      	lsls	r0, r2, #27
 80056b0:	bf44      	itt	mi
 80056b2:	2320      	movmi	r3, #32
 80056b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b8:	0711      	lsls	r1, r2, #28
 80056ba:	bf44      	itt	mi
 80056bc:	232b      	movmi	r3, #43	; 0x2b
 80056be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c2:	f89a 3000 	ldrb.w	r3, [sl]
 80056c6:	2b2a      	cmp	r3, #42	; 0x2a
 80056c8:	d015      	beq.n	80056f6 <_svfiprintf_r+0xf6>
 80056ca:	9a07      	ldr	r2, [sp, #28]
 80056cc:	4654      	mov	r4, sl
 80056ce:	2000      	movs	r0, #0
 80056d0:	f04f 0c0a 	mov.w	ip, #10
 80056d4:	4621      	mov	r1, r4
 80056d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056da:	3b30      	subs	r3, #48	; 0x30
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d94d      	bls.n	800577c <_svfiprintf_r+0x17c>
 80056e0:	b1b0      	cbz	r0, 8005710 <_svfiprintf_r+0x110>
 80056e2:	9207      	str	r2, [sp, #28]
 80056e4:	e014      	b.n	8005710 <_svfiprintf_r+0x110>
 80056e6:	eba0 0308 	sub.w	r3, r0, r8
 80056ea:	fa09 f303 	lsl.w	r3, r9, r3
 80056ee:	4313      	orrs	r3, r2
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	46a2      	mov	sl, r4
 80056f4:	e7d2      	b.n	800569c <_svfiprintf_r+0x9c>
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	1d19      	adds	r1, r3, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	9103      	str	r1, [sp, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bfbb      	ittet	lt
 8005702:	425b      	neglt	r3, r3
 8005704:	f042 0202 	orrlt.w	r2, r2, #2
 8005708:	9307      	strge	r3, [sp, #28]
 800570a:	9307      	strlt	r3, [sp, #28]
 800570c:	bfb8      	it	lt
 800570e:	9204      	strlt	r2, [sp, #16]
 8005710:	7823      	ldrb	r3, [r4, #0]
 8005712:	2b2e      	cmp	r3, #46	; 0x2e
 8005714:	d10c      	bne.n	8005730 <_svfiprintf_r+0x130>
 8005716:	7863      	ldrb	r3, [r4, #1]
 8005718:	2b2a      	cmp	r3, #42	; 0x2a
 800571a:	d134      	bne.n	8005786 <_svfiprintf_r+0x186>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9203      	str	r2, [sp, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfb8      	it	lt
 8005728:	f04f 33ff 	movlt.w	r3, #4294967295
 800572c:	3402      	adds	r4, #2
 800572e:	9305      	str	r3, [sp, #20]
 8005730:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057f8 <_svfiprintf_r+0x1f8>
 8005734:	7821      	ldrb	r1, [r4, #0]
 8005736:	2203      	movs	r2, #3
 8005738:	4650      	mov	r0, sl
 800573a:	f7fa fd59 	bl	80001f0 <memchr>
 800573e:	b138      	cbz	r0, 8005750 <_svfiprintf_r+0x150>
 8005740:	9b04      	ldr	r3, [sp, #16]
 8005742:	eba0 000a 	sub.w	r0, r0, sl
 8005746:	2240      	movs	r2, #64	; 0x40
 8005748:	4082      	lsls	r2, r0
 800574a:	4313      	orrs	r3, r2
 800574c:	3401      	adds	r4, #1
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005754:	4825      	ldr	r0, [pc, #148]	; (80057ec <_svfiprintf_r+0x1ec>)
 8005756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575a:	2206      	movs	r2, #6
 800575c:	f7fa fd48 	bl	80001f0 <memchr>
 8005760:	2800      	cmp	r0, #0
 8005762:	d038      	beq.n	80057d6 <_svfiprintf_r+0x1d6>
 8005764:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <_svfiprintf_r+0x1f0>)
 8005766:	bb1b      	cbnz	r3, 80057b0 <_svfiprintf_r+0x1b0>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	3307      	adds	r3, #7
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	3308      	adds	r3, #8
 8005772:	9303      	str	r3, [sp, #12]
 8005774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005776:	4433      	add	r3, r6
 8005778:	9309      	str	r3, [sp, #36]	; 0x24
 800577a:	e768      	b.n	800564e <_svfiprintf_r+0x4e>
 800577c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005780:	460c      	mov	r4, r1
 8005782:	2001      	movs	r0, #1
 8005784:	e7a6      	b.n	80056d4 <_svfiprintf_r+0xd4>
 8005786:	2300      	movs	r3, #0
 8005788:	3401      	adds	r4, #1
 800578a:	9305      	str	r3, [sp, #20]
 800578c:	4619      	mov	r1, r3
 800578e:	f04f 0c0a 	mov.w	ip, #10
 8005792:	4620      	mov	r0, r4
 8005794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005798:	3a30      	subs	r2, #48	; 0x30
 800579a:	2a09      	cmp	r2, #9
 800579c:	d903      	bls.n	80057a6 <_svfiprintf_r+0x1a6>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0c6      	beq.n	8005730 <_svfiprintf_r+0x130>
 80057a2:	9105      	str	r1, [sp, #20]
 80057a4:	e7c4      	b.n	8005730 <_svfiprintf_r+0x130>
 80057a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057aa:	4604      	mov	r4, r0
 80057ac:	2301      	movs	r3, #1
 80057ae:	e7f0      	b.n	8005792 <_svfiprintf_r+0x192>
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	462a      	mov	r2, r5
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <_svfiprintf_r+0x1f4>)
 80057b8:	a904      	add	r1, sp, #16
 80057ba:	4638      	mov	r0, r7
 80057bc:	f3af 8000 	nop.w
 80057c0:	1c42      	adds	r2, r0, #1
 80057c2:	4606      	mov	r6, r0
 80057c4:	d1d6      	bne.n	8005774 <_svfiprintf_r+0x174>
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	065b      	lsls	r3, r3, #25
 80057ca:	f53f af2d 	bmi.w	8005628 <_svfiprintf_r+0x28>
 80057ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d0:	b01d      	add	sp, #116	; 0x74
 80057d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d6:	ab03      	add	r3, sp, #12
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	462a      	mov	r2, r5
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <_svfiprintf_r+0x1f4>)
 80057de:	a904      	add	r1, sp, #16
 80057e0:	4638      	mov	r0, r7
 80057e2:	f000 fa4b 	bl	8005c7c <_printf_i>
 80057e6:	e7eb      	b.n	80057c0 <_svfiprintf_r+0x1c0>
 80057e8:	08007d91 	.word	0x08007d91
 80057ec:	08007d9b 	.word	0x08007d9b
 80057f0:	00000000 	.word	0x00000000
 80057f4:	0800554d 	.word	0x0800554d
 80057f8:	08007d97 	.word	0x08007d97

080057fc <_sungetc_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	1c4b      	adds	r3, r1, #1
 8005800:	4614      	mov	r4, r2
 8005802:	d103      	bne.n	800580c <_sungetc_r+0x10>
 8005804:	f04f 35ff 	mov.w	r5, #4294967295
 8005808:	4628      	mov	r0, r5
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	8993      	ldrh	r3, [r2, #12]
 800580e:	f023 0320 	bic.w	r3, r3, #32
 8005812:	8193      	strh	r3, [r2, #12]
 8005814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005816:	6852      	ldr	r2, [r2, #4]
 8005818:	b2cd      	uxtb	r5, r1
 800581a:	b18b      	cbz	r3, 8005840 <_sungetc_r+0x44>
 800581c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800581e:	4293      	cmp	r3, r2
 8005820:	dd08      	ble.n	8005834 <_sungetc_r+0x38>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	1e5a      	subs	r2, r3, #1
 8005826:	6022      	str	r2, [r4, #0]
 8005828:	f803 5c01 	strb.w	r5, [r3, #-1]
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	3301      	adds	r3, #1
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	e7e9      	b.n	8005808 <_sungetc_r+0xc>
 8005834:	4621      	mov	r1, r4
 8005836:	f000 fd78 	bl	800632a <__submore>
 800583a:	2800      	cmp	r0, #0
 800583c:	d0f1      	beq.n	8005822 <_sungetc_r+0x26>
 800583e:	e7e1      	b.n	8005804 <_sungetc_r+0x8>
 8005840:	6921      	ldr	r1, [r4, #16]
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	b151      	cbz	r1, 800585c <_sungetc_r+0x60>
 8005846:	4299      	cmp	r1, r3
 8005848:	d208      	bcs.n	800585c <_sungetc_r+0x60>
 800584a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800584e:	42a9      	cmp	r1, r5
 8005850:	d104      	bne.n	800585c <_sungetc_r+0x60>
 8005852:	3b01      	subs	r3, #1
 8005854:	3201      	adds	r2, #1
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	6062      	str	r2, [r4, #4]
 800585a:	e7d5      	b.n	8005808 <_sungetc_r+0xc>
 800585c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005864:	6363      	str	r3, [r4, #52]	; 0x34
 8005866:	2303      	movs	r3, #3
 8005868:	63a3      	str	r3, [r4, #56]	; 0x38
 800586a:	4623      	mov	r3, r4
 800586c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	2301      	movs	r3, #1
 8005874:	e7dc      	b.n	8005830 <_sungetc_r+0x34>

08005876 <__ssrefill_r>:
 8005876:	b510      	push	{r4, lr}
 8005878:	460c      	mov	r4, r1
 800587a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800587c:	b169      	cbz	r1, 800589a <__ssrefill_r+0x24>
 800587e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005882:	4299      	cmp	r1, r3
 8005884:	d001      	beq.n	800588a <__ssrefill_r+0x14>
 8005886:	f7fe fed1 	bl	800462c <_free_r>
 800588a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800588c:	6063      	str	r3, [r4, #4]
 800588e:	2000      	movs	r0, #0
 8005890:	6360      	str	r0, [r4, #52]	; 0x34
 8005892:	b113      	cbz	r3, 800589a <__ssrefill_r+0x24>
 8005894:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	bd10      	pop	{r4, pc}
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	2300      	movs	r3, #0
 80058a0:	6063      	str	r3, [r4, #4]
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f043 0320 	orr.w	r3, r3, #32
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	e7f3      	b.n	8005898 <__ssrefill_r+0x22>

080058b0 <__ssvfiscanf_r>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	460c      	mov	r4, r1
 80058b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80058ba:	2100      	movs	r1, #0
 80058bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80058c0:	49a6      	ldr	r1, [pc, #664]	; (8005b5c <__ssvfiscanf_r+0x2ac>)
 80058c2:	91a0      	str	r1, [sp, #640]	; 0x280
 80058c4:	f10d 0804 	add.w	r8, sp, #4
 80058c8:	49a5      	ldr	r1, [pc, #660]	; (8005b60 <__ssvfiscanf_r+0x2b0>)
 80058ca:	4fa6      	ldr	r7, [pc, #664]	; (8005b64 <__ssvfiscanf_r+0x2b4>)
 80058cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005b68 <__ssvfiscanf_r+0x2b8>
 80058d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80058d4:	4606      	mov	r6, r0
 80058d6:	91a1      	str	r1, [sp, #644]	; 0x284
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	7813      	ldrb	r3, [r2, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 815a 	beq.w	8005b96 <__ssvfiscanf_r+0x2e6>
 80058e2:	5cf9      	ldrb	r1, [r7, r3]
 80058e4:	f011 0108 	ands.w	r1, r1, #8
 80058e8:	f102 0501 	add.w	r5, r2, #1
 80058ec:	d019      	beq.n	8005922 <__ssvfiscanf_r+0x72>
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dd0f      	ble.n	8005914 <__ssvfiscanf_r+0x64>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	5cba      	ldrb	r2, [r7, r2]
 80058fa:	0712      	lsls	r2, r2, #28
 80058fc:	d401      	bmi.n	8005902 <__ssvfiscanf_r+0x52>
 80058fe:	462a      	mov	r2, r5
 8005900:	e7eb      	b.n	80058da <__ssvfiscanf_r+0x2a>
 8005902:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005904:	3201      	adds	r2, #1
 8005906:	9245      	str	r2, [sp, #276]	; 0x114
 8005908:	6862      	ldr	r2, [r4, #4]
 800590a:	3301      	adds	r3, #1
 800590c:	3a01      	subs	r2, #1
 800590e:	6062      	str	r2, [r4, #4]
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	e7ec      	b.n	80058ee <__ssvfiscanf_r+0x3e>
 8005914:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005916:	4621      	mov	r1, r4
 8005918:	4630      	mov	r0, r6
 800591a:	4798      	blx	r3
 800591c:	2800      	cmp	r0, #0
 800591e:	d0e9      	beq.n	80058f4 <__ssvfiscanf_r+0x44>
 8005920:	e7ed      	b.n	80058fe <__ssvfiscanf_r+0x4e>
 8005922:	2b25      	cmp	r3, #37	; 0x25
 8005924:	d012      	beq.n	800594c <__ssvfiscanf_r+0x9c>
 8005926:	469a      	mov	sl, r3
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f340 8091 	ble.w	8005a52 <__ssvfiscanf_r+0x1a2>
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	7813      	ldrb	r3, [r2, #0]
 8005934:	4553      	cmp	r3, sl
 8005936:	f040 812e 	bne.w	8005b96 <__ssvfiscanf_r+0x2e6>
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	3b01      	subs	r3, #1
 800593e:	6063      	str	r3, [r4, #4]
 8005940:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005942:	3201      	adds	r2, #1
 8005944:	3301      	adds	r3, #1
 8005946:	6022      	str	r2, [r4, #0]
 8005948:	9345      	str	r3, [sp, #276]	; 0x114
 800594a:	e7d8      	b.n	80058fe <__ssvfiscanf_r+0x4e>
 800594c:	9141      	str	r1, [sp, #260]	; 0x104
 800594e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005950:	7853      	ldrb	r3, [r2, #1]
 8005952:	2b2a      	cmp	r3, #42	; 0x2a
 8005954:	bf02      	ittt	eq
 8005956:	2310      	moveq	r3, #16
 8005958:	1c95      	addeq	r5, r2, #2
 800595a:	9341      	streq	r3, [sp, #260]	; 0x104
 800595c:	220a      	movs	r2, #10
 800595e:	46aa      	mov	sl, r5
 8005960:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005964:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005968:	2b09      	cmp	r3, #9
 800596a:	d91c      	bls.n	80059a6 <__ssvfiscanf_r+0xf6>
 800596c:	487e      	ldr	r0, [pc, #504]	; (8005b68 <__ssvfiscanf_r+0x2b8>)
 800596e:	2203      	movs	r2, #3
 8005970:	f7fa fc3e 	bl	80001f0 <memchr>
 8005974:	b138      	cbz	r0, 8005986 <__ssvfiscanf_r+0xd6>
 8005976:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005978:	eba0 0009 	sub.w	r0, r0, r9
 800597c:	2301      	movs	r3, #1
 800597e:	4083      	lsls	r3, r0
 8005980:	4313      	orrs	r3, r2
 8005982:	9341      	str	r3, [sp, #260]	; 0x104
 8005984:	4655      	mov	r5, sl
 8005986:	f815 3b01 	ldrb.w	r3, [r5], #1
 800598a:	2b78      	cmp	r3, #120	; 0x78
 800598c:	d806      	bhi.n	800599c <__ssvfiscanf_r+0xec>
 800598e:	2b57      	cmp	r3, #87	; 0x57
 8005990:	d810      	bhi.n	80059b4 <__ssvfiscanf_r+0x104>
 8005992:	2b25      	cmp	r3, #37	; 0x25
 8005994:	d0c7      	beq.n	8005926 <__ssvfiscanf_r+0x76>
 8005996:	d857      	bhi.n	8005a48 <__ssvfiscanf_r+0x198>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d065      	beq.n	8005a68 <__ssvfiscanf_r+0x1b8>
 800599c:	2303      	movs	r3, #3
 800599e:	9347      	str	r3, [sp, #284]	; 0x11c
 80059a0:	230a      	movs	r3, #10
 80059a2:	9342      	str	r3, [sp, #264]	; 0x108
 80059a4:	e076      	b.n	8005a94 <__ssvfiscanf_r+0x1e4>
 80059a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80059a8:	fb02 1103 	mla	r1, r2, r3, r1
 80059ac:	3930      	subs	r1, #48	; 0x30
 80059ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80059b0:	4655      	mov	r5, sl
 80059b2:	e7d4      	b.n	800595e <__ssvfiscanf_r+0xae>
 80059b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80059b8:	2a20      	cmp	r2, #32
 80059ba:	d8ef      	bhi.n	800599c <__ssvfiscanf_r+0xec>
 80059bc:	a101      	add	r1, pc, #4	; (adr r1, 80059c4 <__ssvfiscanf_r+0x114>)
 80059be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	08005a77 	.word	0x08005a77
 80059c8:	0800599d 	.word	0x0800599d
 80059cc:	0800599d 	.word	0x0800599d
 80059d0:	08005ad5 	.word	0x08005ad5
 80059d4:	0800599d 	.word	0x0800599d
 80059d8:	0800599d 	.word	0x0800599d
 80059dc:	0800599d 	.word	0x0800599d
 80059e0:	0800599d 	.word	0x0800599d
 80059e4:	0800599d 	.word	0x0800599d
 80059e8:	0800599d 	.word	0x0800599d
 80059ec:	0800599d 	.word	0x0800599d
 80059f0:	08005aeb 	.word	0x08005aeb
 80059f4:	08005ad1 	.word	0x08005ad1
 80059f8:	08005a4f 	.word	0x08005a4f
 80059fc:	08005a4f 	.word	0x08005a4f
 8005a00:	08005a4f 	.word	0x08005a4f
 8005a04:	0800599d 	.word	0x0800599d
 8005a08:	08005a8d 	.word	0x08005a8d
 8005a0c:	0800599d 	.word	0x0800599d
 8005a10:	0800599d 	.word	0x0800599d
 8005a14:	0800599d 	.word	0x0800599d
 8005a18:	0800599d 	.word	0x0800599d
 8005a1c:	08005afb 	.word	0x08005afb
 8005a20:	08005ac9 	.word	0x08005ac9
 8005a24:	08005a6f 	.word	0x08005a6f
 8005a28:	0800599d 	.word	0x0800599d
 8005a2c:	0800599d 	.word	0x0800599d
 8005a30:	08005af7 	.word	0x08005af7
 8005a34:	0800599d 	.word	0x0800599d
 8005a38:	08005ad1 	.word	0x08005ad1
 8005a3c:	0800599d 	.word	0x0800599d
 8005a40:	0800599d 	.word	0x0800599d
 8005a44:	08005a77 	.word	0x08005a77
 8005a48:	3b45      	subs	r3, #69	; 0x45
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d8a6      	bhi.n	800599c <__ssvfiscanf_r+0xec>
 8005a4e:	2305      	movs	r3, #5
 8005a50:	e01f      	b.n	8005a92 <__ssvfiscanf_r+0x1e2>
 8005a52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a54:	4621      	mov	r1, r4
 8005a56:	4630      	mov	r0, r6
 8005a58:	4798      	blx	r3
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f43f af68 	beq.w	8005930 <__ssvfiscanf_r+0x80>
 8005a60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f040 808d 	bne.w	8005b82 <__ssvfiscanf_r+0x2d2>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e08f      	b.n	8005b8e <__ssvfiscanf_r+0x2de>
 8005a6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a70:	f042 0220 	orr.w	r2, r2, #32
 8005a74:	9241      	str	r2, [sp, #260]	; 0x104
 8005a76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7c:	9241      	str	r2, [sp, #260]	; 0x104
 8005a7e:	2210      	movs	r2, #16
 8005a80:	2b6f      	cmp	r3, #111	; 0x6f
 8005a82:	9242      	str	r2, [sp, #264]	; 0x108
 8005a84:	bf34      	ite	cc
 8005a86:	2303      	movcc	r3, #3
 8005a88:	2304      	movcs	r3, #4
 8005a8a:	e002      	b.n	8005a92 <__ssvfiscanf_r+0x1e2>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9342      	str	r3, [sp, #264]	; 0x108
 8005a90:	2303      	movs	r3, #3
 8005a92:	9347      	str	r3, [sp, #284]	; 0x11c
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd3d      	ble.n	8005b16 <__ssvfiscanf_r+0x266>
 8005a9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005a9c:	0659      	lsls	r1, r3, #25
 8005a9e:	d404      	bmi.n	8005aaa <__ssvfiscanf_r+0x1fa>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	5cba      	ldrb	r2, [r7, r2]
 8005aa6:	0712      	lsls	r2, r2, #28
 8005aa8:	d43c      	bmi.n	8005b24 <__ssvfiscanf_r+0x274>
 8005aaa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	dc4b      	bgt.n	8005b48 <__ssvfiscanf_r+0x298>
 8005ab0:	466b      	mov	r3, sp
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	a941      	add	r1, sp, #260	; 0x104
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f000 fa02 	bl	8005ec0 <_scanf_chars>
 8005abc:	2801      	cmp	r0, #1
 8005abe:	d06a      	beq.n	8005b96 <__ssvfiscanf_r+0x2e6>
 8005ac0:	2802      	cmp	r0, #2
 8005ac2:	f47f af1c 	bne.w	80058fe <__ssvfiscanf_r+0x4e>
 8005ac6:	e7cb      	b.n	8005a60 <__ssvfiscanf_r+0x1b0>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	9342      	str	r3, [sp, #264]	; 0x108
 8005acc:	2304      	movs	r3, #4
 8005ace:	e7e0      	b.n	8005a92 <__ssvfiscanf_r+0x1e2>
 8005ad0:	220a      	movs	r2, #10
 8005ad2:	e7d5      	b.n	8005a80 <__ssvfiscanf_r+0x1d0>
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	f000 fbee 	bl	80062b8 <__sccl>
 8005adc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae2:	9341      	str	r3, [sp, #260]	; 0x104
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e7d3      	b.n	8005a92 <__ssvfiscanf_r+0x1e2>
 8005aea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af0:	9341      	str	r3, [sp, #260]	; 0x104
 8005af2:	2300      	movs	r3, #0
 8005af4:	e7cd      	b.n	8005a92 <__ssvfiscanf_r+0x1e2>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e7cb      	b.n	8005a92 <__ssvfiscanf_r+0x1e2>
 8005afa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005afc:	06c3      	lsls	r3, r0, #27
 8005afe:	f53f aefe 	bmi.w	80058fe <__ssvfiscanf_r+0x4e>
 8005b02:	9b00      	ldr	r3, [sp, #0]
 8005b04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b06:	1d19      	adds	r1, r3, #4
 8005b08:	9100      	str	r1, [sp, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	07c0      	lsls	r0, r0, #31
 8005b0e:	bf4c      	ite	mi
 8005b10:	801a      	strhmi	r2, [r3, #0]
 8005b12:	601a      	strpl	r2, [r3, #0]
 8005b14:	e6f3      	b.n	80058fe <__ssvfiscanf_r+0x4e>
 8005b16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4798      	blx	r3
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0bb      	beq.n	8005a9a <__ssvfiscanf_r+0x1ea>
 8005b22:	e79d      	b.n	8005a60 <__ssvfiscanf_r+0x1b0>
 8005b24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b26:	3201      	adds	r2, #1
 8005b28:	9245      	str	r2, [sp, #276]	; 0x114
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	6062      	str	r2, [r4, #4]
 8005b32:	dd02      	ble.n	8005b3a <__ssvfiscanf_r+0x28a>
 8005b34:	3301      	adds	r3, #1
 8005b36:	6023      	str	r3, [r4, #0]
 8005b38:	e7b2      	b.n	8005aa0 <__ssvfiscanf_r+0x1f0>
 8005b3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4630      	mov	r0, r6
 8005b40:	4798      	blx	r3
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d0ac      	beq.n	8005aa0 <__ssvfiscanf_r+0x1f0>
 8005b46:	e78b      	b.n	8005a60 <__ssvfiscanf_r+0x1b0>
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	dc0f      	bgt.n	8005b6c <__ssvfiscanf_r+0x2bc>
 8005b4c:	466b      	mov	r3, sp
 8005b4e:	4622      	mov	r2, r4
 8005b50:	a941      	add	r1, sp, #260	; 0x104
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 fa0e 	bl	8005f74 <_scanf_i>
 8005b58:	e7b0      	b.n	8005abc <__ssvfiscanf_r+0x20c>
 8005b5a:	bf00      	nop
 8005b5c:	080057fd 	.word	0x080057fd
 8005b60:	08005877 	.word	0x08005877
 8005b64:	08007c91 	.word	0x08007c91
 8005b68:	08007d97 	.word	0x08007d97
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <__ssvfiscanf_r+0x2ec>)
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f43f aec5 	beq.w	80058fe <__ssvfiscanf_r+0x4e>
 8005b74:	466b      	mov	r3, sp
 8005b76:	4622      	mov	r2, r4
 8005b78:	a941      	add	r1, sp, #260	; 0x104
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7fe f984 	bl	8003e88 <_scanf_float>
 8005b80:	e79c      	b.n	8005abc <__ssvfiscanf_r+0x20c>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b88:	bf18      	it	ne
 8005b8a:	f04f 30ff 	movne.w	r0, #4294967295
 8005b8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005b98:	e7f9      	b.n	8005b8e <__ssvfiscanf_r+0x2de>
 8005b9a:	bf00      	nop
 8005b9c:	08003e89 	.word	0x08003e89

08005ba0 <_printf_common>:
 8005ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	688a      	ldr	r2, [r1, #8]
 8005baa:	690b      	ldr	r3, [r1, #16]
 8005bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	bfb8      	it	lt
 8005bb4:	4613      	movlt	r3, r2
 8005bb6:	6033      	str	r3, [r6, #0]
 8005bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	b10a      	cbz	r2, 8005bc6 <_printf_common+0x26>
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	6033      	str	r3, [r6, #0]
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	0699      	lsls	r1, r3, #26
 8005bca:	bf42      	ittt	mi
 8005bcc:	6833      	ldrmi	r3, [r6, #0]
 8005bce:	3302      	addmi	r3, #2
 8005bd0:	6033      	strmi	r3, [r6, #0]
 8005bd2:	6825      	ldr	r5, [r4, #0]
 8005bd4:	f015 0506 	ands.w	r5, r5, #6
 8005bd8:	d106      	bne.n	8005be8 <_printf_common+0x48>
 8005bda:	f104 0a19 	add.w	sl, r4, #25
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	6832      	ldr	r2, [r6, #0]
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	dc26      	bgt.n	8005c36 <_printf_common+0x96>
 8005be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bec:	1e13      	subs	r3, r2, #0
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	0692      	lsls	r2, r2, #26
 8005bf6:	d42b      	bmi.n	8005c50 <_printf_common+0xb0>
 8005bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d01e      	beq.n	8005c44 <_printf_common+0xa4>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	6922      	ldr	r2, [r4, #16]
 8005c0a:	f003 0306 	and.w	r3, r3, #6
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	bf02      	ittt	eq
 8005c12:	68e5      	ldreq	r5, [r4, #12]
 8005c14:	6833      	ldreq	r3, [r6, #0]
 8005c16:	1aed      	subeq	r5, r5, r3
 8005c18:	68a3      	ldr	r3, [r4, #8]
 8005c1a:	bf0c      	ite	eq
 8005c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c20:	2500      	movne	r5, #0
 8005c22:	4293      	cmp	r3, r2
 8005c24:	bfc4      	itt	gt
 8005c26:	1a9b      	subgt	r3, r3, r2
 8005c28:	18ed      	addgt	r5, r5, r3
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	341a      	adds	r4, #26
 8005c2e:	42b5      	cmp	r5, r6
 8005c30:	d11a      	bne.n	8005c68 <_printf_common+0xc8>
 8005c32:	2000      	movs	r0, #0
 8005c34:	e008      	b.n	8005c48 <_printf_common+0xa8>
 8005c36:	2301      	movs	r3, #1
 8005c38:	4652      	mov	r2, sl
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	47c0      	blx	r8
 8005c40:	3001      	adds	r0, #1
 8005c42:	d103      	bne.n	8005c4c <_printf_common+0xac>
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	e7c6      	b.n	8005bde <_printf_common+0x3e>
 8005c50:	18e1      	adds	r1, r4, r3
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	2030      	movs	r0, #48	; 0x30
 8005c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c5a:	4422      	add	r2, r4
 8005c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c64:	3302      	adds	r3, #2
 8005c66:	e7c7      	b.n	8005bf8 <_printf_common+0x58>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d0e6      	beq.n	8005c44 <_printf_common+0xa4>
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7d9      	b.n	8005c2e <_printf_common+0x8e>
	...

08005c7c <_printf_i>:
 8005c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	7e0f      	ldrb	r7, [r1, #24]
 8005c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c84:	2f78      	cmp	r7, #120	; 0x78
 8005c86:	4691      	mov	r9, r2
 8005c88:	4680      	mov	r8, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	469a      	mov	sl, r3
 8005c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c92:	d807      	bhi.n	8005ca4 <_printf_i+0x28>
 8005c94:	2f62      	cmp	r7, #98	; 0x62
 8005c96:	d80a      	bhi.n	8005cae <_printf_i+0x32>
 8005c98:	2f00      	cmp	r7, #0
 8005c9a:	f000 80d4 	beq.w	8005e46 <_printf_i+0x1ca>
 8005c9e:	2f58      	cmp	r7, #88	; 0x58
 8005ca0:	f000 80c0 	beq.w	8005e24 <_printf_i+0x1a8>
 8005ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cac:	e03a      	b.n	8005d24 <_printf_i+0xa8>
 8005cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cb2:	2b15      	cmp	r3, #21
 8005cb4:	d8f6      	bhi.n	8005ca4 <_printf_i+0x28>
 8005cb6:	a101      	add	r1, pc, #4	; (adr r1, 8005cbc <_printf_i+0x40>)
 8005cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cbc:	08005d15 	.word	0x08005d15
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005ca5 	.word	0x08005ca5
 8005cc8:	08005ca5 	.word	0x08005ca5
 8005ccc:	08005ca5 	.word	0x08005ca5
 8005cd0:	08005ca5 	.word	0x08005ca5
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005ca5 	.word	0x08005ca5
 8005cdc:	08005ca5 	.word	0x08005ca5
 8005ce0:	08005ca5 	.word	0x08005ca5
 8005ce4:	08005ca5 	.word	0x08005ca5
 8005ce8:	08005e2d 	.word	0x08005e2d
 8005cec:	08005d55 	.word	0x08005d55
 8005cf0:	08005de7 	.word	0x08005de7
 8005cf4:	08005ca5 	.word	0x08005ca5
 8005cf8:	08005ca5 	.word	0x08005ca5
 8005cfc:	08005e4f 	.word	0x08005e4f
 8005d00:	08005ca5 	.word	0x08005ca5
 8005d04:	08005d55 	.word	0x08005d55
 8005d08:	08005ca5 	.word	0x08005ca5
 8005d0c:	08005ca5 	.word	0x08005ca5
 8005d10:	08005def 	.word	0x08005def
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	602a      	str	r2, [r5, #0]
 8005d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d24:	2301      	movs	r3, #1
 8005d26:	e09f      	b.n	8005e68 <_printf_i+0x1ec>
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	682b      	ldr	r3, [r5, #0]
 8005d2c:	0607      	lsls	r7, r0, #24
 8005d2e:	f103 0104 	add.w	r1, r3, #4
 8005d32:	6029      	str	r1, [r5, #0]
 8005d34:	d501      	bpl.n	8005d3a <_printf_i+0xbe>
 8005d36:	681e      	ldr	r6, [r3, #0]
 8005d38:	e003      	b.n	8005d42 <_printf_i+0xc6>
 8005d3a:	0646      	lsls	r6, r0, #25
 8005d3c:	d5fb      	bpl.n	8005d36 <_printf_i+0xba>
 8005d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d42:	2e00      	cmp	r6, #0
 8005d44:	da03      	bge.n	8005d4e <_printf_i+0xd2>
 8005d46:	232d      	movs	r3, #45	; 0x2d
 8005d48:	4276      	negs	r6, r6
 8005d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4e:	485a      	ldr	r0, [pc, #360]	; (8005eb8 <_printf_i+0x23c>)
 8005d50:	230a      	movs	r3, #10
 8005d52:	e012      	b.n	8005d7a <_printf_i+0xfe>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	6029      	str	r1, [r5, #0]
 8005d5c:	0605      	lsls	r5, r0, #24
 8005d5e:	d501      	bpl.n	8005d64 <_printf_i+0xe8>
 8005d60:	681e      	ldr	r6, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <_printf_i+0xee>
 8005d64:	0641      	lsls	r1, r0, #25
 8005d66:	d5fb      	bpl.n	8005d60 <_printf_i+0xe4>
 8005d68:	881e      	ldrh	r6, [r3, #0]
 8005d6a:	4853      	ldr	r0, [pc, #332]	; (8005eb8 <_printf_i+0x23c>)
 8005d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d6e:	bf0c      	ite	eq
 8005d70:	2308      	moveq	r3, #8
 8005d72:	230a      	movne	r3, #10
 8005d74:	2100      	movs	r1, #0
 8005d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d7a:	6865      	ldr	r5, [r4, #4]
 8005d7c:	60a5      	str	r5, [r4, #8]
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	bfa2      	ittt	ge
 8005d82:	6821      	ldrge	r1, [r4, #0]
 8005d84:	f021 0104 	bicge.w	r1, r1, #4
 8005d88:	6021      	strge	r1, [r4, #0]
 8005d8a:	b90e      	cbnz	r6, 8005d90 <_printf_i+0x114>
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	d04b      	beq.n	8005e28 <_printf_i+0x1ac>
 8005d90:	4615      	mov	r5, r2
 8005d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d96:	fb03 6711 	mls	r7, r3, r1, r6
 8005d9a:	5dc7      	ldrb	r7, [r0, r7]
 8005d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005da0:	4637      	mov	r7, r6
 8005da2:	42bb      	cmp	r3, r7
 8005da4:	460e      	mov	r6, r1
 8005da6:	d9f4      	bls.n	8005d92 <_printf_i+0x116>
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d10b      	bne.n	8005dc4 <_printf_i+0x148>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	07de      	lsls	r6, r3, #31
 8005db0:	d508      	bpl.n	8005dc4 <_printf_i+0x148>
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	6861      	ldr	r1, [r4, #4]
 8005db6:	4299      	cmp	r1, r3
 8005db8:	bfde      	ittt	le
 8005dba:	2330      	movle	r3, #48	; 0x30
 8005dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dc4:	1b52      	subs	r2, r2, r5
 8005dc6:	6122      	str	r2, [r4, #16]
 8005dc8:	f8cd a000 	str.w	sl, [sp]
 8005dcc:	464b      	mov	r3, r9
 8005dce:	aa03      	add	r2, sp, #12
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	f7ff fee4 	bl	8005ba0 <_printf_common>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d14a      	bne.n	8005e72 <_printf_i+0x1f6>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	b004      	add	sp, #16
 8005de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f043 0320 	orr.w	r3, r3, #32
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	4833      	ldr	r0, [pc, #204]	; (8005ebc <_printf_i+0x240>)
 8005df0:	2778      	movs	r7, #120	; 0x78
 8005df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	6829      	ldr	r1, [r5, #0]
 8005dfa:	061f      	lsls	r7, r3, #24
 8005dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e00:	d402      	bmi.n	8005e08 <_printf_i+0x18c>
 8005e02:	065f      	lsls	r7, r3, #25
 8005e04:	bf48      	it	mi
 8005e06:	b2b6      	uxthmi	r6, r6
 8005e08:	07df      	lsls	r7, r3, #31
 8005e0a:	bf48      	it	mi
 8005e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e10:	6029      	str	r1, [r5, #0]
 8005e12:	bf48      	it	mi
 8005e14:	6023      	strmi	r3, [r4, #0]
 8005e16:	b91e      	cbnz	r6, 8005e20 <_printf_i+0x1a4>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	f023 0320 	bic.w	r3, r3, #32
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	2310      	movs	r3, #16
 8005e22:	e7a7      	b.n	8005d74 <_printf_i+0xf8>
 8005e24:	4824      	ldr	r0, [pc, #144]	; (8005eb8 <_printf_i+0x23c>)
 8005e26:	e7e4      	b.n	8005df2 <_printf_i+0x176>
 8005e28:	4615      	mov	r5, r2
 8005e2a:	e7bd      	b.n	8005da8 <_printf_i+0x12c>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	6826      	ldr	r6, [r4, #0]
 8005e30:	6961      	ldr	r1, [r4, #20]
 8005e32:	1d18      	adds	r0, r3, #4
 8005e34:	6028      	str	r0, [r5, #0]
 8005e36:	0635      	lsls	r5, r6, #24
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0x1c4>
 8005e3c:	6019      	str	r1, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <_printf_i+0x1ca>
 8005e40:	0670      	lsls	r0, r6, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0x1c0>
 8005e44:	8019      	strh	r1, [r3, #0]
 8005e46:	2300      	movs	r3, #0
 8005e48:	6123      	str	r3, [r4, #16]
 8005e4a:	4615      	mov	r5, r2
 8005e4c:	e7bc      	b.n	8005dc8 <_printf_i+0x14c>
 8005e4e:	682b      	ldr	r3, [r5, #0]
 8005e50:	1d1a      	adds	r2, r3, #4
 8005e52:	602a      	str	r2, [r5, #0]
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f7fa f9c8 	bl	80001f0 <memchr>
 8005e60:	b108      	cbz	r0, 8005e66 <_printf_i+0x1ea>
 8005e62:	1b40      	subs	r0, r0, r5
 8005e64:	6060      	str	r0, [r4, #4]
 8005e66:	6863      	ldr	r3, [r4, #4]
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e70:	e7aa      	b.n	8005dc8 <_printf_i+0x14c>
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	462a      	mov	r2, r5
 8005e76:	4649      	mov	r1, r9
 8005e78:	4640      	mov	r0, r8
 8005e7a:	47d0      	blx	sl
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d0ad      	beq.n	8005ddc <_printf_i+0x160>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	079b      	lsls	r3, r3, #30
 8005e84:	d413      	bmi.n	8005eae <_printf_i+0x232>
 8005e86:	68e0      	ldr	r0, [r4, #12]
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	4298      	cmp	r0, r3
 8005e8c:	bfb8      	it	lt
 8005e8e:	4618      	movlt	r0, r3
 8005e90:	e7a6      	b.n	8005de0 <_printf_i+0x164>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4632      	mov	r2, r6
 8005e96:	4649      	mov	r1, r9
 8005e98:	4640      	mov	r0, r8
 8005e9a:	47d0      	blx	sl
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d09d      	beq.n	8005ddc <_printf_i+0x160>
 8005ea0:	3501      	adds	r5, #1
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	9903      	ldr	r1, [sp, #12]
 8005ea6:	1a5b      	subs	r3, r3, r1
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	dcf2      	bgt.n	8005e92 <_printf_i+0x216>
 8005eac:	e7eb      	b.n	8005e86 <_printf_i+0x20a>
 8005eae:	2500      	movs	r5, #0
 8005eb0:	f104 0619 	add.w	r6, r4, #25
 8005eb4:	e7f5      	b.n	8005ea2 <_printf_i+0x226>
 8005eb6:	bf00      	nop
 8005eb8:	08007da2 	.word	0x08007da2
 8005ebc:	08007db3 	.word	0x08007db3

08005ec0 <_scanf_chars>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	688a      	ldr	r2, [r1, #8]
 8005ec8:	4680      	mov	r8, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	b932      	cbnz	r2, 8005edc <_scanf_chars+0x1c>
 8005ece:	698a      	ldr	r2, [r1, #24]
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2201      	moveq	r2, #1
 8005ed6:	f04f 32ff 	movne.w	r2, #4294967295
 8005eda:	608a      	str	r2, [r1, #8]
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005f70 <_scanf_chars+0xb0>
 8005ee2:	06d1      	lsls	r1, r2, #27
 8005ee4:	bf5f      	itttt	pl
 8005ee6:	681a      	ldrpl	r2, [r3, #0]
 8005ee8:	1d11      	addpl	r1, r2, #4
 8005eea:	6019      	strpl	r1, [r3, #0]
 8005eec:	6816      	ldrpl	r6, [r2, #0]
 8005eee:	2700      	movs	r7, #0
 8005ef0:	69a0      	ldr	r0, [r4, #24]
 8005ef2:	b188      	cbz	r0, 8005f18 <_scanf_chars+0x58>
 8005ef4:	2801      	cmp	r0, #1
 8005ef6:	d107      	bne.n	8005f08 <_scanf_chars+0x48>
 8005ef8:	682a      	ldr	r2, [r5, #0]
 8005efa:	7811      	ldrb	r1, [r2, #0]
 8005efc:	6962      	ldr	r2, [r4, #20]
 8005efe:	5c52      	ldrb	r2, [r2, r1]
 8005f00:	b952      	cbnz	r2, 8005f18 <_scanf_chars+0x58>
 8005f02:	2f00      	cmp	r7, #0
 8005f04:	d031      	beq.n	8005f6a <_scanf_chars+0xaa>
 8005f06:	e022      	b.n	8005f4e <_scanf_chars+0x8e>
 8005f08:	2802      	cmp	r0, #2
 8005f0a:	d120      	bne.n	8005f4e <_scanf_chars+0x8e>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005f14:	071b      	lsls	r3, r3, #28
 8005f16:	d41a      	bmi.n	8005f4e <_scanf_chars+0x8e>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	06da      	lsls	r2, r3, #27
 8005f1c:	bf5e      	ittt	pl
 8005f1e:	682b      	ldrpl	r3, [r5, #0]
 8005f20:	781b      	ldrbpl	r3, [r3, #0]
 8005f22:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005f26:	682a      	ldr	r2, [r5, #0]
 8005f28:	686b      	ldr	r3, [r5, #4]
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	68a2      	ldr	r2, [r4, #8]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	3a01      	subs	r2, #1
 8005f34:	606b      	str	r3, [r5, #4]
 8005f36:	3701      	adds	r7, #1
 8005f38:	60a2      	str	r2, [r4, #8]
 8005f3a:	b142      	cbz	r2, 8005f4e <_scanf_chars+0x8e>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dcd7      	bgt.n	8005ef0 <_scanf_chars+0x30>
 8005f40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f44:	4629      	mov	r1, r5
 8005f46:	4640      	mov	r0, r8
 8005f48:	4798      	blx	r3
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d0d0      	beq.n	8005ef0 <_scanf_chars+0x30>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	f013 0310 	ands.w	r3, r3, #16
 8005f54:	d105      	bne.n	8005f62 <_scanf_chars+0xa2>
 8005f56:	68e2      	ldr	r2, [r4, #12]
 8005f58:	3201      	adds	r2, #1
 8005f5a:	60e2      	str	r2, [r4, #12]
 8005f5c:	69a2      	ldr	r2, [r4, #24]
 8005f5e:	b102      	cbz	r2, 8005f62 <_scanf_chars+0xa2>
 8005f60:	7033      	strb	r3, [r6, #0]
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	443b      	add	r3, r7
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f6e:	bf00      	nop
 8005f70:	08007c91 	.word	0x08007c91

08005f74 <_scanf_i>:
 8005f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	4698      	mov	r8, r3
 8005f7a:	4b74      	ldr	r3, [pc, #464]	; (800614c <_scanf_i+0x1d8>)
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	4682      	mov	sl, r0
 8005f80:	4616      	mov	r6, r2
 8005f82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f86:	b087      	sub	sp, #28
 8005f88:	ab03      	add	r3, sp, #12
 8005f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005f8e:	4b70      	ldr	r3, [pc, #448]	; (8006150 <_scanf_i+0x1dc>)
 8005f90:	69a1      	ldr	r1, [r4, #24]
 8005f92:	4a70      	ldr	r2, [pc, #448]	; (8006154 <_scanf_i+0x1e0>)
 8005f94:	2903      	cmp	r1, #3
 8005f96:	bf18      	it	ne
 8005f98:	461a      	movne	r2, r3
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	9201      	str	r2, [sp, #4]
 8005f9e:	1e5a      	subs	r2, r3, #1
 8005fa0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005fa4:	bf88      	it	hi
 8005fa6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005faa:	4627      	mov	r7, r4
 8005fac:	bf82      	ittt	hi
 8005fae:	eb03 0905 	addhi.w	r9, r3, r5
 8005fb2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005fb6:	60a3      	strhi	r3, [r4, #8]
 8005fb8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005fbc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005fc0:	bf98      	it	ls
 8005fc2:	f04f 0900 	movls.w	r9, #0
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	463d      	mov	r5, r7
 8005fca:	f04f 0b00 	mov.w	fp, #0
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	ab03      	add	r3, sp, #12
 8005fd2:	7809      	ldrb	r1, [r1, #0]
 8005fd4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f7fa f909 	bl	80001f0 <memchr>
 8005fde:	b328      	cbz	r0, 800602c <_scanf_i+0xb8>
 8005fe0:	f1bb 0f01 	cmp.w	fp, #1
 8005fe4:	d159      	bne.n	800609a <_scanf_i+0x126>
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	b92a      	cbnz	r2, 8005ff6 <_scanf_i+0x82>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	2308      	movs	r3, #8
 8005fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff2:	6063      	str	r3, [r4, #4]
 8005ff4:	6022      	str	r2, [r4, #0]
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005ffc:	6022      	str	r2, [r4, #0]
 8005ffe:	68a2      	ldr	r2, [r4, #8]
 8006000:	1e51      	subs	r1, r2, #1
 8006002:	60a1      	str	r1, [r4, #8]
 8006004:	b192      	cbz	r2, 800602c <_scanf_i+0xb8>
 8006006:	6832      	ldr	r2, [r6, #0]
 8006008:	1c51      	adds	r1, r2, #1
 800600a:	6031      	str	r1, [r6, #0]
 800600c:	7812      	ldrb	r2, [r2, #0]
 800600e:	f805 2b01 	strb.w	r2, [r5], #1
 8006012:	6872      	ldr	r2, [r6, #4]
 8006014:	3a01      	subs	r2, #1
 8006016:	2a00      	cmp	r2, #0
 8006018:	6072      	str	r2, [r6, #4]
 800601a:	dc07      	bgt.n	800602c <_scanf_i+0xb8>
 800601c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006020:	4631      	mov	r1, r6
 8006022:	4650      	mov	r0, sl
 8006024:	4790      	blx	r2
 8006026:	2800      	cmp	r0, #0
 8006028:	f040 8085 	bne.w	8006136 <_scanf_i+0x1c2>
 800602c:	f10b 0b01 	add.w	fp, fp, #1
 8006030:	f1bb 0f03 	cmp.w	fp, #3
 8006034:	d1cb      	bne.n	8005fce <_scanf_i+0x5a>
 8006036:	6863      	ldr	r3, [r4, #4]
 8006038:	b90b      	cbnz	r3, 800603e <_scanf_i+0xca>
 800603a:	230a      	movs	r3, #10
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	4945      	ldr	r1, [pc, #276]	; (8006158 <_scanf_i+0x1e4>)
 8006042:	6960      	ldr	r0, [r4, #20]
 8006044:	1ac9      	subs	r1, r1, r3
 8006046:	f000 f937 	bl	80062b8 <__sccl>
 800604a:	f04f 0b00 	mov.w	fp, #0
 800604e:	68a3      	ldr	r3, [r4, #8]
 8006050:	6822      	ldr	r2, [r4, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d03d      	beq.n	80060d2 <_scanf_i+0x15e>
 8006056:	6831      	ldr	r1, [r6, #0]
 8006058:	6960      	ldr	r0, [r4, #20]
 800605a:	f891 c000 	ldrb.w	ip, [r1]
 800605e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006062:	2800      	cmp	r0, #0
 8006064:	d035      	beq.n	80060d2 <_scanf_i+0x15e>
 8006066:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800606a:	d124      	bne.n	80060b6 <_scanf_i+0x142>
 800606c:	0510      	lsls	r0, r2, #20
 800606e:	d522      	bpl.n	80060b6 <_scanf_i+0x142>
 8006070:	f10b 0b01 	add.w	fp, fp, #1
 8006074:	f1b9 0f00 	cmp.w	r9, #0
 8006078:	d003      	beq.n	8006082 <_scanf_i+0x10e>
 800607a:	3301      	adds	r3, #1
 800607c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006080:	60a3      	str	r3, [r4, #8]
 8006082:	6873      	ldr	r3, [r6, #4]
 8006084:	3b01      	subs	r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	6073      	str	r3, [r6, #4]
 800608a:	dd1b      	ble.n	80060c4 <_scanf_i+0x150>
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	3b01      	subs	r3, #1
 8006096:	60a3      	str	r3, [r4, #8]
 8006098:	e7d9      	b.n	800604e <_scanf_i+0xda>
 800609a:	f1bb 0f02 	cmp.w	fp, #2
 800609e:	d1ae      	bne.n	8005ffe <_scanf_i+0x8a>
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80060a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80060aa:	d1bf      	bne.n	800602c <_scanf_i+0xb8>
 80060ac:	2310      	movs	r3, #16
 80060ae:	6063      	str	r3, [r4, #4]
 80060b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b4:	e7a2      	b.n	8005ffc <_scanf_i+0x88>
 80060b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	780b      	ldrb	r3, [r1, #0]
 80060be:	f805 3b01 	strb.w	r3, [r5], #1
 80060c2:	e7de      	b.n	8006082 <_scanf_i+0x10e>
 80060c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060c8:	4631      	mov	r1, r6
 80060ca:	4650      	mov	r0, sl
 80060cc:	4798      	blx	r3
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d0df      	beq.n	8006092 <_scanf_i+0x11e>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	05d9      	lsls	r1, r3, #23
 80060d6:	d50d      	bpl.n	80060f4 <_scanf_i+0x180>
 80060d8:	42bd      	cmp	r5, r7
 80060da:	d909      	bls.n	80060f0 <_scanf_i+0x17c>
 80060dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80060e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060e4:	4632      	mov	r2, r6
 80060e6:	4650      	mov	r0, sl
 80060e8:	4798      	blx	r3
 80060ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80060ee:	464d      	mov	r5, r9
 80060f0:	42bd      	cmp	r5, r7
 80060f2:	d028      	beq.n	8006146 <_scanf_i+0x1d2>
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	f012 0210 	ands.w	r2, r2, #16
 80060fa:	d113      	bne.n	8006124 <_scanf_i+0x1b0>
 80060fc:	702a      	strb	r2, [r5, #0]
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	9e01      	ldr	r6, [sp, #4]
 8006102:	4639      	mov	r1, r7
 8006104:	4650      	mov	r0, sl
 8006106:	47b0      	blx	r6
 8006108:	f8d8 3000 	ldr.w	r3, [r8]
 800610c:	6821      	ldr	r1, [r4, #0]
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	f8c8 2000 	str.w	r2, [r8]
 8006114:	f011 0f20 	tst.w	r1, #32
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	d00f      	beq.n	800613c <_scanf_i+0x1c8>
 800611c:	6018      	str	r0, [r3, #0]
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	60e3      	str	r3, [r4, #12]
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	1bed      	subs	r5, r5, r7
 8006128:	445d      	add	r5, fp
 800612a:	442b      	add	r3, r5
 800612c:	6123      	str	r3, [r4, #16]
 800612e:	2000      	movs	r0, #0
 8006130:	b007      	add	sp, #28
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	f04f 0b00 	mov.w	fp, #0
 800613a:	e7ca      	b.n	80060d2 <_scanf_i+0x15e>
 800613c:	07ca      	lsls	r2, r1, #31
 800613e:	bf4c      	ite	mi
 8006140:	8018      	strhmi	r0, [r3, #0]
 8006142:	6018      	strpl	r0, [r3, #0]
 8006144:	e7eb      	b.n	800611e <_scanf_i+0x1aa>
 8006146:	2001      	movs	r0, #1
 8006148:	e7f2      	b.n	8006130 <_scanf_i+0x1bc>
 800614a:	bf00      	nop
 800614c:	08007bfc 	.word	0x08007bfc
 8006150:	080075b9 	.word	0x080075b9
 8006154:	08005549 	.word	0x08005549
 8006158:	08007dd4 	.word	0x08007dd4

0800615c <__sflush_r>:
 800615c:	898a      	ldrh	r2, [r1, #12]
 800615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	4605      	mov	r5, r0
 8006164:	0710      	lsls	r0, r2, #28
 8006166:	460c      	mov	r4, r1
 8006168:	d458      	bmi.n	800621c <__sflush_r+0xc0>
 800616a:	684b      	ldr	r3, [r1, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dc05      	bgt.n	800617c <__sflush_r+0x20>
 8006170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	dc02      	bgt.n	800617c <__sflush_r+0x20>
 8006176:	2000      	movs	r0, #0
 8006178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800617c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800617e:	2e00      	cmp	r6, #0
 8006180:	d0f9      	beq.n	8006176 <__sflush_r+0x1a>
 8006182:	2300      	movs	r3, #0
 8006184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006188:	682f      	ldr	r7, [r5, #0]
 800618a:	6a21      	ldr	r1, [r4, #32]
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	d032      	beq.n	80061f6 <__sflush_r+0x9a>
 8006190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	075a      	lsls	r2, r3, #29
 8006196:	d505      	bpl.n	80061a4 <__sflush_r+0x48>
 8006198:	6863      	ldr	r3, [r4, #4]
 800619a:	1ac0      	subs	r0, r0, r3
 800619c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800619e:	b10b      	cbz	r3, 80061a4 <__sflush_r+0x48>
 80061a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a2:	1ac0      	subs	r0, r0, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	4602      	mov	r2, r0
 80061a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061aa:	6a21      	ldr	r1, [r4, #32]
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b0      	blx	r6
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	d106      	bne.n	80061c4 <__sflush_r+0x68>
 80061b6:	6829      	ldr	r1, [r5, #0]
 80061b8:	291d      	cmp	r1, #29
 80061ba:	d82b      	bhi.n	8006214 <__sflush_r+0xb8>
 80061bc:	4a29      	ldr	r2, [pc, #164]	; (8006264 <__sflush_r+0x108>)
 80061be:	410a      	asrs	r2, r1
 80061c0:	07d6      	lsls	r6, r2, #31
 80061c2:	d427      	bmi.n	8006214 <__sflush_r+0xb8>
 80061c4:	2200      	movs	r2, #0
 80061c6:	6062      	str	r2, [r4, #4]
 80061c8:	04d9      	lsls	r1, r3, #19
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	d504      	bpl.n	80061da <__sflush_r+0x7e>
 80061d0:	1c42      	adds	r2, r0, #1
 80061d2:	d101      	bne.n	80061d8 <__sflush_r+0x7c>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b903      	cbnz	r3, 80061da <__sflush_r+0x7e>
 80061d8:	6560      	str	r0, [r4, #84]	; 0x54
 80061da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061dc:	602f      	str	r7, [r5, #0]
 80061de:	2900      	cmp	r1, #0
 80061e0:	d0c9      	beq.n	8006176 <__sflush_r+0x1a>
 80061e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e6:	4299      	cmp	r1, r3
 80061e8:	d002      	beq.n	80061f0 <__sflush_r+0x94>
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fe fa1e 	bl	800462c <_free_r>
 80061f0:	2000      	movs	r0, #0
 80061f2:	6360      	str	r0, [r4, #52]	; 0x34
 80061f4:	e7c0      	b.n	8006178 <__sflush_r+0x1c>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b0      	blx	r6
 80061fc:	1c41      	adds	r1, r0, #1
 80061fe:	d1c8      	bne.n	8006192 <__sflush_r+0x36>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c5      	beq.n	8006192 <__sflush_r+0x36>
 8006206:	2b1d      	cmp	r3, #29
 8006208:	d001      	beq.n	800620e <__sflush_r+0xb2>
 800620a:	2b16      	cmp	r3, #22
 800620c:	d101      	bne.n	8006212 <__sflush_r+0xb6>
 800620e:	602f      	str	r7, [r5, #0]
 8006210:	e7b1      	b.n	8006176 <__sflush_r+0x1a>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	e7ad      	b.n	8006178 <__sflush_r+0x1c>
 800621c:	690f      	ldr	r7, [r1, #16]
 800621e:	2f00      	cmp	r7, #0
 8006220:	d0a9      	beq.n	8006176 <__sflush_r+0x1a>
 8006222:	0793      	lsls	r3, r2, #30
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	bf08      	it	eq
 8006228:	694b      	ldreq	r3, [r1, #20]
 800622a:	600f      	str	r7, [r1, #0]
 800622c:	bf18      	it	ne
 800622e:	2300      	movne	r3, #0
 8006230:	eba6 0807 	sub.w	r8, r6, r7
 8006234:	608b      	str	r3, [r1, #8]
 8006236:	f1b8 0f00 	cmp.w	r8, #0
 800623a:	dd9c      	ble.n	8006176 <__sflush_r+0x1a>
 800623c:	6a21      	ldr	r1, [r4, #32]
 800623e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006240:	4643      	mov	r3, r8
 8006242:	463a      	mov	r2, r7
 8006244:	4628      	mov	r0, r5
 8006246:	47b0      	blx	r6
 8006248:	2800      	cmp	r0, #0
 800624a:	dc06      	bgt.n	800625a <__sflush_r+0xfe>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006252:	81a3      	strh	r3, [r4, #12]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	e78e      	b.n	8006178 <__sflush_r+0x1c>
 800625a:	4407      	add	r7, r0
 800625c:	eba8 0800 	sub.w	r8, r8, r0
 8006260:	e7e9      	b.n	8006236 <__sflush_r+0xda>
 8006262:	bf00      	nop
 8006264:	dfbffffe 	.word	0xdfbffffe

08006268 <_fflush_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	4605      	mov	r5, r0
 800626e:	460c      	mov	r4, r1
 8006270:	b913      	cbnz	r3, 8006278 <_fflush_r+0x10>
 8006272:	2500      	movs	r5, #0
 8006274:	4628      	mov	r0, r5
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	b118      	cbz	r0, 8006282 <_fflush_r+0x1a>
 800627a:	6a03      	ldr	r3, [r0, #32]
 800627c:	b90b      	cbnz	r3, 8006282 <_fflush_r+0x1a>
 800627e:	f7fe f88d 	bl	800439c <__sinit>
 8006282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f3      	beq.n	8006272 <_fflush_r+0xa>
 800628a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800628c:	07d0      	lsls	r0, r2, #31
 800628e:	d404      	bmi.n	800629a <_fflush_r+0x32>
 8006290:	0599      	lsls	r1, r3, #22
 8006292:	d402      	bmi.n	800629a <_fflush_r+0x32>
 8006294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006296:	f7fe f9c1 	bl	800461c <__retarget_lock_acquire_recursive>
 800629a:	4628      	mov	r0, r5
 800629c:	4621      	mov	r1, r4
 800629e:	f7ff ff5d 	bl	800615c <__sflush_r>
 80062a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062a4:	07da      	lsls	r2, r3, #31
 80062a6:	4605      	mov	r5, r0
 80062a8:	d4e4      	bmi.n	8006274 <_fflush_r+0xc>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	059b      	lsls	r3, r3, #22
 80062ae:	d4e1      	bmi.n	8006274 <_fflush_r+0xc>
 80062b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b2:	f7fe f9b4 	bl	800461e <__retarget_lock_release_recursive>
 80062b6:	e7dd      	b.n	8006274 <_fflush_r+0xc>

080062b8 <__sccl>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	780b      	ldrb	r3, [r1, #0]
 80062bc:	4604      	mov	r4, r0
 80062be:	2b5e      	cmp	r3, #94	; 0x5e
 80062c0:	bf0b      	itete	eq
 80062c2:	784b      	ldrbeq	r3, [r1, #1]
 80062c4:	1c4a      	addne	r2, r1, #1
 80062c6:	1c8a      	addeq	r2, r1, #2
 80062c8:	2100      	movne	r1, #0
 80062ca:	bf08      	it	eq
 80062cc:	2101      	moveq	r1, #1
 80062ce:	3801      	subs	r0, #1
 80062d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80062d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80062d8:	42a8      	cmp	r0, r5
 80062da:	d1fb      	bne.n	80062d4 <__sccl+0x1c>
 80062dc:	b90b      	cbnz	r3, 80062e2 <__sccl+0x2a>
 80062de:	1e50      	subs	r0, r2, #1
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
 80062e2:	f081 0101 	eor.w	r1, r1, #1
 80062e6:	54e1      	strb	r1, [r4, r3]
 80062e8:	4610      	mov	r0, r2
 80062ea:	4602      	mov	r2, r0
 80062ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062f0:	2d2d      	cmp	r5, #45	; 0x2d
 80062f2:	d005      	beq.n	8006300 <__sccl+0x48>
 80062f4:	2d5d      	cmp	r5, #93	; 0x5d
 80062f6:	d016      	beq.n	8006326 <__sccl+0x6e>
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	d0f1      	beq.n	80062e0 <__sccl+0x28>
 80062fc:	462b      	mov	r3, r5
 80062fe:	e7f2      	b.n	80062e6 <__sccl+0x2e>
 8006300:	7846      	ldrb	r6, [r0, #1]
 8006302:	2e5d      	cmp	r6, #93	; 0x5d
 8006304:	d0fa      	beq.n	80062fc <__sccl+0x44>
 8006306:	42b3      	cmp	r3, r6
 8006308:	dcf8      	bgt.n	80062fc <__sccl+0x44>
 800630a:	3002      	adds	r0, #2
 800630c:	461a      	mov	r2, r3
 800630e:	3201      	adds	r2, #1
 8006310:	4296      	cmp	r6, r2
 8006312:	54a1      	strb	r1, [r4, r2]
 8006314:	dcfb      	bgt.n	800630e <__sccl+0x56>
 8006316:	1af2      	subs	r2, r6, r3
 8006318:	3a01      	subs	r2, #1
 800631a:	1c5d      	adds	r5, r3, #1
 800631c:	42b3      	cmp	r3, r6
 800631e:	bfa8      	it	ge
 8006320:	2200      	movge	r2, #0
 8006322:	18ab      	adds	r3, r5, r2
 8006324:	e7e1      	b.n	80062ea <__sccl+0x32>
 8006326:	4610      	mov	r0, r2
 8006328:	e7da      	b.n	80062e0 <__sccl+0x28>

0800632a <__submore>:
 800632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	460c      	mov	r4, r1
 8006330:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006336:	4299      	cmp	r1, r3
 8006338:	d11d      	bne.n	8006376 <__submore+0x4c>
 800633a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800633e:	f7fe f9e1 	bl	8004704 <_malloc_r>
 8006342:	b918      	cbnz	r0, 800634c <__submore+0x22>
 8006344:	f04f 30ff 	mov.w	r0, #4294967295
 8006348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006350:	63a3      	str	r3, [r4, #56]	; 0x38
 8006352:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006356:	6360      	str	r0, [r4, #52]	; 0x34
 8006358:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800635c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006360:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006364:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006368:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800636c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006370:	6020      	str	r0, [r4, #0]
 8006372:	2000      	movs	r0, #0
 8006374:	e7e8      	b.n	8006348 <__submore+0x1e>
 8006376:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006378:	0077      	lsls	r7, r6, #1
 800637a:	463a      	mov	r2, r7
 800637c:	f001 f87b 	bl	8007476 <_realloc_r>
 8006380:	4605      	mov	r5, r0
 8006382:	2800      	cmp	r0, #0
 8006384:	d0de      	beq.n	8006344 <__submore+0x1a>
 8006386:	eb00 0806 	add.w	r8, r0, r6
 800638a:	4601      	mov	r1, r0
 800638c:	4632      	mov	r2, r6
 800638e:	4640      	mov	r0, r8
 8006390:	f000 f842 	bl	8006418 <memcpy>
 8006394:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006398:	f8c4 8000 	str.w	r8, [r4]
 800639c:	e7e9      	b.n	8006372 <__submore+0x48>

0800639e <memmove>:
 800639e:	4288      	cmp	r0, r1
 80063a0:	b510      	push	{r4, lr}
 80063a2:	eb01 0402 	add.w	r4, r1, r2
 80063a6:	d902      	bls.n	80063ae <memmove+0x10>
 80063a8:	4284      	cmp	r4, r0
 80063aa:	4623      	mov	r3, r4
 80063ac:	d807      	bhi.n	80063be <memmove+0x20>
 80063ae:	1e43      	subs	r3, r0, #1
 80063b0:	42a1      	cmp	r1, r4
 80063b2:	d008      	beq.n	80063c6 <memmove+0x28>
 80063b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063bc:	e7f8      	b.n	80063b0 <memmove+0x12>
 80063be:	4402      	add	r2, r0
 80063c0:	4601      	mov	r1, r0
 80063c2:	428a      	cmp	r2, r1
 80063c4:	d100      	bne.n	80063c8 <memmove+0x2a>
 80063c6:	bd10      	pop	{r4, pc}
 80063c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063d0:	e7f7      	b.n	80063c2 <memmove+0x24>

080063d2 <strncmp>:
 80063d2:	b510      	push	{r4, lr}
 80063d4:	b16a      	cbz	r2, 80063f2 <strncmp+0x20>
 80063d6:	3901      	subs	r1, #1
 80063d8:	1884      	adds	r4, r0, r2
 80063da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d103      	bne.n	80063ee <strncmp+0x1c>
 80063e6:	42a0      	cmp	r0, r4
 80063e8:	d001      	beq.n	80063ee <strncmp+0x1c>
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	d1f5      	bne.n	80063da <strncmp+0x8>
 80063ee:	1ad0      	subs	r0, r2, r3
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	4610      	mov	r0, r2
 80063f4:	e7fc      	b.n	80063f0 <strncmp+0x1e>
	...

080063f8 <_sbrk_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d06      	ldr	r5, [pc, #24]	; (8006414 <_sbrk_r+0x1c>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f7fb f86a 	bl	80014dc <_sbrk>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_sbrk_r+0x1a>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_sbrk_r+0x1a>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	200003f4 	.word	0x200003f4

08006418 <memcpy>:
 8006418:	440a      	add	r2, r1
 800641a:	4291      	cmp	r1, r2
 800641c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006420:	d100      	bne.n	8006424 <memcpy+0xc>
 8006422:	4770      	bx	lr
 8006424:	b510      	push	{r4, lr}
 8006426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800642a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800642e:	4291      	cmp	r1, r2
 8006430:	d1f9      	bne.n	8006426 <memcpy+0xe>
 8006432:	bd10      	pop	{r4, pc}
 8006434:	0000      	movs	r0, r0
	...

08006438 <nan>:
 8006438:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006440 <nan+0x8>
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	00000000 	.word	0x00000000
 8006444:	7ff80000 	.word	0x7ff80000

08006448 <rshift>:
 8006448:	6903      	ldr	r3, [r0, #16]
 800644a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800644e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006452:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006456:	f100 0414 	add.w	r4, r0, #20
 800645a:	dd45      	ble.n	80064e8 <rshift+0xa0>
 800645c:	f011 011f 	ands.w	r1, r1, #31
 8006460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006468:	d10c      	bne.n	8006484 <rshift+0x3c>
 800646a:	f100 0710 	add.w	r7, r0, #16
 800646e:	4629      	mov	r1, r5
 8006470:	42b1      	cmp	r1, r6
 8006472:	d334      	bcc.n	80064de <rshift+0x96>
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	1eea      	subs	r2, r5, #3
 800647a:	4296      	cmp	r6, r2
 800647c:	bf38      	it	cc
 800647e:	2300      	movcc	r3, #0
 8006480:	4423      	add	r3, r4
 8006482:	e015      	b.n	80064b0 <rshift+0x68>
 8006484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006488:	f1c1 0820 	rsb	r8, r1, #32
 800648c:	40cf      	lsrs	r7, r1
 800648e:	f105 0e04 	add.w	lr, r5, #4
 8006492:	46a1      	mov	r9, r4
 8006494:	4576      	cmp	r6, lr
 8006496:	46f4      	mov	ip, lr
 8006498:	d815      	bhi.n	80064c6 <rshift+0x7e>
 800649a:	1a9a      	subs	r2, r3, r2
 800649c:	0092      	lsls	r2, r2, #2
 800649e:	3a04      	subs	r2, #4
 80064a0:	3501      	adds	r5, #1
 80064a2:	42ae      	cmp	r6, r5
 80064a4:	bf38      	it	cc
 80064a6:	2200      	movcc	r2, #0
 80064a8:	18a3      	adds	r3, r4, r2
 80064aa:	50a7      	str	r7, [r4, r2]
 80064ac:	b107      	cbz	r7, 80064b0 <rshift+0x68>
 80064ae:	3304      	adds	r3, #4
 80064b0:	1b1a      	subs	r2, r3, r4
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80064b8:	bf08      	it	eq
 80064ba:	2300      	moveq	r3, #0
 80064bc:	6102      	str	r2, [r0, #16]
 80064be:	bf08      	it	eq
 80064c0:	6143      	streq	r3, [r0, #20]
 80064c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064c6:	f8dc c000 	ldr.w	ip, [ip]
 80064ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80064ce:	ea4c 0707 	orr.w	r7, ip, r7
 80064d2:	f849 7b04 	str.w	r7, [r9], #4
 80064d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80064da:	40cf      	lsrs	r7, r1
 80064dc:	e7da      	b.n	8006494 <rshift+0x4c>
 80064de:	f851 cb04 	ldr.w	ip, [r1], #4
 80064e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80064e6:	e7c3      	b.n	8006470 <rshift+0x28>
 80064e8:	4623      	mov	r3, r4
 80064ea:	e7e1      	b.n	80064b0 <rshift+0x68>

080064ec <__hexdig_fun>:
 80064ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80064f0:	2b09      	cmp	r3, #9
 80064f2:	d802      	bhi.n	80064fa <__hexdig_fun+0xe>
 80064f4:	3820      	subs	r0, #32
 80064f6:	b2c0      	uxtb	r0, r0
 80064f8:	4770      	bx	lr
 80064fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d801      	bhi.n	8006506 <__hexdig_fun+0x1a>
 8006502:	3847      	subs	r0, #71	; 0x47
 8006504:	e7f7      	b.n	80064f6 <__hexdig_fun+0xa>
 8006506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800650a:	2b05      	cmp	r3, #5
 800650c:	d801      	bhi.n	8006512 <__hexdig_fun+0x26>
 800650e:	3827      	subs	r0, #39	; 0x27
 8006510:	e7f1      	b.n	80064f6 <__hexdig_fun+0xa>
 8006512:	2000      	movs	r0, #0
 8006514:	4770      	bx	lr
	...

08006518 <__gethex>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	4617      	mov	r7, r2
 800651e:	680a      	ldr	r2, [r1, #0]
 8006520:	b085      	sub	sp, #20
 8006522:	f102 0b02 	add.w	fp, r2, #2
 8006526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800652a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800652e:	4681      	mov	r9, r0
 8006530:	468a      	mov	sl, r1
 8006532:	9302      	str	r3, [sp, #8]
 8006534:	32fe      	adds	r2, #254	; 0xfe
 8006536:	eb02 030b 	add.w	r3, r2, fp
 800653a:	46d8      	mov	r8, fp
 800653c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	2830      	cmp	r0, #48	; 0x30
 8006544:	d0f7      	beq.n	8006536 <__gethex+0x1e>
 8006546:	f7ff ffd1 	bl	80064ec <__hexdig_fun>
 800654a:	4604      	mov	r4, r0
 800654c:	2800      	cmp	r0, #0
 800654e:	d138      	bne.n	80065c2 <__gethex+0xaa>
 8006550:	49a7      	ldr	r1, [pc, #668]	; (80067f0 <__gethex+0x2d8>)
 8006552:	2201      	movs	r2, #1
 8006554:	4640      	mov	r0, r8
 8006556:	f7ff ff3c 	bl	80063d2 <strncmp>
 800655a:	4606      	mov	r6, r0
 800655c:	2800      	cmp	r0, #0
 800655e:	d169      	bne.n	8006634 <__gethex+0x11c>
 8006560:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006564:	465d      	mov	r5, fp
 8006566:	f7ff ffc1 	bl	80064ec <__hexdig_fun>
 800656a:	2800      	cmp	r0, #0
 800656c:	d064      	beq.n	8006638 <__gethex+0x120>
 800656e:	465a      	mov	r2, fp
 8006570:	7810      	ldrb	r0, [r2, #0]
 8006572:	2830      	cmp	r0, #48	; 0x30
 8006574:	4690      	mov	r8, r2
 8006576:	f102 0201 	add.w	r2, r2, #1
 800657a:	d0f9      	beq.n	8006570 <__gethex+0x58>
 800657c:	f7ff ffb6 	bl	80064ec <__hexdig_fun>
 8006580:	2301      	movs	r3, #1
 8006582:	fab0 f480 	clz	r4, r0
 8006586:	0964      	lsrs	r4, r4, #5
 8006588:	465e      	mov	r6, fp
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	4642      	mov	r2, r8
 800658e:	4615      	mov	r5, r2
 8006590:	3201      	adds	r2, #1
 8006592:	7828      	ldrb	r0, [r5, #0]
 8006594:	f7ff ffaa 	bl	80064ec <__hexdig_fun>
 8006598:	2800      	cmp	r0, #0
 800659a:	d1f8      	bne.n	800658e <__gethex+0x76>
 800659c:	4994      	ldr	r1, [pc, #592]	; (80067f0 <__gethex+0x2d8>)
 800659e:	2201      	movs	r2, #1
 80065a0:	4628      	mov	r0, r5
 80065a2:	f7ff ff16 	bl	80063d2 <strncmp>
 80065a6:	b978      	cbnz	r0, 80065c8 <__gethex+0xb0>
 80065a8:	b946      	cbnz	r6, 80065bc <__gethex+0xa4>
 80065aa:	1c6e      	adds	r6, r5, #1
 80065ac:	4632      	mov	r2, r6
 80065ae:	4615      	mov	r5, r2
 80065b0:	3201      	adds	r2, #1
 80065b2:	7828      	ldrb	r0, [r5, #0]
 80065b4:	f7ff ff9a 	bl	80064ec <__hexdig_fun>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d1f8      	bne.n	80065ae <__gethex+0x96>
 80065bc:	1b73      	subs	r3, r6, r5
 80065be:	009e      	lsls	r6, r3, #2
 80065c0:	e004      	b.n	80065cc <__gethex+0xb4>
 80065c2:	2400      	movs	r4, #0
 80065c4:	4626      	mov	r6, r4
 80065c6:	e7e1      	b.n	800658c <__gethex+0x74>
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	d1f7      	bne.n	80065bc <__gethex+0xa4>
 80065cc:	782b      	ldrb	r3, [r5, #0]
 80065ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065d2:	2b50      	cmp	r3, #80	; 0x50
 80065d4:	d13d      	bne.n	8006652 <__gethex+0x13a>
 80065d6:	786b      	ldrb	r3, [r5, #1]
 80065d8:	2b2b      	cmp	r3, #43	; 0x2b
 80065da:	d02f      	beq.n	800663c <__gethex+0x124>
 80065dc:	2b2d      	cmp	r3, #45	; 0x2d
 80065de:	d031      	beq.n	8006644 <__gethex+0x12c>
 80065e0:	1c69      	adds	r1, r5, #1
 80065e2:	f04f 0b00 	mov.w	fp, #0
 80065e6:	7808      	ldrb	r0, [r1, #0]
 80065e8:	f7ff ff80 	bl	80064ec <__hexdig_fun>
 80065ec:	1e42      	subs	r2, r0, #1
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	2a18      	cmp	r2, #24
 80065f2:	d82e      	bhi.n	8006652 <__gethex+0x13a>
 80065f4:	f1a0 0210 	sub.w	r2, r0, #16
 80065f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80065fc:	f7ff ff76 	bl	80064ec <__hexdig_fun>
 8006600:	f100 3cff 	add.w	ip, r0, #4294967295
 8006604:	fa5f fc8c 	uxtb.w	ip, ip
 8006608:	f1bc 0f18 	cmp.w	ip, #24
 800660c:	d91d      	bls.n	800664a <__gethex+0x132>
 800660e:	f1bb 0f00 	cmp.w	fp, #0
 8006612:	d000      	beq.n	8006616 <__gethex+0xfe>
 8006614:	4252      	negs	r2, r2
 8006616:	4416      	add	r6, r2
 8006618:	f8ca 1000 	str.w	r1, [sl]
 800661c:	b1dc      	cbz	r4, 8006656 <__gethex+0x13e>
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf14      	ite	ne
 8006624:	f04f 0800 	movne.w	r8, #0
 8006628:	f04f 0806 	moveq.w	r8, #6
 800662c:	4640      	mov	r0, r8
 800662e:	b005      	add	sp, #20
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4645      	mov	r5, r8
 8006636:	4626      	mov	r6, r4
 8006638:	2401      	movs	r4, #1
 800663a:	e7c7      	b.n	80065cc <__gethex+0xb4>
 800663c:	f04f 0b00 	mov.w	fp, #0
 8006640:	1ca9      	adds	r1, r5, #2
 8006642:	e7d0      	b.n	80065e6 <__gethex+0xce>
 8006644:	f04f 0b01 	mov.w	fp, #1
 8006648:	e7fa      	b.n	8006640 <__gethex+0x128>
 800664a:	230a      	movs	r3, #10
 800664c:	fb03 0002 	mla	r0, r3, r2, r0
 8006650:	e7d0      	b.n	80065f4 <__gethex+0xdc>
 8006652:	4629      	mov	r1, r5
 8006654:	e7e0      	b.n	8006618 <__gethex+0x100>
 8006656:	eba5 0308 	sub.w	r3, r5, r8
 800665a:	3b01      	subs	r3, #1
 800665c:	4621      	mov	r1, r4
 800665e:	2b07      	cmp	r3, #7
 8006660:	dc0a      	bgt.n	8006678 <__gethex+0x160>
 8006662:	4648      	mov	r0, r9
 8006664:	f000 fa5a 	bl	8006b1c <_Balloc>
 8006668:	4604      	mov	r4, r0
 800666a:	b940      	cbnz	r0, 800667e <__gethex+0x166>
 800666c:	4b61      	ldr	r3, [pc, #388]	; (80067f4 <__gethex+0x2dc>)
 800666e:	4602      	mov	r2, r0
 8006670:	21e4      	movs	r1, #228	; 0xe4
 8006672:	4861      	ldr	r0, [pc, #388]	; (80067f8 <__gethex+0x2e0>)
 8006674:	f000 ffb0 	bl	80075d8 <__assert_func>
 8006678:	3101      	adds	r1, #1
 800667a:	105b      	asrs	r3, r3, #1
 800667c:	e7ef      	b.n	800665e <__gethex+0x146>
 800667e:	f100 0a14 	add.w	sl, r0, #20
 8006682:	2300      	movs	r3, #0
 8006684:	495a      	ldr	r1, [pc, #360]	; (80067f0 <__gethex+0x2d8>)
 8006686:	f8cd a004 	str.w	sl, [sp, #4]
 800668a:	469b      	mov	fp, r3
 800668c:	45a8      	cmp	r8, r5
 800668e:	d342      	bcc.n	8006716 <__gethex+0x1fe>
 8006690:	9801      	ldr	r0, [sp, #4]
 8006692:	f840 bb04 	str.w	fp, [r0], #4
 8006696:	eba0 000a 	sub.w	r0, r0, sl
 800669a:	1080      	asrs	r0, r0, #2
 800669c:	6120      	str	r0, [r4, #16]
 800669e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 fb2c 	bl	8006d00 <__hi0bits>
 80066a8:	683d      	ldr	r5, [r7, #0]
 80066aa:	eba8 0000 	sub.w	r0, r8, r0
 80066ae:	42a8      	cmp	r0, r5
 80066b0:	dd59      	ble.n	8006766 <__gethex+0x24e>
 80066b2:	eba0 0805 	sub.w	r8, r0, r5
 80066b6:	4641      	mov	r1, r8
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 febb 	bl	8007434 <__any_on>
 80066be:	4683      	mov	fp, r0
 80066c0:	b1b8      	cbz	r0, 80066f2 <__gethex+0x1da>
 80066c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80066c6:	1159      	asrs	r1, r3, #5
 80066c8:	f003 021f 	and.w	r2, r3, #31
 80066cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80066d0:	f04f 0b01 	mov.w	fp, #1
 80066d4:	fa0b f202 	lsl.w	r2, fp, r2
 80066d8:	420a      	tst	r2, r1
 80066da:	d00a      	beq.n	80066f2 <__gethex+0x1da>
 80066dc:	455b      	cmp	r3, fp
 80066de:	dd06      	ble.n	80066ee <__gethex+0x1d6>
 80066e0:	f1a8 0102 	sub.w	r1, r8, #2
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fea5 	bl	8007434 <__any_on>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d138      	bne.n	8006760 <__gethex+0x248>
 80066ee:	f04f 0b02 	mov.w	fp, #2
 80066f2:	4641      	mov	r1, r8
 80066f4:	4620      	mov	r0, r4
 80066f6:	f7ff fea7 	bl	8006448 <rshift>
 80066fa:	4446      	add	r6, r8
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	42b3      	cmp	r3, r6
 8006700:	da41      	bge.n	8006786 <__gethex+0x26e>
 8006702:	4621      	mov	r1, r4
 8006704:	4648      	mov	r0, r9
 8006706:	f000 fa49 	bl	8006b9c <_Bfree>
 800670a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800670c:	2300      	movs	r3, #0
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006714:	e78a      	b.n	800662c <__gethex+0x114>
 8006716:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800671a:	2a2e      	cmp	r2, #46	; 0x2e
 800671c:	d014      	beq.n	8006748 <__gethex+0x230>
 800671e:	2b20      	cmp	r3, #32
 8006720:	d106      	bne.n	8006730 <__gethex+0x218>
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	f843 bb04 	str.w	fp, [r3], #4
 8006728:	f04f 0b00 	mov.w	fp, #0
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	465b      	mov	r3, fp
 8006730:	7828      	ldrb	r0, [r5, #0]
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	f7ff feda 	bl	80064ec <__hexdig_fun>
 8006738:	9b03      	ldr	r3, [sp, #12]
 800673a:	f000 000f 	and.w	r0, r0, #15
 800673e:	4098      	lsls	r0, r3
 8006740:	ea4b 0b00 	orr.w	fp, fp, r0
 8006744:	3304      	adds	r3, #4
 8006746:	e7a1      	b.n	800668c <__gethex+0x174>
 8006748:	45a8      	cmp	r8, r5
 800674a:	d8e8      	bhi.n	800671e <__gethex+0x206>
 800674c:	2201      	movs	r2, #1
 800674e:	4628      	mov	r0, r5
 8006750:	9303      	str	r3, [sp, #12]
 8006752:	f7ff fe3e 	bl	80063d2 <strncmp>
 8006756:	4926      	ldr	r1, [pc, #152]	; (80067f0 <__gethex+0x2d8>)
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	2800      	cmp	r0, #0
 800675c:	d1df      	bne.n	800671e <__gethex+0x206>
 800675e:	e795      	b.n	800668c <__gethex+0x174>
 8006760:	f04f 0b03 	mov.w	fp, #3
 8006764:	e7c5      	b.n	80066f2 <__gethex+0x1da>
 8006766:	da0b      	bge.n	8006780 <__gethex+0x268>
 8006768:	eba5 0800 	sub.w	r8, r5, r0
 800676c:	4621      	mov	r1, r4
 800676e:	4642      	mov	r2, r8
 8006770:	4648      	mov	r0, r9
 8006772:	f000 fc2d 	bl	8006fd0 <__lshift>
 8006776:	eba6 0608 	sub.w	r6, r6, r8
 800677a:	4604      	mov	r4, r0
 800677c:	f100 0a14 	add.w	sl, r0, #20
 8006780:	f04f 0b00 	mov.w	fp, #0
 8006784:	e7ba      	b.n	80066fc <__gethex+0x1e4>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	42b3      	cmp	r3, r6
 800678a:	dd73      	ble.n	8006874 <__gethex+0x35c>
 800678c:	1b9e      	subs	r6, r3, r6
 800678e:	42b5      	cmp	r5, r6
 8006790:	dc34      	bgt.n	80067fc <__gethex+0x2e4>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d023      	beq.n	80067e0 <__gethex+0x2c8>
 8006798:	2b03      	cmp	r3, #3
 800679a:	d025      	beq.n	80067e8 <__gethex+0x2d0>
 800679c:	2b01      	cmp	r3, #1
 800679e:	d115      	bne.n	80067cc <__gethex+0x2b4>
 80067a0:	42b5      	cmp	r5, r6
 80067a2:	d113      	bne.n	80067cc <__gethex+0x2b4>
 80067a4:	2d01      	cmp	r5, #1
 80067a6:	d10b      	bne.n	80067c0 <__gethex+0x2a8>
 80067a8:	9a02      	ldr	r2, [sp, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	2301      	movs	r3, #1
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	f8ca 3000 	str.w	r3, [sl]
 80067b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80067bc:	601c      	str	r4, [r3, #0]
 80067be:	e735      	b.n	800662c <__gethex+0x114>
 80067c0:	1e69      	subs	r1, r5, #1
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 fe36 	bl	8007434 <__any_on>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d1ed      	bne.n	80067a8 <__gethex+0x290>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4648      	mov	r0, r9
 80067d0:	f000 f9e4 	bl	8006b9c <_Bfree>
 80067d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d6:	2300      	movs	r3, #0
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	f04f 0850 	mov.w	r8, #80	; 0x50
 80067de:	e725      	b.n	800662c <__gethex+0x114>
 80067e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f2      	bne.n	80067cc <__gethex+0x2b4>
 80067e6:	e7df      	b.n	80067a8 <__gethex+0x290>
 80067e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1dc      	bne.n	80067a8 <__gethex+0x290>
 80067ee:	e7ed      	b.n	80067cc <__gethex+0x2b4>
 80067f0:	08007c2d 	.word	0x08007c2d
 80067f4:	08007de7 	.word	0x08007de7
 80067f8:	08007df8 	.word	0x08007df8
 80067fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8006800:	f1bb 0f00 	cmp.w	fp, #0
 8006804:	d133      	bne.n	800686e <__gethex+0x356>
 8006806:	f1b8 0f00 	cmp.w	r8, #0
 800680a:	d004      	beq.n	8006816 <__gethex+0x2fe>
 800680c:	4641      	mov	r1, r8
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fe10 	bl	8007434 <__any_on>
 8006814:	4683      	mov	fp, r0
 8006816:	ea4f 1268 	mov.w	r2, r8, asr #5
 800681a:	2301      	movs	r3, #1
 800681c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006820:	f008 081f 	and.w	r8, r8, #31
 8006824:	fa03 f308 	lsl.w	r3, r3, r8
 8006828:	4213      	tst	r3, r2
 800682a:	4631      	mov	r1, r6
 800682c:	4620      	mov	r0, r4
 800682e:	bf18      	it	ne
 8006830:	f04b 0b02 	orrne.w	fp, fp, #2
 8006834:	1bad      	subs	r5, r5, r6
 8006836:	f7ff fe07 	bl	8006448 <rshift>
 800683a:	687e      	ldr	r6, [r7, #4]
 800683c:	f04f 0802 	mov.w	r8, #2
 8006840:	f1bb 0f00 	cmp.w	fp, #0
 8006844:	d04a      	beq.n	80068dc <__gethex+0x3c4>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d016      	beq.n	800687a <__gethex+0x362>
 800684c:	2b03      	cmp	r3, #3
 800684e:	d018      	beq.n	8006882 <__gethex+0x36a>
 8006850:	2b01      	cmp	r3, #1
 8006852:	d109      	bne.n	8006868 <__gethex+0x350>
 8006854:	f01b 0f02 	tst.w	fp, #2
 8006858:	d006      	beq.n	8006868 <__gethex+0x350>
 800685a:	f8da 3000 	ldr.w	r3, [sl]
 800685e:	ea4b 0b03 	orr.w	fp, fp, r3
 8006862:	f01b 0f01 	tst.w	fp, #1
 8006866:	d10f      	bne.n	8006888 <__gethex+0x370>
 8006868:	f048 0810 	orr.w	r8, r8, #16
 800686c:	e036      	b.n	80068dc <__gethex+0x3c4>
 800686e:	f04f 0b01 	mov.w	fp, #1
 8006872:	e7d0      	b.n	8006816 <__gethex+0x2fe>
 8006874:	f04f 0801 	mov.w	r8, #1
 8006878:	e7e2      	b.n	8006840 <__gethex+0x328>
 800687a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800687c:	f1c3 0301 	rsb	r3, r3, #1
 8006880:	930f      	str	r3, [sp, #60]	; 0x3c
 8006882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0ef      	beq.n	8006868 <__gethex+0x350>
 8006888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800688c:	f104 0214 	add.w	r2, r4, #20
 8006890:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800689a:	2300      	movs	r3, #0
 800689c:	4694      	mov	ip, r2
 800689e:	f852 1b04 	ldr.w	r1, [r2], #4
 80068a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80068a6:	d01e      	beq.n	80068e6 <__gethex+0x3ce>
 80068a8:	3101      	adds	r1, #1
 80068aa:	f8cc 1000 	str.w	r1, [ip]
 80068ae:	f1b8 0f02 	cmp.w	r8, #2
 80068b2:	f104 0214 	add.w	r2, r4, #20
 80068b6:	d13d      	bne.n	8006934 <__gethex+0x41c>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	42ab      	cmp	r3, r5
 80068be:	d10b      	bne.n	80068d8 <__gethex+0x3c0>
 80068c0:	1169      	asrs	r1, r5, #5
 80068c2:	2301      	movs	r3, #1
 80068c4:	f005 051f 	and.w	r5, r5, #31
 80068c8:	fa03 f505 	lsl.w	r5, r3, r5
 80068cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068d0:	421d      	tst	r5, r3
 80068d2:	bf18      	it	ne
 80068d4:	f04f 0801 	movne.w	r8, #1
 80068d8:	f048 0820 	orr.w	r8, r8, #32
 80068dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068de:	601c      	str	r4, [r3, #0]
 80068e0:	9b02      	ldr	r3, [sp, #8]
 80068e2:	601e      	str	r6, [r3, #0]
 80068e4:	e6a2      	b.n	800662c <__gethex+0x114>
 80068e6:	4290      	cmp	r0, r2
 80068e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80068ec:	d8d6      	bhi.n	800689c <__gethex+0x384>
 80068ee:	68a2      	ldr	r2, [r4, #8]
 80068f0:	4593      	cmp	fp, r2
 80068f2:	db17      	blt.n	8006924 <__gethex+0x40c>
 80068f4:	6861      	ldr	r1, [r4, #4]
 80068f6:	4648      	mov	r0, r9
 80068f8:	3101      	adds	r1, #1
 80068fa:	f000 f90f 	bl	8006b1c <_Balloc>
 80068fe:	4682      	mov	sl, r0
 8006900:	b918      	cbnz	r0, 800690a <__gethex+0x3f2>
 8006902:	4b1b      	ldr	r3, [pc, #108]	; (8006970 <__gethex+0x458>)
 8006904:	4602      	mov	r2, r0
 8006906:	2184      	movs	r1, #132	; 0x84
 8006908:	e6b3      	b.n	8006672 <__gethex+0x15a>
 800690a:	6922      	ldr	r2, [r4, #16]
 800690c:	3202      	adds	r2, #2
 800690e:	f104 010c 	add.w	r1, r4, #12
 8006912:	0092      	lsls	r2, r2, #2
 8006914:	300c      	adds	r0, #12
 8006916:	f7ff fd7f 	bl	8006418 <memcpy>
 800691a:	4621      	mov	r1, r4
 800691c:	4648      	mov	r0, r9
 800691e:	f000 f93d 	bl	8006b9c <_Bfree>
 8006922:	4654      	mov	r4, sl
 8006924:	6922      	ldr	r2, [r4, #16]
 8006926:	1c51      	adds	r1, r2, #1
 8006928:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800692c:	6121      	str	r1, [r4, #16]
 800692e:	2101      	movs	r1, #1
 8006930:	6151      	str	r1, [r2, #20]
 8006932:	e7bc      	b.n	80068ae <__gethex+0x396>
 8006934:	6921      	ldr	r1, [r4, #16]
 8006936:	4559      	cmp	r1, fp
 8006938:	dd0b      	ble.n	8006952 <__gethex+0x43a>
 800693a:	2101      	movs	r1, #1
 800693c:	4620      	mov	r0, r4
 800693e:	f7ff fd83 	bl	8006448 <rshift>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	3601      	adds	r6, #1
 8006946:	42b3      	cmp	r3, r6
 8006948:	f6ff aedb 	blt.w	8006702 <__gethex+0x1ea>
 800694c:	f04f 0801 	mov.w	r8, #1
 8006950:	e7c2      	b.n	80068d8 <__gethex+0x3c0>
 8006952:	f015 051f 	ands.w	r5, r5, #31
 8006956:	d0f9      	beq.n	800694c <__gethex+0x434>
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	441a      	add	r2, r3
 800695c:	f1c5 0520 	rsb	r5, r5, #32
 8006960:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006964:	f000 f9cc 	bl	8006d00 <__hi0bits>
 8006968:	42a8      	cmp	r0, r5
 800696a:	dbe6      	blt.n	800693a <__gethex+0x422>
 800696c:	e7ee      	b.n	800694c <__gethex+0x434>
 800696e:	bf00      	nop
 8006970:	08007de7 	.word	0x08007de7

08006974 <L_shift>:
 8006974:	f1c2 0208 	rsb	r2, r2, #8
 8006978:	0092      	lsls	r2, r2, #2
 800697a:	b570      	push	{r4, r5, r6, lr}
 800697c:	f1c2 0620 	rsb	r6, r2, #32
 8006980:	6843      	ldr	r3, [r0, #4]
 8006982:	6804      	ldr	r4, [r0, #0]
 8006984:	fa03 f506 	lsl.w	r5, r3, r6
 8006988:	432c      	orrs	r4, r5
 800698a:	40d3      	lsrs	r3, r2
 800698c:	6004      	str	r4, [r0, #0]
 800698e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006992:	4288      	cmp	r0, r1
 8006994:	d3f4      	bcc.n	8006980 <L_shift+0xc>
 8006996:	bd70      	pop	{r4, r5, r6, pc}

08006998 <__match>:
 8006998:	b530      	push	{r4, r5, lr}
 800699a:	6803      	ldr	r3, [r0, #0]
 800699c:	3301      	adds	r3, #1
 800699e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a2:	b914      	cbnz	r4, 80069aa <__match+0x12>
 80069a4:	6003      	str	r3, [r0, #0]
 80069a6:	2001      	movs	r0, #1
 80069a8:	bd30      	pop	{r4, r5, pc}
 80069aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80069b2:	2d19      	cmp	r5, #25
 80069b4:	bf98      	it	ls
 80069b6:	3220      	addls	r2, #32
 80069b8:	42a2      	cmp	r2, r4
 80069ba:	d0f0      	beq.n	800699e <__match+0x6>
 80069bc:	2000      	movs	r0, #0
 80069be:	e7f3      	b.n	80069a8 <__match+0x10>

080069c0 <__hexnan>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	680b      	ldr	r3, [r1, #0]
 80069c6:	6801      	ldr	r1, [r0, #0]
 80069c8:	115e      	asrs	r6, r3, #5
 80069ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069ce:	f013 031f 	ands.w	r3, r3, #31
 80069d2:	b087      	sub	sp, #28
 80069d4:	bf18      	it	ne
 80069d6:	3604      	addne	r6, #4
 80069d8:	2500      	movs	r5, #0
 80069da:	1f37      	subs	r7, r6, #4
 80069dc:	4682      	mov	sl, r0
 80069de:	4690      	mov	r8, r2
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80069e6:	46b9      	mov	r9, r7
 80069e8:	463c      	mov	r4, r7
 80069ea:	9502      	str	r5, [sp, #8]
 80069ec:	46ab      	mov	fp, r5
 80069ee:	784a      	ldrb	r2, [r1, #1]
 80069f0:	1c4b      	adds	r3, r1, #1
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	b342      	cbz	r2, 8006a48 <__hexnan+0x88>
 80069f6:	4610      	mov	r0, r2
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	9204      	str	r2, [sp, #16]
 80069fc:	f7ff fd76 	bl	80064ec <__hexdig_fun>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d14f      	bne.n	8006aa4 <__hexnan+0xe4>
 8006a04:	9a04      	ldr	r2, [sp, #16]
 8006a06:	9905      	ldr	r1, [sp, #20]
 8006a08:	2a20      	cmp	r2, #32
 8006a0a:	d818      	bhi.n	8006a3e <__hexnan+0x7e>
 8006a0c:	9b02      	ldr	r3, [sp, #8]
 8006a0e:	459b      	cmp	fp, r3
 8006a10:	dd13      	ble.n	8006a3a <__hexnan+0x7a>
 8006a12:	454c      	cmp	r4, r9
 8006a14:	d206      	bcs.n	8006a24 <__hexnan+0x64>
 8006a16:	2d07      	cmp	r5, #7
 8006a18:	dc04      	bgt.n	8006a24 <__hexnan+0x64>
 8006a1a:	462a      	mov	r2, r5
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff ffa8 	bl	8006974 <L_shift>
 8006a24:	4544      	cmp	r4, r8
 8006a26:	d950      	bls.n	8006aca <__hexnan+0x10a>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f1a4 0904 	sub.w	r9, r4, #4
 8006a2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a32:	f8cd b008 	str.w	fp, [sp, #8]
 8006a36:	464c      	mov	r4, r9
 8006a38:	461d      	mov	r5, r3
 8006a3a:	9903      	ldr	r1, [sp, #12]
 8006a3c:	e7d7      	b.n	80069ee <__hexnan+0x2e>
 8006a3e:	2a29      	cmp	r2, #41	; 0x29
 8006a40:	d155      	bne.n	8006aee <__hexnan+0x12e>
 8006a42:	3102      	adds	r1, #2
 8006a44:	f8ca 1000 	str.w	r1, [sl]
 8006a48:	f1bb 0f00 	cmp.w	fp, #0
 8006a4c:	d04f      	beq.n	8006aee <__hexnan+0x12e>
 8006a4e:	454c      	cmp	r4, r9
 8006a50:	d206      	bcs.n	8006a60 <__hexnan+0xa0>
 8006a52:	2d07      	cmp	r5, #7
 8006a54:	dc04      	bgt.n	8006a60 <__hexnan+0xa0>
 8006a56:	462a      	mov	r2, r5
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff ff8a 	bl	8006974 <L_shift>
 8006a60:	4544      	cmp	r4, r8
 8006a62:	d934      	bls.n	8006ace <__hexnan+0x10e>
 8006a64:	f1a8 0204 	sub.w	r2, r8, #4
 8006a68:	4623      	mov	r3, r4
 8006a6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006a6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006a72:	429f      	cmp	r7, r3
 8006a74:	d2f9      	bcs.n	8006a6a <__hexnan+0xaa>
 8006a76:	1b3b      	subs	r3, r7, r4
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	3e03      	subs	r6, #3
 8006a80:	3401      	adds	r4, #1
 8006a82:	42a6      	cmp	r6, r4
 8006a84:	bf38      	it	cc
 8006a86:	2304      	movcc	r3, #4
 8006a88:	4443      	add	r3, r8
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f843 2b04 	str.w	r2, [r3], #4
 8006a90:	429f      	cmp	r7, r3
 8006a92:	d2fb      	bcs.n	8006a8c <__hexnan+0xcc>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	b91b      	cbnz	r3, 8006aa0 <__hexnan+0xe0>
 8006a98:	4547      	cmp	r7, r8
 8006a9a:	d126      	bne.n	8006aea <__hexnan+0x12a>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	2005      	movs	r0, #5
 8006aa2:	e025      	b.n	8006af0 <__hexnan+0x130>
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	2d08      	cmp	r5, #8
 8006aa8:	f10b 0b01 	add.w	fp, fp, #1
 8006aac:	dd06      	ble.n	8006abc <__hexnan+0xfc>
 8006aae:	4544      	cmp	r4, r8
 8006ab0:	d9c3      	bls.n	8006a3a <__hexnan+0x7a>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ab8:	2501      	movs	r5, #1
 8006aba:	3c04      	subs	r4, #4
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	f000 000f 	and.w	r0, r0, #15
 8006ac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006ac6:	6020      	str	r0, [r4, #0]
 8006ac8:	e7b7      	b.n	8006a3a <__hexnan+0x7a>
 8006aca:	2508      	movs	r5, #8
 8006acc:	e7b5      	b.n	8006a3a <__hexnan+0x7a>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0df      	beq.n	8006a94 <__hexnan+0xd4>
 8006ad4:	f1c3 0320 	rsb	r3, r3, #32
 8006ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8006adc:	40da      	lsrs	r2, r3
 8006ade:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	f846 3c04 	str.w	r3, [r6, #-4]
 8006ae8:	e7d4      	b.n	8006a94 <__hexnan+0xd4>
 8006aea:	3f04      	subs	r7, #4
 8006aec:	e7d2      	b.n	8006a94 <__hexnan+0xd4>
 8006aee:	2004      	movs	r0, #4
 8006af0:	b007      	add	sp, #28
 8006af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006af6 <__ascii_mbtowc>:
 8006af6:	b082      	sub	sp, #8
 8006af8:	b901      	cbnz	r1, 8006afc <__ascii_mbtowc+0x6>
 8006afa:	a901      	add	r1, sp, #4
 8006afc:	b142      	cbz	r2, 8006b10 <__ascii_mbtowc+0x1a>
 8006afe:	b14b      	cbz	r3, 8006b14 <__ascii_mbtowc+0x1e>
 8006b00:	7813      	ldrb	r3, [r2, #0]
 8006b02:	600b      	str	r3, [r1, #0]
 8006b04:	7812      	ldrb	r2, [r2, #0]
 8006b06:	1e10      	subs	r0, r2, #0
 8006b08:	bf18      	it	ne
 8006b0a:	2001      	movne	r0, #1
 8006b0c:	b002      	add	sp, #8
 8006b0e:	4770      	bx	lr
 8006b10:	4610      	mov	r0, r2
 8006b12:	e7fb      	b.n	8006b0c <__ascii_mbtowc+0x16>
 8006b14:	f06f 0001 	mvn.w	r0, #1
 8006b18:	e7f8      	b.n	8006b0c <__ascii_mbtowc+0x16>
	...

08006b1c <_Balloc>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	69c6      	ldr	r6, [r0, #28]
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	b976      	cbnz	r6, 8006b44 <_Balloc+0x28>
 8006b26:	2010      	movs	r0, #16
 8006b28:	f000 fd8a 	bl	8007640 <malloc>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	61e0      	str	r0, [r4, #28]
 8006b30:	b920      	cbnz	r0, 8006b3c <_Balloc+0x20>
 8006b32:	4b18      	ldr	r3, [pc, #96]	; (8006b94 <_Balloc+0x78>)
 8006b34:	4818      	ldr	r0, [pc, #96]	; (8006b98 <_Balloc+0x7c>)
 8006b36:	216b      	movs	r1, #107	; 0x6b
 8006b38:	f000 fd4e 	bl	80075d8 <__assert_func>
 8006b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b40:	6006      	str	r6, [r0, #0]
 8006b42:	60c6      	str	r6, [r0, #12]
 8006b44:	69e6      	ldr	r6, [r4, #28]
 8006b46:	68f3      	ldr	r3, [r6, #12]
 8006b48:	b183      	cbz	r3, 8006b6c <_Balloc+0x50>
 8006b4a:	69e3      	ldr	r3, [r4, #28]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b52:	b9b8      	cbnz	r0, 8006b84 <_Balloc+0x68>
 8006b54:	2101      	movs	r1, #1
 8006b56:	fa01 f605 	lsl.w	r6, r1, r5
 8006b5a:	1d72      	adds	r2, r6, #5
 8006b5c:	0092      	lsls	r2, r2, #2
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 fd58 	bl	8007614 <_calloc_r>
 8006b64:	b160      	cbz	r0, 8006b80 <_Balloc+0x64>
 8006b66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b6a:	e00e      	b.n	8006b8a <_Balloc+0x6e>
 8006b6c:	2221      	movs	r2, #33	; 0x21
 8006b6e:	2104      	movs	r1, #4
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fd4f 	bl	8007614 <_calloc_r>
 8006b76:	69e3      	ldr	r3, [r4, #28]
 8006b78:	60f0      	str	r0, [r6, #12]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e4      	bne.n	8006b4a <_Balloc+0x2e>
 8006b80:	2000      	movs	r0, #0
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	6802      	ldr	r2, [r0, #0]
 8006b86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b90:	e7f7      	b.n	8006b82 <_Balloc+0x66>
 8006b92:	bf00      	nop
 8006b94:	08007e58 	.word	0x08007e58
 8006b98:	08007e6f 	.word	0x08007e6f

08006b9c <_Bfree>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	69c6      	ldr	r6, [r0, #28]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b976      	cbnz	r6, 8006bc4 <_Bfree+0x28>
 8006ba6:	2010      	movs	r0, #16
 8006ba8:	f000 fd4a 	bl	8007640 <malloc>
 8006bac:	4602      	mov	r2, r0
 8006bae:	61e8      	str	r0, [r5, #28]
 8006bb0:	b920      	cbnz	r0, 8006bbc <_Bfree+0x20>
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <_Bfree+0x3c>)
 8006bb4:	4809      	ldr	r0, [pc, #36]	; (8006bdc <_Bfree+0x40>)
 8006bb6:	218f      	movs	r1, #143	; 0x8f
 8006bb8:	f000 fd0e 	bl	80075d8 <__assert_func>
 8006bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bc0:	6006      	str	r6, [r0, #0]
 8006bc2:	60c6      	str	r6, [r0, #12]
 8006bc4:	b13c      	cbz	r4, 8006bd6 <_Bfree+0x3a>
 8006bc6:	69eb      	ldr	r3, [r5, #28]
 8006bc8:	6862      	ldr	r2, [r4, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bd0:	6021      	str	r1, [r4, #0]
 8006bd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	08007e58 	.word	0x08007e58
 8006bdc:	08007e6f 	.word	0x08007e6f

08006be0 <__multadd>:
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	690d      	ldr	r5, [r1, #16]
 8006be6:	4607      	mov	r7, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	461e      	mov	r6, r3
 8006bec:	f101 0c14 	add.w	ip, r1, #20
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f8dc 3000 	ldr.w	r3, [ip]
 8006bf6:	b299      	uxth	r1, r3
 8006bf8:	fb02 6101 	mla	r1, r2, r1, r6
 8006bfc:	0c1e      	lsrs	r6, r3, #16
 8006bfe:	0c0b      	lsrs	r3, r1, #16
 8006c00:	fb02 3306 	mla	r3, r2, r6, r3
 8006c04:	b289      	uxth	r1, r1
 8006c06:	3001      	adds	r0, #1
 8006c08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c0c:	4285      	cmp	r5, r0
 8006c0e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c16:	dcec      	bgt.n	8006bf2 <__multadd+0x12>
 8006c18:	b30e      	cbz	r6, 8006c5e <__multadd+0x7e>
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dc19      	bgt.n	8006c54 <__multadd+0x74>
 8006c20:	6861      	ldr	r1, [r4, #4]
 8006c22:	4638      	mov	r0, r7
 8006c24:	3101      	adds	r1, #1
 8006c26:	f7ff ff79 	bl	8006b1c <_Balloc>
 8006c2a:	4680      	mov	r8, r0
 8006c2c:	b928      	cbnz	r0, 8006c3a <__multadd+0x5a>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <__multadd+0x84>)
 8006c32:	480d      	ldr	r0, [pc, #52]	; (8006c68 <__multadd+0x88>)
 8006c34:	21ba      	movs	r1, #186	; 0xba
 8006c36:	f000 fccf 	bl	80075d8 <__assert_func>
 8006c3a:	6922      	ldr	r2, [r4, #16]
 8006c3c:	3202      	adds	r2, #2
 8006c3e:	f104 010c 	add.w	r1, r4, #12
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	300c      	adds	r0, #12
 8006c46:	f7ff fbe7 	bl	8006418 <memcpy>
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f7ff ffa5 	bl	8006b9c <_Bfree>
 8006c52:	4644      	mov	r4, r8
 8006c54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c58:	3501      	adds	r5, #1
 8006c5a:	615e      	str	r6, [r3, #20]
 8006c5c:	6125      	str	r5, [r4, #16]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c64:	08007de7 	.word	0x08007de7
 8006c68:	08007e6f 	.word	0x08007e6f

08006c6c <__s2b>:
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	460c      	mov	r4, r1
 8006c72:	4615      	mov	r5, r2
 8006c74:	461f      	mov	r7, r3
 8006c76:	2209      	movs	r2, #9
 8006c78:	3308      	adds	r3, #8
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c80:	2100      	movs	r1, #0
 8006c82:	2201      	movs	r2, #1
 8006c84:	429a      	cmp	r2, r3
 8006c86:	db09      	blt.n	8006c9c <__s2b+0x30>
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff ff47 	bl	8006b1c <_Balloc>
 8006c8e:	b940      	cbnz	r0, 8006ca2 <__s2b+0x36>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <__s2b+0x8c>)
 8006c94:	4819      	ldr	r0, [pc, #100]	; (8006cfc <__s2b+0x90>)
 8006c96:	21d3      	movs	r1, #211	; 0xd3
 8006c98:	f000 fc9e 	bl	80075d8 <__assert_func>
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	3101      	adds	r1, #1
 8006ca0:	e7f0      	b.n	8006c84 <__s2b+0x18>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	6143      	str	r3, [r0, #20]
 8006ca6:	2d09      	cmp	r5, #9
 8006ca8:	f04f 0301 	mov.w	r3, #1
 8006cac:	6103      	str	r3, [r0, #16]
 8006cae:	dd16      	ble.n	8006cde <__s2b+0x72>
 8006cb0:	f104 0909 	add.w	r9, r4, #9
 8006cb4:	46c8      	mov	r8, r9
 8006cb6:	442c      	add	r4, r5
 8006cb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	3b30      	subs	r3, #48	; 0x30
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ff8c 	bl	8006be0 <__multadd>
 8006cc8:	45a0      	cmp	r8, r4
 8006cca:	d1f5      	bne.n	8006cb8 <__s2b+0x4c>
 8006ccc:	f1a5 0408 	sub.w	r4, r5, #8
 8006cd0:	444c      	add	r4, r9
 8006cd2:	1b2d      	subs	r5, r5, r4
 8006cd4:	1963      	adds	r3, r4, r5
 8006cd6:	42bb      	cmp	r3, r7
 8006cd8:	db04      	blt.n	8006ce4 <__s2b+0x78>
 8006cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cde:	340a      	adds	r4, #10
 8006ce0:	2509      	movs	r5, #9
 8006ce2:	e7f6      	b.n	8006cd2 <__s2b+0x66>
 8006ce4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ce8:	4601      	mov	r1, r0
 8006cea:	3b30      	subs	r3, #48	; 0x30
 8006cec:	220a      	movs	r2, #10
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ff76 	bl	8006be0 <__multadd>
 8006cf4:	e7ee      	b.n	8006cd4 <__s2b+0x68>
 8006cf6:	bf00      	nop
 8006cf8:	08007de7 	.word	0x08007de7
 8006cfc:	08007e6f 	.word	0x08007e6f

08006d00 <__hi0bits>:
 8006d00:	0c03      	lsrs	r3, r0, #16
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	b9d3      	cbnz	r3, 8006d3c <__hi0bits+0x3c>
 8006d06:	0400      	lsls	r0, r0, #16
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d0e:	bf04      	itt	eq
 8006d10:	0200      	lsleq	r0, r0, #8
 8006d12:	3308      	addeq	r3, #8
 8006d14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d18:	bf04      	itt	eq
 8006d1a:	0100      	lsleq	r0, r0, #4
 8006d1c:	3304      	addeq	r3, #4
 8006d1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d22:	bf04      	itt	eq
 8006d24:	0080      	lsleq	r0, r0, #2
 8006d26:	3302      	addeq	r3, #2
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	db05      	blt.n	8006d38 <__hi0bits+0x38>
 8006d2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d30:	f103 0301 	add.w	r3, r3, #1
 8006d34:	bf08      	it	eq
 8006d36:	2320      	moveq	r3, #32
 8006d38:	4618      	mov	r0, r3
 8006d3a:	4770      	bx	lr
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e7e4      	b.n	8006d0a <__hi0bits+0xa>

08006d40 <__lo0bits>:
 8006d40:	6803      	ldr	r3, [r0, #0]
 8006d42:	f013 0207 	ands.w	r2, r3, #7
 8006d46:	d00c      	beq.n	8006d62 <__lo0bits+0x22>
 8006d48:	07d9      	lsls	r1, r3, #31
 8006d4a:	d422      	bmi.n	8006d92 <__lo0bits+0x52>
 8006d4c:	079a      	lsls	r2, r3, #30
 8006d4e:	bf49      	itett	mi
 8006d50:	085b      	lsrmi	r3, r3, #1
 8006d52:	089b      	lsrpl	r3, r3, #2
 8006d54:	6003      	strmi	r3, [r0, #0]
 8006d56:	2201      	movmi	r2, #1
 8006d58:	bf5c      	itt	pl
 8006d5a:	6003      	strpl	r3, [r0, #0]
 8006d5c:	2202      	movpl	r2, #2
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4770      	bx	lr
 8006d62:	b299      	uxth	r1, r3
 8006d64:	b909      	cbnz	r1, 8006d6a <__lo0bits+0x2a>
 8006d66:	0c1b      	lsrs	r3, r3, #16
 8006d68:	2210      	movs	r2, #16
 8006d6a:	b2d9      	uxtb	r1, r3
 8006d6c:	b909      	cbnz	r1, 8006d72 <__lo0bits+0x32>
 8006d6e:	3208      	adds	r2, #8
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	0719      	lsls	r1, r3, #28
 8006d74:	bf04      	itt	eq
 8006d76:	091b      	lsreq	r3, r3, #4
 8006d78:	3204      	addeq	r2, #4
 8006d7a:	0799      	lsls	r1, r3, #30
 8006d7c:	bf04      	itt	eq
 8006d7e:	089b      	lsreq	r3, r3, #2
 8006d80:	3202      	addeq	r2, #2
 8006d82:	07d9      	lsls	r1, r3, #31
 8006d84:	d403      	bmi.n	8006d8e <__lo0bits+0x4e>
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	f102 0201 	add.w	r2, r2, #1
 8006d8c:	d003      	beq.n	8006d96 <__lo0bits+0x56>
 8006d8e:	6003      	str	r3, [r0, #0]
 8006d90:	e7e5      	b.n	8006d5e <__lo0bits+0x1e>
 8006d92:	2200      	movs	r2, #0
 8006d94:	e7e3      	b.n	8006d5e <__lo0bits+0x1e>
 8006d96:	2220      	movs	r2, #32
 8006d98:	e7e1      	b.n	8006d5e <__lo0bits+0x1e>
	...

08006d9c <__i2b>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	460c      	mov	r4, r1
 8006da0:	2101      	movs	r1, #1
 8006da2:	f7ff febb 	bl	8006b1c <_Balloc>
 8006da6:	4602      	mov	r2, r0
 8006da8:	b928      	cbnz	r0, 8006db6 <__i2b+0x1a>
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <__i2b+0x24>)
 8006dac:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <__i2b+0x28>)
 8006dae:	f240 1145 	movw	r1, #325	; 0x145
 8006db2:	f000 fc11 	bl	80075d8 <__assert_func>
 8006db6:	2301      	movs	r3, #1
 8006db8:	6144      	str	r4, [r0, #20]
 8006dba:	6103      	str	r3, [r0, #16]
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	08007de7 	.word	0x08007de7
 8006dc4:	08007e6f 	.word	0x08007e6f

08006dc8 <__multiply>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	4691      	mov	r9, r2
 8006dce:	690a      	ldr	r2, [r1, #16]
 8006dd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	bfb8      	it	lt
 8006dd8:	460b      	movlt	r3, r1
 8006dda:	460c      	mov	r4, r1
 8006ddc:	bfbc      	itt	lt
 8006dde:	464c      	movlt	r4, r9
 8006de0:	4699      	movlt	r9, r3
 8006de2:	6927      	ldr	r7, [r4, #16]
 8006de4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006de8:	68a3      	ldr	r3, [r4, #8]
 8006dea:	6861      	ldr	r1, [r4, #4]
 8006dec:	eb07 060a 	add.w	r6, r7, sl
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	b085      	sub	sp, #20
 8006df4:	bfb8      	it	lt
 8006df6:	3101      	addlt	r1, #1
 8006df8:	f7ff fe90 	bl	8006b1c <_Balloc>
 8006dfc:	b930      	cbnz	r0, 8006e0c <__multiply+0x44>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b44      	ldr	r3, [pc, #272]	; (8006f14 <__multiply+0x14c>)
 8006e02:	4845      	ldr	r0, [pc, #276]	; (8006f18 <__multiply+0x150>)
 8006e04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e08:	f000 fbe6 	bl	80075d8 <__assert_func>
 8006e0c:	f100 0514 	add.w	r5, r0, #20
 8006e10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e14:	462b      	mov	r3, r5
 8006e16:	2200      	movs	r2, #0
 8006e18:	4543      	cmp	r3, r8
 8006e1a:	d321      	bcc.n	8006e60 <__multiply+0x98>
 8006e1c:	f104 0314 	add.w	r3, r4, #20
 8006e20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e24:	f109 0314 	add.w	r3, r9, #20
 8006e28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e2c:	9202      	str	r2, [sp, #8]
 8006e2e:	1b3a      	subs	r2, r7, r4
 8006e30:	3a15      	subs	r2, #21
 8006e32:	f022 0203 	bic.w	r2, r2, #3
 8006e36:	3204      	adds	r2, #4
 8006e38:	f104 0115 	add.w	r1, r4, #21
 8006e3c:	428f      	cmp	r7, r1
 8006e3e:	bf38      	it	cc
 8006e40:	2204      	movcc	r2, #4
 8006e42:	9201      	str	r2, [sp, #4]
 8006e44:	9a02      	ldr	r2, [sp, #8]
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d80c      	bhi.n	8006e66 <__multiply+0x9e>
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	dd03      	ble.n	8006e58 <__multiply+0x90>
 8006e50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d05b      	beq.n	8006f10 <__multiply+0x148>
 8006e58:	6106      	str	r6, [r0, #16]
 8006e5a:	b005      	add	sp, #20
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	f843 2b04 	str.w	r2, [r3], #4
 8006e64:	e7d8      	b.n	8006e18 <__multiply+0x50>
 8006e66:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e6a:	f1ba 0f00 	cmp.w	sl, #0
 8006e6e:	d024      	beq.n	8006eba <__multiply+0xf2>
 8006e70:	f104 0e14 	add.w	lr, r4, #20
 8006e74:	46a9      	mov	r9, r5
 8006e76:	f04f 0c00 	mov.w	ip, #0
 8006e7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e7e:	f8d9 1000 	ldr.w	r1, [r9]
 8006e82:	fa1f fb82 	uxth.w	fp, r2
 8006e86:	b289      	uxth	r1, r1
 8006e88:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e90:	f8d9 2000 	ldr.w	r2, [r9]
 8006e94:	4461      	add	r1, ip
 8006e96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ea2:	b289      	uxth	r1, r1
 8006ea4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ea8:	4577      	cmp	r7, lr
 8006eaa:	f849 1b04 	str.w	r1, [r9], #4
 8006eae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eb2:	d8e2      	bhi.n	8006e7a <__multiply+0xb2>
 8006eb4:	9a01      	ldr	r2, [sp, #4]
 8006eb6:	f845 c002 	str.w	ip, [r5, r2]
 8006eba:	9a03      	ldr	r2, [sp, #12]
 8006ebc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	f1b9 0f00 	cmp.w	r9, #0
 8006ec6:	d021      	beq.n	8006f0c <__multiply+0x144>
 8006ec8:	6829      	ldr	r1, [r5, #0]
 8006eca:	f104 0c14 	add.w	ip, r4, #20
 8006ece:	46ae      	mov	lr, r5
 8006ed0:	f04f 0a00 	mov.w	sl, #0
 8006ed4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ed8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006edc:	fb09 220b 	mla	r2, r9, fp, r2
 8006ee0:	4452      	add	r2, sl
 8006ee2:	b289      	uxth	r1, r1
 8006ee4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ee8:	f84e 1b04 	str.w	r1, [lr], #4
 8006eec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ef0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ef4:	f8be 1000 	ldrh.w	r1, [lr]
 8006ef8:	fb09 110a 	mla	r1, r9, sl, r1
 8006efc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f00:	4567      	cmp	r7, ip
 8006f02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f06:	d8e5      	bhi.n	8006ed4 <__multiply+0x10c>
 8006f08:	9a01      	ldr	r2, [sp, #4]
 8006f0a:	50a9      	str	r1, [r5, r2]
 8006f0c:	3504      	adds	r5, #4
 8006f0e:	e799      	b.n	8006e44 <__multiply+0x7c>
 8006f10:	3e01      	subs	r6, #1
 8006f12:	e79b      	b.n	8006e4c <__multiply+0x84>
 8006f14:	08007de7 	.word	0x08007de7
 8006f18:	08007e6f 	.word	0x08007e6f

08006f1c <__pow5mult>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4615      	mov	r5, r2
 8006f22:	f012 0203 	ands.w	r2, r2, #3
 8006f26:	4606      	mov	r6, r0
 8006f28:	460f      	mov	r7, r1
 8006f2a:	d007      	beq.n	8006f3c <__pow5mult+0x20>
 8006f2c:	4c25      	ldr	r4, [pc, #148]	; (8006fc4 <__pow5mult+0xa8>)
 8006f2e:	3a01      	subs	r2, #1
 8006f30:	2300      	movs	r3, #0
 8006f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f36:	f7ff fe53 	bl	8006be0 <__multadd>
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	10ad      	asrs	r5, r5, #2
 8006f3e:	d03d      	beq.n	8006fbc <__pow5mult+0xa0>
 8006f40:	69f4      	ldr	r4, [r6, #28]
 8006f42:	b97c      	cbnz	r4, 8006f64 <__pow5mult+0x48>
 8006f44:	2010      	movs	r0, #16
 8006f46:	f000 fb7b 	bl	8007640 <malloc>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	61f0      	str	r0, [r6, #28]
 8006f4e:	b928      	cbnz	r0, 8006f5c <__pow5mult+0x40>
 8006f50:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <__pow5mult+0xac>)
 8006f52:	481e      	ldr	r0, [pc, #120]	; (8006fcc <__pow5mult+0xb0>)
 8006f54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006f58:	f000 fb3e 	bl	80075d8 <__assert_func>
 8006f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f60:	6004      	str	r4, [r0, #0]
 8006f62:	60c4      	str	r4, [r0, #12]
 8006f64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f6c:	b94c      	cbnz	r4, 8006f82 <__pow5mult+0x66>
 8006f6e:	f240 2171 	movw	r1, #625	; 0x271
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff ff12 	bl	8006d9c <__i2b>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f7e:	4604      	mov	r4, r0
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	07eb      	lsls	r3, r5, #31
 8006f88:	d50a      	bpl.n	8006fa0 <__pow5mult+0x84>
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff1a 	bl	8006dc8 <__multiply>
 8006f94:	4639      	mov	r1, r7
 8006f96:	4680      	mov	r8, r0
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7ff fdff 	bl	8006b9c <_Bfree>
 8006f9e:	4647      	mov	r7, r8
 8006fa0:	106d      	asrs	r5, r5, #1
 8006fa2:	d00b      	beq.n	8006fbc <__pow5mult+0xa0>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	b938      	cbnz	r0, 8006fb8 <__pow5mult+0x9c>
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4621      	mov	r1, r4
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7ff ff0b 	bl	8006dc8 <__multiply>
 8006fb2:	6020      	str	r0, [r4, #0]
 8006fb4:	f8c0 9000 	str.w	r9, [r0]
 8006fb8:	4604      	mov	r4, r0
 8006fba:	e7e4      	b.n	8006f86 <__pow5mult+0x6a>
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc2:	bf00      	nop
 8006fc4:	08007fb8 	.word	0x08007fb8
 8006fc8:	08007e58 	.word	0x08007e58
 8006fcc:	08007e6f 	.word	0x08007e6f

08006fd0 <__lshift>:
 8006fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	6849      	ldr	r1, [r1, #4]
 8006fd8:	6923      	ldr	r3, [r4, #16]
 8006fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fde:	68a3      	ldr	r3, [r4, #8]
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	4691      	mov	r9, r2
 8006fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fe8:	f108 0601 	add.w	r6, r8, #1
 8006fec:	42b3      	cmp	r3, r6
 8006fee:	db0b      	blt.n	8007008 <__lshift+0x38>
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f7ff fd93 	bl	8006b1c <_Balloc>
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	b948      	cbnz	r0, 800700e <__lshift+0x3e>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4b28      	ldr	r3, [pc, #160]	; (80070a0 <__lshift+0xd0>)
 8006ffe:	4829      	ldr	r0, [pc, #164]	; (80070a4 <__lshift+0xd4>)
 8007000:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007004:	f000 fae8 	bl	80075d8 <__assert_func>
 8007008:	3101      	adds	r1, #1
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	e7ee      	b.n	8006fec <__lshift+0x1c>
 800700e:	2300      	movs	r3, #0
 8007010:	f100 0114 	add.w	r1, r0, #20
 8007014:	f100 0210 	add.w	r2, r0, #16
 8007018:	4618      	mov	r0, r3
 800701a:	4553      	cmp	r3, sl
 800701c:	db33      	blt.n	8007086 <__lshift+0xb6>
 800701e:	6920      	ldr	r0, [r4, #16]
 8007020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007024:	f104 0314 	add.w	r3, r4, #20
 8007028:	f019 091f 	ands.w	r9, r9, #31
 800702c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007030:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007034:	d02b      	beq.n	800708e <__lshift+0xbe>
 8007036:	f1c9 0e20 	rsb	lr, r9, #32
 800703a:	468a      	mov	sl, r1
 800703c:	2200      	movs	r2, #0
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	fa00 f009 	lsl.w	r0, r0, r9
 8007044:	4310      	orrs	r0, r2
 8007046:	f84a 0b04 	str.w	r0, [sl], #4
 800704a:	f853 2b04 	ldr.w	r2, [r3], #4
 800704e:	459c      	cmp	ip, r3
 8007050:	fa22 f20e 	lsr.w	r2, r2, lr
 8007054:	d8f3      	bhi.n	800703e <__lshift+0x6e>
 8007056:	ebac 0304 	sub.w	r3, ip, r4
 800705a:	3b15      	subs	r3, #21
 800705c:	f023 0303 	bic.w	r3, r3, #3
 8007060:	3304      	adds	r3, #4
 8007062:	f104 0015 	add.w	r0, r4, #21
 8007066:	4584      	cmp	ip, r0
 8007068:	bf38      	it	cc
 800706a:	2304      	movcc	r3, #4
 800706c:	50ca      	str	r2, [r1, r3]
 800706e:	b10a      	cbz	r2, 8007074 <__lshift+0xa4>
 8007070:	f108 0602 	add.w	r6, r8, #2
 8007074:	3e01      	subs	r6, #1
 8007076:	4638      	mov	r0, r7
 8007078:	612e      	str	r6, [r5, #16]
 800707a:	4621      	mov	r1, r4
 800707c:	f7ff fd8e 	bl	8006b9c <_Bfree>
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007086:	f842 0f04 	str.w	r0, [r2, #4]!
 800708a:	3301      	adds	r3, #1
 800708c:	e7c5      	b.n	800701a <__lshift+0x4a>
 800708e:	3904      	subs	r1, #4
 8007090:	f853 2b04 	ldr.w	r2, [r3], #4
 8007094:	f841 2f04 	str.w	r2, [r1, #4]!
 8007098:	459c      	cmp	ip, r3
 800709a:	d8f9      	bhi.n	8007090 <__lshift+0xc0>
 800709c:	e7ea      	b.n	8007074 <__lshift+0xa4>
 800709e:	bf00      	nop
 80070a0:	08007de7 	.word	0x08007de7
 80070a4:	08007e6f 	.word	0x08007e6f

080070a8 <__mcmp>:
 80070a8:	b530      	push	{r4, r5, lr}
 80070aa:	6902      	ldr	r2, [r0, #16]
 80070ac:	690c      	ldr	r4, [r1, #16]
 80070ae:	1b12      	subs	r2, r2, r4
 80070b0:	d10e      	bne.n	80070d0 <__mcmp+0x28>
 80070b2:	f100 0314 	add.w	r3, r0, #20
 80070b6:	3114      	adds	r1, #20
 80070b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070c8:	42a5      	cmp	r5, r4
 80070ca:	d003      	beq.n	80070d4 <__mcmp+0x2c>
 80070cc:	d305      	bcc.n	80070da <__mcmp+0x32>
 80070ce:	2201      	movs	r2, #1
 80070d0:	4610      	mov	r0, r2
 80070d2:	bd30      	pop	{r4, r5, pc}
 80070d4:	4283      	cmp	r3, r0
 80070d6:	d3f3      	bcc.n	80070c0 <__mcmp+0x18>
 80070d8:	e7fa      	b.n	80070d0 <__mcmp+0x28>
 80070da:	f04f 32ff 	mov.w	r2, #4294967295
 80070de:	e7f7      	b.n	80070d0 <__mcmp+0x28>

080070e0 <__mdiff>:
 80070e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	460c      	mov	r4, r1
 80070e6:	4606      	mov	r6, r0
 80070e8:	4611      	mov	r1, r2
 80070ea:	4620      	mov	r0, r4
 80070ec:	4690      	mov	r8, r2
 80070ee:	f7ff ffdb 	bl	80070a8 <__mcmp>
 80070f2:	1e05      	subs	r5, r0, #0
 80070f4:	d110      	bne.n	8007118 <__mdiff+0x38>
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff fd0f 	bl	8006b1c <_Balloc>
 80070fe:	b930      	cbnz	r0, 800710e <__mdiff+0x2e>
 8007100:	4b3a      	ldr	r3, [pc, #232]	; (80071ec <__mdiff+0x10c>)
 8007102:	4602      	mov	r2, r0
 8007104:	f240 2137 	movw	r1, #567	; 0x237
 8007108:	4839      	ldr	r0, [pc, #228]	; (80071f0 <__mdiff+0x110>)
 800710a:	f000 fa65 	bl	80075d8 <__assert_func>
 800710e:	2301      	movs	r3, #1
 8007110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	bfa4      	itt	ge
 800711a:	4643      	movge	r3, r8
 800711c:	46a0      	movge	r8, r4
 800711e:	4630      	mov	r0, r6
 8007120:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007124:	bfa6      	itte	ge
 8007126:	461c      	movge	r4, r3
 8007128:	2500      	movge	r5, #0
 800712a:	2501      	movlt	r5, #1
 800712c:	f7ff fcf6 	bl	8006b1c <_Balloc>
 8007130:	b920      	cbnz	r0, 800713c <__mdiff+0x5c>
 8007132:	4b2e      	ldr	r3, [pc, #184]	; (80071ec <__mdiff+0x10c>)
 8007134:	4602      	mov	r2, r0
 8007136:	f240 2145 	movw	r1, #581	; 0x245
 800713a:	e7e5      	b.n	8007108 <__mdiff+0x28>
 800713c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007140:	6926      	ldr	r6, [r4, #16]
 8007142:	60c5      	str	r5, [r0, #12]
 8007144:	f104 0914 	add.w	r9, r4, #20
 8007148:	f108 0514 	add.w	r5, r8, #20
 800714c:	f100 0e14 	add.w	lr, r0, #20
 8007150:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007154:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007158:	f108 0210 	add.w	r2, r8, #16
 800715c:	46f2      	mov	sl, lr
 800715e:	2100      	movs	r1, #0
 8007160:	f859 3b04 	ldr.w	r3, [r9], #4
 8007164:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007168:	fa11 f88b 	uxtah	r8, r1, fp
 800716c:	b299      	uxth	r1, r3
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	eba8 0801 	sub.w	r8, r8, r1
 8007174:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007178:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800717c:	fa1f f888 	uxth.w	r8, r8
 8007180:	1419      	asrs	r1, r3, #16
 8007182:	454e      	cmp	r6, r9
 8007184:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007188:	f84a 3b04 	str.w	r3, [sl], #4
 800718c:	d8e8      	bhi.n	8007160 <__mdiff+0x80>
 800718e:	1b33      	subs	r3, r6, r4
 8007190:	3b15      	subs	r3, #21
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	3304      	adds	r3, #4
 8007198:	3415      	adds	r4, #21
 800719a:	42a6      	cmp	r6, r4
 800719c:	bf38      	it	cc
 800719e:	2304      	movcc	r3, #4
 80071a0:	441d      	add	r5, r3
 80071a2:	4473      	add	r3, lr
 80071a4:	469e      	mov	lr, r3
 80071a6:	462e      	mov	r6, r5
 80071a8:	4566      	cmp	r6, ip
 80071aa:	d30e      	bcc.n	80071ca <__mdiff+0xea>
 80071ac:	f10c 0203 	add.w	r2, ip, #3
 80071b0:	1b52      	subs	r2, r2, r5
 80071b2:	f022 0203 	bic.w	r2, r2, #3
 80071b6:	3d03      	subs	r5, #3
 80071b8:	45ac      	cmp	ip, r5
 80071ba:	bf38      	it	cc
 80071bc:	2200      	movcc	r2, #0
 80071be:	4413      	add	r3, r2
 80071c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80071c4:	b17a      	cbz	r2, 80071e6 <__mdiff+0x106>
 80071c6:	6107      	str	r7, [r0, #16]
 80071c8:	e7a4      	b.n	8007114 <__mdiff+0x34>
 80071ca:	f856 8b04 	ldr.w	r8, [r6], #4
 80071ce:	fa11 f288 	uxtah	r2, r1, r8
 80071d2:	1414      	asrs	r4, r2, #16
 80071d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071d8:	b292      	uxth	r2, r2
 80071da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071de:	f84e 2b04 	str.w	r2, [lr], #4
 80071e2:	1421      	asrs	r1, r4, #16
 80071e4:	e7e0      	b.n	80071a8 <__mdiff+0xc8>
 80071e6:	3f01      	subs	r7, #1
 80071e8:	e7ea      	b.n	80071c0 <__mdiff+0xe0>
 80071ea:	bf00      	nop
 80071ec:	08007de7 	.word	0x08007de7
 80071f0:	08007e6f 	.word	0x08007e6f

080071f4 <__ulp>:
 80071f4:	b082      	sub	sp, #8
 80071f6:	ed8d 0b00 	vstr	d0, [sp]
 80071fa:	9a01      	ldr	r2, [sp, #4]
 80071fc:	4b0f      	ldr	r3, [pc, #60]	; (800723c <__ulp+0x48>)
 80071fe:	4013      	ands	r3, r2
 8007200:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007204:	2b00      	cmp	r3, #0
 8007206:	dc08      	bgt.n	800721a <__ulp+0x26>
 8007208:	425b      	negs	r3, r3
 800720a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800720e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007212:	da04      	bge.n	800721e <__ulp+0x2a>
 8007214:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007218:	4113      	asrs	r3, r2
 800721a:	2200      	movs	r2, #0
 800721c:	e008      	b.n	8007230 <__ulp+0x3c>
 800721e:	f1a2 0314 	sub.w	r3, r2, #20
 8007222:	2b1e      	cmp	r3, #30
 8007224:	bfda      	itte	le
 8007226:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800722a:	40da      	lsrle	r2, r3
 800722c:	2201      	movgt	r2, #1
 800722e:	2300      	movs	r3, #0
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	ec41 0b10 	vmov	d0, r0, r1
 8007238:	b002      	add	sp, #8
 800723a:	4770      	bx	lr
 800723c:	7ff00000 	.word	0x7ff00000

08007240 <__b2d>:
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	6906      	ldr	r6, [r0, #16]
 8007246:	f100 0814 	add.w	r8, r0, #20
 800724a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800724e:	1f37      	subs	r7, r6, #4
 8007250:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007254:	4610      	mov	r0, r2
 8007256:	f7ff fd53 	bl	8006d00 <__hi0bits>
 800725a:	f1c0 0320 	rsb	r3, r0, #32
 800725e:	280a      	cmp	r0, #10
 8007260:	600b      	str	r3, [r1, #0]
 8007262:	491b      	ldr	r1, [pc, #108]	; (80072d0 <__b2d+0x90>)
 8007264:	dc15      	bgt.n	8007292 <__b2d+0x52>
 8007266:	f1c0 0c0b 	rsb	ip, r0, #11
 800726a:	fa22 f30c 	lsr.w	r3, r2, ip
 800726e:	45b8      	cmp	r8, r7
 8007270:	ea43 0501 	orr.w	r5, r3, r1
 8007274:	bf34      	ite	cc
 8007276:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800727a:	2300      	movcs	r3, #0
 800727c:	3015      	adds	r0, #21
 800727e:	fa02 f000 	lsl.w	r0, r2, r0
 8007282:	fa23 f30c 	lsr.w	r3, r3, ip
 8007286:	4303      	orrs	r3, r0
 8007288:	461c      	mov	r4, r3
 800728a:	ec45 4b10 	vmov	d0, r4, r5
 800728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007292:	45b8      	cmp	r8, r7
 8007294:	bf3a      	itte	cc
 8007296:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800729a:	f1a6 0708 	subcc.w	r7, r6, #8
 800729e:	2300      	movcs	r3, #0
 80072a0:	380b      	subs	r0, #11
 80072a2:	d012      	beq.n	80072ca <__b2d+0x8a>
 80072a4:	f1c0 0120 	rsb	r1, r0, #32
 80072a8:	fa23 f401 	lsr.w	r4, r3, r1
 80072ac:	4082      	lsls	r2, r0
 80072ae:	4322      	orrs	r2, r4
 80072b0:	4547      	cmp	r7, r8
 80072b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80072b6:	bf8c      	ite	hi
 80072b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80072bc:	2200      	movls	r2, #0
 80072be:	4083      	lsls	r3, r0
 80072c0:	40ca      	lsrs	r2, r1
 80072c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80072c6:	4313      	orrs	r3, r2
 80072c8:	e7de      	b.n	8007288 <__b2d+0x48>
 80072ca:	ea42 0501 	orr.w	r5, r2, r1
 80072ce:	e7db      	b.n	8007288 <__b2d+0x48>
 80072d0:	3ff00000 	.word	0x3ff00000

080072d4 <__d2b>:
 80072d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	460f      	mov	r7, r1
 80072da:	2101      	movs	r1, #1
 80072dc:	ec59 8b10 	vmov	r8, r9, d0
 80072e0:	4616      	mov	r6, r2
 80072e2:	f7ff fc1b 	bl	8006b1c <_Balloc>
 80072e6:	4604      	mov	r4, r0
 80072e8:	b930      	cbnz	r0, 80072f8 <__d2b+0x24>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4b24      	ldr	r3, [pc, #144]	; (8007380 <__d2b+0xac>)
 80072ee:	4825      	ldr	r0, [pc, #148]	; (8007384 <__d2b+0xb0>)
 80072f0:	f240 310f 	movw	r1, #783	; 0x30f
 80072f4:	f000 f970 	bl	80075d8 <__assert_func>
 80072f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007300:	bb2d      	cbnz	r5, 800734e <__d2b+0x7a>
 8007302:	9301      	str	r3, [sp, #4]
 8007304:	f1b8 0300 	subs.w	r3, r8, #0
 8007308:	d026      	beq.n	8007358 <__d2b+0x84>
 800730a:	4668      	mov	r0, sp
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	f7ff fd17 	bl	8006d40 <__lo0bits>
 8007312:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007316:	b1e8      	cbz	r0, 8007354 <__d2b+0x80>
 8007318:	f1c0 0320 	rsb	r3, r0, #32
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	430b      	orrs	r3, r1
 8007322:	40c2      	lsrs	r2, r0
 8007324:	6163      	str	r3, [r4, #20]
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	9b01      	ldr	r3, [sp, #4]
 800732a:	61a3      	str	r3, [r4, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf14      	ite	ne
 8007330:	2202      	movne	r2, #2
 8007332:	2201      	moveq	r2, #1
 8007334:	6122      	str	r2, [r4, #16]
 8007336:	b1bd      	cbz	r5, 8007368 <__d2b+0x94>
 8007338:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800733c:	4405      	add	r5, r0
 800733e:	603d      	str	r5, [r7, #0]
 8007340:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007344:	6030      	str	r0, [r6, #0]
 8007346:	4620      	mov	r0, r4
 8007348:	b003      	add	sp, #12
 800734a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800734e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007352:	e7d6      	b.n	8007302 <__d2b+0x2e>
 8007354:	6161      	str	r1, [r4, #20]
 8007356:	e7e7      	b.n	8007328 <__d2b+0x54>
 8007358:	a801      	add	r0, sp, #4
 800735a:	f7ff fcf1 	bl	8006d40 <__lo0bits>
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	6163      	str	r3, [r4, #20]
 8007362:	3020      	adds	r0, #32
 8007364:	2201      	movs	r2, #1
 8007366:	e7e5      	b.n	8007334 <__d2b+0x60>
 8007368:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800736c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007370:	6038      	str	r0, [r7, #0]
 8007372:	6918      	ldr	r0, [r3, #16]
 8007374:	f7ff fcc4 	bl	8006d00 <__hi0bits>
 8007378:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800737c:	e7e2      	b.n	8007344 <__d2b+0x70>
 800737e:	bf00      	nop
 8007380:	08007de7 	.word	0x08007de7
 8007384:	08007e6f 	.word	0x08007e6f

08007388 <__ratio>:
 8007388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	4688      	mov	r8, r1
 800738e:	4669      	mov	r1, sp
 8007390:	4681      	mov	r9, r0
 8007392:	f7ff ff55 	bl	8007240 <__b2d>
 8007396:	a901      	add	r1, sp, #4
 8007398:	4640      	mov	r0, r8
 800739a:	ec55 4b10 	vmov	r4, r5, d0
 800739e:	f7ff ff4f 	bl	8007240 <__b2d>
 80073a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073aa:	eba3 0c02 	sub.w	ip, r3, r2
 80073ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80073b8:	ec51 0b10 	vmov	r0, r1, d0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bfd6      	itet	le
 80073c0:	460a      	movle	r2, r1
 80073c2:	462a      	movgt	r2, r5
 80073c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073c8:	468b      	mov	fp, r1
 80073ca:	462f      	mov	r7, r5
 80073cc:	bfd4      	ite	le
 80073ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80073d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80073d6:	4620      	mov	r0, r4
 80073d8:	ee10 2a10 	vmov	r2, s0
 80073dc:	465b      	mov	r3, fp
 80073de:	4639      	mov	r1, r7
 80073e0:	f7f9 fa3c 	bl	800085c <__aeabi_ddiv>
 80073e4:	ec41 0b10 	vmov	d0, r0, r1
 80073e8:	b003      	add	sp, #12
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073ee <__copybits>:
 80073ee:	3901      	subs	r1, #1
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	1149      	asrs	r1, r1, #5
 80073f4:	6914      	ldr	r4, [r2, #16]
 80073f6:	3101      	adds	r1, #1
 80073f8:	f102 0314 	add.w	r3, r2, #20
 80073fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007400:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007404:	1f05      	subs	r5, r0, #4
 8007406:	42a3      	cmp	r3, r4
 8007408:	d30c      	bcc.n	8007424 <__copybits+0x36>
 800740a:	1aa3      	subs	r3, r4, r2
 800740c:	3b11      	subs	r3, #17
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	3211      	adds	r2, #17
 8007414:	42a2      	cmp	r2, r4
 8007416:	bf88      	it	hi
 8007418:	2300      	movhi	r3, #0
 800741a:	4418      	add	r0, r3
 800741c:	2300      	movs	r3, #0
 800741e:	4288      	cmp	r0, r1
 8007420:	d305      	bcc.n	800742e <__copybits+0x40>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	f853 6b04 	ldr.w	r6, [r3], #4
 8007428:	f845 6f04 	str.w	r6, [r5, #4]!
 800742c:	e7eb      	b.n	8007406 <__copybits+0x18>
 800742e:	f840 3b04 	str.w	r3, [r0], #4
 8007432:	e7f4      	b.n	800741e <__copybits+0x30>

08007434 <__any_on>:
 8007434:	f100 0214 	add.w	r2, r0, #20
 8007438:	6900      	ldr	r0, [r0, #16]
 800743a:	114b      	asrs	r3, r1, #5
 800743c:	4298      	cmp	r0, r3
 800743e:	b510      	push	{r4, lr}
 8007440:	db11      	blt.n	8007466 <__any_on+0x32>
 8007442:	dd0a      	ble.n	800745a <__any_on+0x26>
 8007444:	f011 011f 	ands.w	r1, r1, #31
 8007448:	d007      	beq.n	800745a <__any_on+0x26>
 800744a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800744e:	fa24 f001 	lsr.w	r0, r4, r1
 8007452:	fa00 f101 	lsl.w	r1, r0, r1
 8007456:	428c      	cmp	r4, r1
 8007458:	d10b      	bne.n	8007472 <__any_on+0x3e>
 800745a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800745e:	4293      	cmp	r3, r2
 8007460:	d803      	bhi.n	800746a <__any_on+0x36>
 8007462:	2000      	movs	r0, #0
 8007464:	bd10      	pop	{r4, pc}
 8007466:	4603      	mov	r3, r0
 8007468:	e7f7      	b.n	800745a <__any_on+0x26>
 800746a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800746e:	2900      	cmp	r1, #0
 8007470:	d0f5      	beq.n	800745e <__any_on+0x2a>
 8007472:	2001      	movs	r0, #1
 8007474:	e7f6      	b.n	8007464 <__any_on+0x30>

08007476 <_realloc_r>:
 8007476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	4680      	mov	r8, r0
 800747c:	4614      	mov	r4, r2
 800747e:	460e      	mov	r6, r1
 8007480:	b921      	cbnz	r1, 800748c <_realloc_r+0x16>
 8007482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007486:	4611      	mov	r1, r2
 8007488:	f7fd b93c 	b.w	8004704 <_malloc_r>
 800748c:	b92a      	cbnz	r2, 800749a <_realloc_r+0x24>
 800748e:	f7fd f8cd 	bl	800462c <_free_r>
 8007492:	4625      	mov	r5, r4
 8007494:	4628      	mov	r0, r5
 8007496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800749a:	f000 f8d9 	bl	8007650 <_malloc_usable_size_r>
 800749e:	4284      	cmp	r4, r0
 80074a0:	4607      	mov	r7, r0
 80074a2:	d802      	bhi.n	80074aa <_realloc_r+0x34>
 80074a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074a8:	d812      	bhi.n	80074d0 <_realloc_r+0x5a>
 80074aa:	4621      	mov	r1, r4
 80074ac:	4640      	mov	r0, r8
 80074ae:	f7fd f929 	bl	8004704 <_malloc_r>
 80074b2:	4605      	mov	r5, r0
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d0ed      	beq.n	8007494 <_realloc_r+0x1e>
 80074b8:	42bc      	cmp	r4, r7
 80074ba:	4622      	mov	r2, r4
 80074bc:	4631      	mov	r1, r6
 80074be:	bf28      	it	cs
 80074c0:	463a      	movcs	r2, r7
 80074c2:	f7fe ffa9 	bl	8006418 <memcpy>
 80074c6:	4631      	mov	r1, r6
 80074c8:	4640      	mov	r0, r8
 80074ca:	f7fd f8af 	bl	800462c <_free_r>
 80074ce:	e7e1      	b.n	8007494 <_realloc_r+0x1e>
 80074d0:	4635      	mov	r5, r6
 80074d2:	e7df      	b.n	8007494 <_realloc_r+0x1e>

080074d4 <_strtoul_l.constprop.0>:
 80074d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074d8:	4f36      	ldr	r7, [pc, #216]	; (80075b4 <_strtoul_l.constprop.0+0xe0>)
 80074da:	4686      	mov	lr, r0
 80074dc:	460d      	mov	r5, r1
 80074de:	4628      	mov	r0, r5
 80074e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074e4:	5d3e      	ldrb	r6, [r7, r4]
 80074e6:	f016 0608 	ands.w	r6, r6, #8
 80074ea:	d1f8      	bne.n	80074de <_strtoul_l.constprop.0+0xa>
 80074ec:	2c2d      	cmp	r4, #45	; 0x2d
 80074ee:	d130      	bne.n	8007552 <_strtoul_l.constprop.0+0x7e>
 80074f0:	782c      	ldrb	r4, [r5, #0]
 80074f2:	2601      	movs	r6, #1
 80074f4:	1c85      	adds	r5, r0, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d057      	beq.n	80075aa <_strtoul_l.constprop.0+0xd6>
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d109      	bne.n	8007512 <_strtoul_l.constprop.0+0x3e>
 80074fe:	2c30      	cmp	r4, #48	; 0x30
 8007500:	d107      	bne.n	8007512 <_strtoul_l.constprop.0+0x3e>
 8007502:	7828      	ldrb	r0, [r5, #0]
 8007504:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007508:	2858      	cmp	r0, #88	; 0x58
 800750a:	d149      	bne.n	80075a0 <_strtoul_l.constprop.0+0xcc>
 800750c:	786c      	ldrb	r4, [r5, #1]
 800750e:	2310      	movs	r3, #16
 8007510:	3502      	adds	r5, #2
 8007512:	f04f 38ff 	mov.w	r8, #4294967295
 8007516:	2700      	movs	r7, #0
 8007518:	fbb8 f8f3 	udiv	r8, r8, r3
 800751c:	fb03 f908 	mul.w	r9, r3, r8
 8007520:	ea6f 0909 	mvn.w	r9, r9
 8007524:	4638      	mov	r0, r7
 8007526:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800752a:	f1bc 0f09 	cmp.w	ip, #9
 800752e:	d815      	bhi.n	800755c <_strtoul_l.constprop.0+0x88>
 8007530:	4664      	mov	r4, ip
 8007532:	42a3      	cmp	r3, r4
 8007534:	dd23      	ble.n	800757e <_strtoul_l.constprop.0+0xaa>
 8007536:	f1b7 3fff 	cmp.w	r7, #4294967295
 800753a:	d007      	beq.n	800754c <_strtoul_l.constprop.0+0x78>
 800753c:	4580      	cmp	r8, r0
 800753e:	d31b      	bcc.n	8007578 <_strtoul_l.constprop.0+0xa4>
 8007540:	d101      	bne.n	8007546 <_strtoul_l.constprop.0+0x72>
 8007542:	45a1      	cmp	r9, r4
 8007544:	db18      	blt.n	8007578 <_strtoul_l.constprop.0+0xa4>
 8007546:	fb00 4003 	mla	r0, r0, r3, r4
 800754a:	2701      	movs	r7, #1
 800754c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007550:	e7e9      	b.n	8007526 <_strtoul_l.constprop.0+0x52>
 8007552:	2c2b      	cmp	r4, #43	; 0x2b
 8007554:	bf04      	itt	eq
 8007556:	782c      	ldrbeq	r4, [r5, #0]
 8007558:	1c85      	addeq	r5, r0, #2
 800755a:	e7cc      	b.n	80074f6 <_strtoul_l.constprop.0+0x22>
 800755c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007560:	f1bc 0f19 	cmp.w	ip, #25
 8007564:	d801      	bhi.n	800756a <_strtoul_l.constprop.0+0x96>
 8007566:	3c37      	subs	r4, #55	; 0x37
 8007568:	e7e3      	b.n	8007532 <_strtoul_l.constprop.0+0x5e>
 800756a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800756e:	f1bc 0f19 	cmp.w	ip, #25
 8007572:	d804      	bhi.n	800757e <_strtoul_l.constprop.0+0xaa>
 8007574:	3c57      	subs	r4, #87	; 0x57
 8007576:	e7dc      	b.n	8007532 <_strtoul_l.constprop.0+0x5e>
 8007578:	f04f 37ff 	mov.w	r7, #4294967295
 800757c:	e7e6      	b.n	800754c <_strtoul_l.constprop.0+0x78>
 800757e:	1c7b      	adds	r3, r7, #1
 8007580:	d106      	bne.n	8007590 <_strtoul_l.constprop.0+0xbc>
 8007582:	2322      	movs	r3, #34	; 0x22
 8007584:	f8ce 3000 	str.w	r3, [lr]
 8007588:	4638      	mov	r0, r7
 800758a:	b932      	cbnz	r2, 800759a <_strtoul_l.constprop.0+0xc6>
 800758c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007590:	b106      	cbz	r6, 8007594 <_strtoul_l.constprop.0+0xc0>
 8007592:	4240      	negs	r0, r0
 8007594:	2a00      	cmp	r2, #0
 8007596:	d0f9      	beq.n	800758c <_strtoul_l.constprop.0+0xb8>
 8007598:	b107      	cbz	r7, 800759c <_strtoul_l.constprop.0+0xc8>
 800759a:	1e69      	subs	r1, r5, #1
 800759c:	6011      	str	r1, [r2, #0]
 800759e:	e7f5      	b.n	800758c <_strtoul_l.constprop.0+0xb8>
 80075a0:	2430      	movs	r4, #48	; 0x30
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1b5      	bne.n	8007512 <_strtoul_l.constprop.0+0x3e>
 80075a6:	2308      	movs	r3, #8
 80075a8:	e7b3      	b.n	8007512 <_strtoul_l.constprop.0+0x3e>
 80075aa:	2c30      	cmp	r4, #48	; 0x30
 80075ac:	d0a9      	beq.n	8007502 <_strtoul_l.constprop.0+0x2e>
 80075ae:	230a      	movs	r3, #10
 80075b0:	e7af      	b.n	8007512 <_strtoul_l.constprop.0+0x3e>
 80075b2:	bf00      	nop
 80075b4:	08007c91 	.word	0x08007c91

080075b8 <_strtoul_r>:
 80075b8:	f7ff bf8c 	b.w	80074d4 <_strtoul_l.constprop.0>

080075bc <__ascii_wctomb>:
 80075bc:	b149      	cbz	r1, 80075d2 <__ascii_wctomb+0x16>
 80075be:	2aff      	cmp	r2, #255	; 0xff
 80075c0:	bf85      	ittet	hi
 80075c2:	238a      	movhi	r3, #138	; 0x8a
 80075c4:	6003      	strhi	r3, [r0, #0]
 80075c6:	700a      	strbls	r2, [r1, #0]
 80075c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80075cc:	bf98      	it	ls
 80075ce:	2001      	movls	r0, #1
 80075d0:	4770      	bx	lr
 80075d2:	4608      	mov	r0, r1
 80075d4:	4770      	bx	lr
	...

080075d8 <__assert_func>:
 80075d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075da:	4614      	mov	r4, r2
 80075dc:	461a      	mov	r2, r3
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <__assert_func+0x2c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4605      	mov	r5, r0
 80075e4:	68d8      	ldr	r0, [r3, #12]
 80075e6:	b14c      	cbz	r4, 80075fc <__assert_func+0x24>
 80075e8:	4b07      	ldr	r3, [pc, #28]	; (8007608 <__assert_func+0x30>)
 80075ea:	9100      	str	r1, [sp, #0]
 80075ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075f0:	4906      	ldr	r1, [pc, #24]	; (800760c <__assert_func+0x34>)
 80075f2:	462b      	mov	r3, r5
 80075f4:	f000 f834 	bl	8007660 <fiprintf>
 80075f8:	f000 f844 	bl	8007684 <abort>
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <__assert_func+0x38>)
 80075fe:	461c      	mov	r4, r3
 8007600:	e7f3      	b.n	80075ea <__assert_func+0x12>
 8007602:	bf00      	nop
 8007604:	20000064 	.word	0x20000064
 8007608:	08007fc4 	.word	0x08007fc4
 800760c:	08007fd1 	.word	0x08007fd1
 8007610:	08007fff 	.word	0x08007fff

08007614 <_calloc_r>:
 8007614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007616:	fba1 2402 	umull	r2, r4, r1, r2
 800761a:	b94c      	cbnz	r4, 8007630 <_calloc_r+0x1c>
 800761c:	4611      	mov	r1, r2
 800761e:	9201      	str	r2, [sp, #4]
 8007620:	f7fd f870 	bl	8004704 <_malloc_r>
 8007624:	9a01      	ldr	r2, [sp, #4]
 8007626:	4605      	mov	r5, r0
 8007628:	b930      	cbnz	r0, 8007638 <_calloc_r+0x24>
 800762a:	4628      	mov	r0, r5
 800762c:	b003      	add	sp, #12
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	220c      	movs	r2, #12
 8007632:	6002      	str	r2, [r0, #0]
 8007634:	2500      	movs	r5, #0
 8007636:	e7f8      	b.n	800762a <_calloc_r+0x16>
 8007638:	4621      	mov	r1, r4
 800763a:	f7fc ff76 	bl	800452a <memset>
 800763e:	e7f4      	b.n	800762a <_calloc_r+0x16>

08007640 <malloc>:
 8007640:	4b02      	ldr	r3, [pc, #8]	; (800764c <malloc+0xc>)
 8007642:	4601      	mov	r1, r0
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	f7fd b85d 	b.w	8004704 <_malloc_r>
 800764a:	bf00      	nop
 800764c:	20000064 	.word	0x20000064

08007650 <_malloc_usable_size_r>:
 8007650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007654:	1f18      	subs	r0, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfbc      	itt	lt
 800765a:	580b      	ldrlt	r3, [r1, r0]
 800765c:	18c0      	addlt	r0, r0, r3
 800765e:	4770      	bx	lr

08007660 <fiprintf>:
 8007660:	b40e      	push	{r1, r2, r3}
 8007662:	b503      	push	{r0, r1, lr}
 8007664:	4601      	mov	r1, r0
 8007666:	ab03      	add	r3, sp, #12
 8007668:	4805      	ldr	r0, [pc, #20]	; (8007680 <fiprintf+0x20>)
 800766a:	f853 2b04 	ldr.w	r2, [r3], #4
 800766e:	6800      	ldr	r0, [r0, #0]
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	f000 f837 	bl	80076e4 <_vfiprintf_r>
 8007676:	b002      	add	sp, #8
 8007678:	f85d eb04 	ldr.w	lr, [sp], #4
 800767c:	b003      	add	sp, #12
 800767e:	4770      	bx	lr
 8007680:	20000064 	.word	0x20000064

08007684 <abort>:
 8007684:	b508      	push	{r3, lr}
 8007686:	2006      	movs	r0, #6
 8007688:	f000 fa04 	bl	8007a94 <raise>
 800768c:	2001      	movs	r0, #1
 800768e:	f7f9 fead 	bl	80013ec <_exit>

08007692 <__sfputc_r>:
 8007692:	6893      	ldr	r3, [r2, #8]
 8007694:	3b01      	subs	r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	b410      	push	{r4}
 800769a:	6093      	str	r3, [r2, #8]
 800769c:	da08      	bge.n	80076b0 <__sfputc_r+0x1e>
 800769e:	6994      	ldr	r4, [r2, #24]
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	db01      	blt.n	80076a8 <__sfputc_r+0x16>
 80076a4:	290a      	cmp	r1, #10
 80076a6:	d103      	bne.n	80076b0 <__sfputc_r+0x1e>
 80076a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ac:	f000 b934 	b.w	8007918 <__swbuf_r>
 80076b0:	6813      	ldr	r3, [r2, #0]
 80076b2:	1c58      	adds	r0, r3, #1
 80076b4:	6010      	str	r0, [r2, #0]
 80076b6:	7019      	strb	r1, [r3, #0]
 80076b8:	4608      	mov	r0, r1
 80076ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <__sfputs_r>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	4606      	mov	r6, r0
 80076c4:	460f      	mov	r7, r1
 80076c6:	4614      	mov	r4, r2
 80076c8:	18d5      	adds	r5, r2, r3
 80076ca:	42ac      	cmp	r4, r5
 80076cc:	d101      	bne.n	80076d2 <__sfputs_r+0x12>
 80076ce:	2000      	movs	r0, #0
 80076d0:	e007      	b.n	80076e2 <__sfputs_r+0x22>
 80076d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d6:	463a      	mov	r2, r7
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff ffda 	bl	8007692 <__sfputc_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d1f3      	bne.n	80076ca <__sfputs_r+0xa>
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076e4 <_vfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	460d      	mov	r5, r1
 80076ea:	b09d      	sub	sp, #116	; 0x74
 80076ec:	4614      	mov	r4, r2
 80076ee:	4698      	mov	r8, r3
 80076f0:	4606      	mov	r6, r0
 80076f2:	b118      	cbz	r0, 80076fc <_vfiprintf_r+0x18>
 80076f4:	6a03      	ldr	r3, [r0, #32]
 80076f6:	b90b      	cbnz	r3, 80076fc <_vfiprintf_r+0x18>
 80076f8:	f7fc fe50 	bl	800439c <__sinit>
 80076fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076fe:	07d9      	lsls	r1, r3, #31
 8007700:	d405      	bmi.n	800770e <_vfiprintf_r+0x2a>
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	059a      	lsls	r2, r3, #22
 8007706:	d402      	bmi.n	800770e <_vfiprintf_r+0x2a>
 8007708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800770a:	f7fc ff87 	bl	800461c <__retarget_lock_acquire_recursive>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	071b      	lsls	r3, r3, #28
 8007712:	d501      	bpl.n	8007718 <_vfiprintf_r+0x34>
 8007714:	692b      	ldr	r3, [r5, #16]
 8007716:	b99b      	cbnz	r3, 8007740 <_vfiprintf_r+0x5c>
 8007718:	4629      	mov	r1, r5
 800771a:	4630      	mov	r0, r6
 800771c:	f000 f93a 	bl	8007994 <__swsetup_r>
 8007720:	b170      	cbz	r0, 8007740 <_vfiprintf_r+0x5c>
 8007722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007724:	07dc      	lsls	r4, r3, #31
 8007726:	d504      	bpl.n	8007732 <_vfiprintf_r+0x4e>
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	b01d      	add	sp, #116	; 0x74
 800772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007732:	89ab      	ldrh	r3, [r5, #12]
 8007734:	0598      	lsls	r0, r3, #22
 8007736:	d4f7      	bmi.n	8007728 <_vfiprintf_r+0x44>
 8007738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773a:	f7fc ff70 	bl	800461e <__retarget_lock_release_recursive>
 800773e:	e7f3      	b.n	8007728 <_vfiprintf_r+0x44>
 8007740:	2300      	movs	r3, #0
 8007742:	9309      	str	r3, [sp, #36]	; 0x24
 8007744:	2320      	movs	r3, #32
 8007746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800774a:	f8cd 800c 	str.w	r8, [sp, #12]
 800774e:	2330      	movs	r3, #48	; 0x30
 8007750:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007904 <_vfiprintf_r+0x220>
 8007754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007758:	f04f 0901 	mov.w	r9, #1
 800775c:	4623      	mov	r3, r4
 800775e:	469a      	mov	sl, r3
 8007760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007764:	b10a      	cbz	r2, 800776a <_vfiprintf_r+0x86>
 8007766:	2a25      	cmp	r2, #37	; 0x25
 8007768:	d1f9      	bne.n	800775e <_vfiprintf_r+0x7a>
 800776a:	ebba 0b04 	subs.w	fp, sl, r4
 800776e:	d00b      	beq.n	8007788 <_vfiprintf_r+0xa4>
 8007770:	465b      	mov	r3, fp
 8007772:	4622      	mov	r2, r4
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ffa2 	bl	80076c0 <__sfputs_r>
 800777c:	3001      	adds	r0, #1
 800777e:	f000 80a9 	beq.w	80078d4 <_vfiprintf_r+0x1f0>
 8007782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007784:	445a      	add	r2, fp
 8007786:	9209      	str	r2, [sp, #36]	; 0x24
 8007788:	f89a 3000 	ldrb.w	r3, [sl]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80a1 	beq.w	80078d4 <_vfiprintf_r+0x1f0>
 8007792:	2300      	movs	r3, #0
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800779c:	f10a 0a01 	add.w	sl, sl, #1
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077a8:	931a      	str	r3, [sp, #104]	; 0x68
 80077aa:	4654      	mov	r4, sl
 80077ac:	2205      	movs	r2, #5
 80077ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b2:	4854      	ldr	r0, [pc, #336]	; (8007904 <_vfiprintf_r+0x220>)
 80077b4:	f7f8 fd1c 	bl	80001f0 <memchr>
 80077b8:	9a04      	ldr	r2, [sp, #16]
 80077ba:	b9d8      	cbnz	r0, 80077f4 <_vfiprintf_r+0x110>
 80077bc:	06d1      	lsls	r1, r2, #27
 80077be:	bf44      	itt	mi
 80077c0:	2320      	movmi	r3, #32
 80077c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c6:	0713      	lsls	r3, r2, #28
 80077c8:	bf44      	itt	mi
 80077ca:	232b      	movmi	r3, #43	; 0x2b
 80077cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d0:	f89a 3000 	ldrb.w	r3, [sl]
 80077d4:	2b2a      	cmp	r3, #42	; 0x2a
 80077d6:	d015      	beq.n	8007804 <_vfiprintf_r+0x120>
 80077d8:	9a07      	ldr	r2, [sp, #28]
 80077da:	4654      	mov	r4, sl
 80077dc:	2000      	movs	r0, #0
 80077de:	f04f 0c0a 	mov.w	ip, #10
 80077e2:	4621      	mov	r1, r4
 80077e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077e8:	3b30      	subs	r3, #48	; 0x30
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	d94d      	bls.n	800788a <_vfiprintf_r+0x1a6>
 80077ee:	b1b0      	cbz	r0, 800781e <_vfiprintf_r+0x13a>
 80077f0:	9207      	str	r2, [sp, #28]
 80077f2:	e014      	b.n	800781e <_vfiprintf_r+0x13a>
 80077f4:	eba0 0308 	sub.w	r3, r0, r8
 80077f8:	fa09 f303 	lsl.w	r3, r9, r3
 80077fc:	4313      	orrs	r3, r2
 80077fe:	9304      	str	r3, [sp, #16]
 8007800:	46a2      	mov	sl, r4
 8007802:	e7d2      	b.n	80077aa <_vfiprintf_r+0xc6>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1d19      	adds	r1, r3, #4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	9103      	str	r1, [sp, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	bfbb      	ittet	lt
 8007810:	425b      	neglt	r3, r3
 8007812:	f042 0202 	orrlt.w	r2, r2, #2
 8007816:	9307      	strge	r3, [sp, #28]
 8007818:	9307      	strlt	r3, [sp, #28]
 800781a:	bfb8      	it	lt
 800781c:	9204      	strlt	r2, [sp, #16]
 800781e:	7823      	ldrb	r3, [r4, #0]
 8007820:	2b2e      	cmp	r3, #46	; 0x2e
 8007822:	d10c      	bne.n	800783e <_vfiprintf_r+0x15a>
 8007824:	7863      	ldrb	r3, [r4, #1]
 8007826:	2b2a      	cmp	r3, #42	; 0x2a
 8007828:	d134      	bne.n	8007894 <_vfiprintf_r+0x1b0>
 800782a:	9b03      	ldr	r3, [sp, #12]
 800782c:	1d1a      	adds	r2, r3, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	9203      	str	r2, [sp, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfb8      	it	lt
 8007836:	f04f 33ff 	movlt.w	r3, #4294967295
 800783a:	3402      	adds	r4, #2
 800783c:	9305      	str	r3, [sp, #20]
 800783e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007914 <_vfiprintf_r+0x230>
 8007842:	7821      	ldrb	r1, [r4, #0]
 8007844:	2203      	movs	r2, #3
 8007846:	4650      	mov	r0, sl
 8007848:	f7f8 fcd2 	bl	80001f0 <memchr>
 800784c:	b138      	cbz	r0, 800785e <_vfiprintf_r+0x17a>
 800784e:	9b04      	ldr	r3, [sp, #16]
 8007850:	eba0 000a 	sub.w	r0, r0, sl
 8007854:	2240      	movs	r2, #64	; 0x40
 8007856:	4082      	lsls	r2, r0
 8007858:	4313      	orrs	r3, r2
 800785a:	3401      	adds	r4, #1
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007862:	4829      	ldr	r0, [pc, #164]	; (8007908 <_vfiprintf_r+0x224>)
 8007864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007868:	2206      	movs	r2, #6
 800786a:	f7f8 fcc1 	bl	80001f0 <memchr>
 800786e:	2800      	cmp	r0, #0
 8007870:	d03f      	beq.n	80078f2 <_vfiprintf_r+0x20e>
 8007872:	4b26      	ldr	r3, [pc, #152]	; (800790c <_vfiprintf_r+0x228>)
 8007874:	bb1b      	cbnz	r3, 80078be <_vfiprintf_r+0x1da>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	3307      	adds	r3, #7
 800787a:	f023 0307 	bic.w	r3, r3, #7
 800787e:	3308      	adds	r3, #8
 8007880:	9303      	str	r3, [sp, #12]
 8007882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007884:	443b      	add	r3, r7
 8007886:	9309      	str	r3, [sp, #36]	; 0x24
 8007888:	e768      	b.n	800775c <_vfiprintf_r+0x78>
 800788a:	fb0c 3202 	mla	r2, ip, r2, r3
 800788e:	460c      	mov	r4, r1
 8007890:	2001      	movs	r0, #1
 8007892:	e7a6      	b.n	80077e2 <_vfiprintf_r+0xfe>
 8007894:	2300      	movs	r3, #0
 8007896:	3401      	adds	r4, #1
 8007898:	9305      	str	r3, [sp, #20]
 800789a:	4619      	mov	r1, r3
 800789c:	f04f 0c0a 	mov.w	ip, #10
 80078a0:	4620      	mov	r0, r4
 80078a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a6:	3a30      	subs	r2, #48	; 0x30
 80078a8:	2a09      	cmp	r2, #9
 80078aa:	d903      	bls.n	80078b4 <_vfiprintf_r+0x1d0>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0c6      	beq.n	800783e <_vfiprintf_r+0x15a>
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	e7c4      	b.n	800783e <_vfiprintf_r+0x15a>
 80078b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80078b8:	4604      	mov	r4, r0
 80078ba:	2301      	movs	r3, #1
 80078bc:	e7f0      	b.n	80078a0 <_vfiprintf_r+0x1bc>
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <_vfiprintf_r+0x22c>)
 80078c6:	a904      	add	r1, sp, #16
 80078c8:	4630      	mov	r0, r6
 80078ca:	f3af 8000 	nop.w
 80078ce:	4607      	mov	r7, r0
 80078d0:	1c78      	adds	r0, r7, #1
 80078d2:	d1d6      	bne.n	8007882 <_vfiprintf_r+0x19e>
 80078d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d6:	07d9      	lsls	r1, r3, #31
 80078d8:	d405      	bmi.n	80078e6 <_vfiprintf_r+0x202>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	059a      	lsls	r2, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_vfiprintf_r+0x202>
 80078e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e2:	f7fc fe9c 	bl	800461e <__retarget_lock_release_recursive>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	065b      	lsls	r3, r3, #25
 80078ea:	f53f af1d 	bmi.w	8007728 <_vfiprintf_r+0x44>
 80078ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078f0:	e71c      	b.n	800772c <_vfiprintf_r+0x48>
 80078f2:	ab03      	add	r3, sp, #12
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	462a      	mov	r2, r5
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <_vfiprintf_r+0x22c>)
 80078fa:	a904      	add	r1, sp, #16
 80078fc:	4630      	mov	r0, r6
 80078fe:	f7fe f9bd 	bl	8005c7c <_printf_i>
 8007902:	e7e4      	b.n	80078ce <_vfiprintf_r+0x1ea>
 8007904:	08007d91 	.word	0x08007d91
 8007908:	08007d9b 	.word	0x08007d9b
 800790c:	00000000 	.word	0x00000000
 8007910:	080076c1 	.word	0x080076c1
 8007914:	08007d97 	.word	0x08007d97

08007918 <__swbuf_r>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	460e      	mov	r6, r1
 800791c:	4614      	mov	r4, r2
 800791e:	4605      	mov	r5, r0
 8007920:	b118      	cbz	r0, 800792a <__swbuf_r+0x12>
 8007922:	6a03      	ldr	r3, [r0, #32]
 8007924:	b90b      	cbnz	r3, 800792a <__swbuf_r+0x12>
 8007926:	f7fc fd39 	bl	800439c <__sinit>
 800792a:	69a3      	ldr	r3, [r4, #24]
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	071a      	lsls	r2, r3, #28
 8007932:	d525      	bpl.n	8007980 <__swbuf_r+0x68>
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	b31b      	cbz	r3, 8007980 <__swbuf_r+0x68>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	6922      	ldr	r2, [r4, #16]
 800793c:	1a98      	subs	r0, r3, r2
 800793e:	6963      	ldr	r3, [r4, #20]
 8007940:	b2f6      	uxtb	r6, r6
 8007942:	4283      	cmp	r3, r0
 8007944:	4637      	mov	r7, r6
 8007946:	dc04      	bgt.n	8007952 <__swbuf_r+0x3a>
 8007948:	4621      	mov	r1, r4
 800794a:	4628      	mov	r0, r5
 800794c:	f7fe fc8c 	bl	8006268 <_fflush_r>
 8007950:	b9e0      	cbnz	r0, 800798c <__swbuf_r+0x74>
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	3b01      	subs	r3, #1
 8007956:	60a3      	str	r3, [r4, #8]
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	6022      	str	r2, [r4, #0]
 800795e:	701e      	strb	r6, [r3, #0]
 8007960:	6962      	ldr	r2, [r4, #20]
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	429a      	cmp	r2, r3
 8007966:	d004      	beq.n	8007972 <__swbuf_r+0x5a>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	07db      	lsls	r3, r3, #31
 800796c:	d506      	bpl.n	800797c <__swbuf_r+0x64>
 800796e:	2e0a      	cmp	r6, #10
 8007970:	d104      	bne.n	800797c <__swbuf_r+0x64>
 8007972:	4621      	mov	r1, r4
 8007974:	4628      	mov	r0, r5
 8007976:	f7fe fc77 	bl	8006268 <_fflush_r>
 800797a:	b938      	cbnz	r0, 800798c <__swbuf_r+0x74>
 800797c:	4638      	mov	r0, r7
 800797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007980:	4621      	mov	r1, r4
 8007982:	4628      	mov	r0, r5
 8007984:	f000 f806 	bl	8007994 <__swsetup_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	d0d5      	beq.n	8007938 <__swbuf_r+0x20>
 800798c:	f04f 37ff 	mov.w	r7, #4294967295
 8007990:	e7f4      	b.n	800797c <__swbuf_r+0x64>
	...

08007994 <__swsetup_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <__swsetup_r+0xac>)
 8007998:	4605      	mov	r5, r0
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	460c      	mov	r4, r1
 800799e:	b118      	cbz	r0, 80079a8 <__swsetup_r+0x14>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <__swsetup_r+0x14>
 80079a4:	f7fc fcfa 	bl	800439c <__sinit>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ae:	0718      	lsls	r0, r3, #28
 80079b0:	d422      	bmi.n	80079f8 <__swsetup_r+0x64>
 80079b2:	06d9      	lsls	r1, r3, #27
 80079b4:	d407      	bmi.n	80079c6 <__swsetup_r+0x32>
 80079b6:	2309      	movs	r3, #9
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295
 80079c4:	e034      	b.n	8007a30 <__swsetup_r+0x9c>
 80079c6:	0758      	lsls	r0, r3, #29
 80079c8:	d512      	bpl.n	80079f0 <__swsetup_r+0x5c>
 80079ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079cc:	b141      	cbz	r1, 80079e0 <__swsetup_r+0x4c>
 80079ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079d2:	4299      	cmp	r1, r3
 80079d4:	d002      	beq.n	80079dc <__swsetup_r+0x48>
 80079d6:	4628      	mov	r0, r5
 80079d8:	f7fc fe28 	bl	800462c <_free_r>
 80079dc:	2300      	movs	r3, #0
 80079de:	6363      	str	r3, [r4, #52]	; 0x34
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	2300      	movs	r3, #0
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	f043 0308 	orr.w	r3, r3, #8
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	b94b      	cbnz	r3, 8007a10 <__swsetup_r+0x7c>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a06:	d003      	beq.n	8007a10 <__swsetup_r+0x7c>
 8007a08:	4621      	mov	r1, r4
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 f884 	bl	8007b18 <__smakebuf_r>
 8007a10:	89a0      	ldrh	r0, [r4, #12]
 8007a12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a16:	f010 0301 	ands.w	r3, r0, #1
 8007a1a:	d00a      	beq.n	8007a32 <__swsetup_r+0x9e>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60a3      	str	r3, [r4, #8]
 8007a20:	6963      	ldr	r3, [r4, #20]
 8007a22:	425b      	negs	r3, r3
 8007a24:	61a3      	str	r3, [r4, #24]
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	b943      	cbnz	r3, 8007a3c <__swsetup_r+0xa8>
 8007a2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a2e:	d1c4      	bne.n	80079ba <__swsetup_r+0x26>
 8007a30:	bd38      	pop	{r3, r4, r5, pc}
 8007a32:	0781      	lsls	r1, r0, #30
 8007a34:	bf58      	it	pl
 8007a36:	6963      	ldrpl	r3, [r4, #20]
 8007a38:	60a3      	str	r3, [r4, #8]
 8007a3a:	e7f4      	b.n	8007a26 <__swsetup_r+0x92>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e7f7      	b.n	8007a30 <__swsetup_r+0x9c>
 8007a40:	20000064 	.word	0x20000064

08007a44 <_raise_r>:
 8007a44:	291f      	cmp	r1, #31
 8007a46:	b538      	push	{r3, r4, r5, lr}
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	d904      	bls.n	8007a58 <_raise_r+0x14>
 8007a4e:	2316      	movs	r3, #22
 8007a50:	6003      	str	r3, [r0, #0]
 8007a52:	f04f 30ff 	mov.w	r0, #4294967295
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a5a:	b112      	cbz	r2, 8007a62 <_raise_r+0x1e>
 8007a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a60:	b94b      	cbnz	r3, 8007a76 <_raise_r+0x32>
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f830 	bl	8007ac8 <_getpid_r>
 8007a68:	462a      	mov	r2, r5
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a72:	f000 b817 	b.w	8007aa4 <_kill_r>
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d00a      	beq.n	8007a90 <_raise_r+0x4c>
 8007a7a:	1c59      	adds	r1, r3, #1
 8007a7c:	d103      	bne.n	8007a86 <_raise_r+0x42>
 8007a7e:	2316      	movs	r3, #22
 8007a80:	6003      	str	r3, [r0, #0]
 8007a82:	2001      	movs	r0, #1
 8007a84:	e7e7      	b.n	8007a56 <_raise_r+0x12>
 8007a86:	2400      	movs	r4, #0
 8007a88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	4798      	blx	r3
 8007a90:	2000      	movs	r0, #0
 8007a92:	e7e0      	b.n	8007a56 <_raise_r+0x12>

08007a94 <raise>:
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <raise+0xc>)
 8007a96:	4601      	mov	r1, r0
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	f7ff bfd3 	b.w	8007a44 <_raise_r>
 8007a9e:	bf00      	nop
 8007aa0:	20000064 	.word	0x20000064

08007aa4 <_kill_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4d07      	ldr	r5, [pc, #28]	; (8007ac4 <_kill_r+0x20>)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	4604      	mov	r4, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	4611      	mov	r1, r2
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	f7f9 fc8b 	bl	80013cc <_kill>
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	d102      	bne.n	8007ac0 <_kill_r+0x1c>
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	b103      	cbz	r3, 8007ac0 <_kill_r+0x1c>
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200003f4 	.word	0x200003f4

08007ac8 <_getpid_r>:
 8007ac8:	f7f9 bc78 	b.w	80013bc <_getpid>

08007acc <__swhatbuf_r>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	b096      	sub	sp, #88	; 0x58
 8007ad8:	4615      	mov	r5, r2
 8007ada:	461e      	mov	r6, r3
 8007adc:	da0d      	bge.n	8007afa <__swhatbuf_r+0x2e>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ae4:	f04f 0100 	mov.w	r1, #0
 8007ae8:	bf0c      	ite	eq
 8007aea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007aee:	2340      	movne	r3, #64	; 0x40
 8007af0:	2000      	movs	r0, #0
 8007af2:	6031      	str	r1, [r6, #0]
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	b016      	add	sp, #88	; 0x58
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	466a      	mov	r2, sp
 8007afc:	f000 f848 	bl	8007b90 <_fstat_r>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dbec      	blt.n	8007ade <__swhatbuf_r+0x12>
 8007b04:	9901      	ldr	r1, [sp, #4]
 8007b06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b0e:	4259      	negs	r1, r3
 8007b10:	4159      	adcs	r1, r3
 8007b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b16:	e7eb      	b.n	8007af0 <__swhatbuf_r+0x24>

08007b18 <__smakebuf_r>:
 8007b18:	898b      	ldrh	r3, [r1, #12]
 8007b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b1c:	079d      	lsls	r5, r3, #30
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	d507      	bpl.n	8007b34 <__smakebuf_r+0x1c>
 8007b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	6163      	str	r3, [r4, #20]
 8007b30:	b002      	add	sp, #8
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	ab01      	add	r3, sp, #4
 8007b36:	466a      	mov	r2, sp
 8007b38:	f7ff ffc8 	bl	8007acc <__swhatbuf_r>
 8007b3c:	9900      	ldr	r1, [sp, #0]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7fc fddf 	bl	8004704 <_malloc_r>
 8007b46:	b948      	cbnz	r0, 8007b5c <__smakebuf_r+0x44>
 8007b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4c:	059a      	lsls	r2, r3, #22
 8007b4e:	d4ef      	bmi.n	8007b30 <__smakebuf_r+0x18>
 8007b50:	f023 0303 	bic.w	r3, r3, #3
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	e7e3      	b.n	8007b24 <__smakebuf_r+0xc>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	6020      	str	r0, [r4, #0]
 8007b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	6163      	str	r3, [r4, #20]
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	6120      	str	r0, [r4, #16]
 8007b6e:	b15b      	cbz	r3, 8007b88 <__smakebuf_r+0x70>
 8007b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b74:	4630      	mov	r0, r6
 8007b76:	f000 f81d 	bl	8007bb4 <_isatty_r>
 8007b7a:	b128      	cbz	r0, 8007b88 <__smakebuf_r+0x70>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f023 0303 	bic.w	r3, r3, #3
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	431d      	orrs	r5, r3
 8007b8c:	81a5      	strh	r5, [r4, #12]
 8007b8e:	e7cf      	b.n	8007b30 <__smakebuf_r+0x18>

08007b90 <_fstat_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d07      	ldr	r5, [pc, #28]	; (8007bb0 <_fstat_r+0x20>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	f7f9 fc74 	bl	800148a <_fstat>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	d102      	bne.n	8007bac <_fstat_r+0x1c>
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	b103      	cbz	r3, 8007bac <_fstat_r+0x1c>
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	bf00      	nop
 8007bb0:	200003f4 	.word	0x200003f4

08007bb4 <_isatty_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_isatty_r+0x1c>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f7f9 fc73 	bl	80014aa <_isatty>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_isatty_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_isatty_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	200003f4 	.word	0x200003f4

08007bd4 <_init>:
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd6:	bf00      	nop
 8007bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bda:	bc08      	pop	{r3}
 8007bdc:	469e      	mov	lr, r3
 8007bde:	4770      	bx	lr

08007be0 <_fini>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	bf00      	nop
 8007be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be6:	bc08      	pop	{r3}
 8007be8:	469e      	mov	lr, r3
 8007bea:	4770      	bx	lr
