
st_to_rasp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d40  08006d40  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d48  08006d48  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d4c  08006d4c  00016d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004200  20000060  08006db0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004260  08006db0  00024260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bd7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c55  00000000  00000000  00032caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00035900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be1  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017446  00000000  00000000  00037421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001302d  00000000  00000000  0004e867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090813  00000000  00000000  00061894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004214  00000000  00000000  000f20a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f62bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c90 	.word	0x08006c90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006c90 	.word	0x08006c90

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000007c 	.word	0x2000007c
 800050c:	2000011c 	.word	0x2000011c

08000510 <ResetI2C>:
volatile uint8_t rx_buff;
uint8_t tx_buff=0;
uint8_t erro=0;

HAL_StatusTypeDef sig = 0x0;
void ResetI2C(I2C_HandleTypeDef* rev_i2c){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_I2C_DeInit(rev_i2c);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f001 f971 	bl	8001800 <HAL_I2C_DeInit>
	HAL_I2C_Init(rev_i2c);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f001 f82a 	bl	8001578 <HAL_I2C_Init>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b098      	sub	sp, #96	; 0x60
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fb7d 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f871 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f92f 	bl	800079c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800053e:	f000 f903 	bl	8000748 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000542:	f000 f8d3 	bl	80006ec <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of I2CMutex */
  osMutexDef(I2CMutex);
 8000546:	2300      	movs	r3, #0
 8000548:	65bb      	str	r3, [r7, #88]	; 0x58
 800054a:	2300      	movs	r3, #0
 800054c:	65fb      	str	r3, [r7, #92]	; 0x5c
  I2CMutexHandle = osMutexCreate(osMutex(I2CMutex));
 800054e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000552:	4618      	mov	r0, r3
 8000554:	f004 f94b 	bl	80047ee <osMutexCreate>
 8000558:	4603      	mov	r3, r0
 800055a:	4a28      	ldr	r2, [pc, #160]	; (80005fc <main+0xd0>)
 800055c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <main+0xd4>)
 8000560:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000572:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f004 f8d8 	bl	800472e <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <main+0xd8>)
 8000582:	6013      	str	r3, [r2, #0]

  /* definition and creation of IrReadTask */
  osThreadDef(IrReadTask, IRTask_Start, osPriorityNormal, 0, 128);
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <main+0xdc>)
 8000586:	f107 0420 	add.w	r4, r7, #32
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IrReadTaskHandle = osThreadCreate(osThread(IrReadTask), NULL);
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 f8c5 	bl	800472e <osThreadCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a19      	ldr	r2, [pc, #100]	; (800060c <main+0xe0>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2CSendTask */
  osThreadDef(I2CSendTask, I2CSendTask_Start, osPriorityNormal, 0, 128);
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <main+0xe4>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2CSendTaskHandle = osThreadCreate(osThread(I2CSendTask), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 f8b4 	bl	800472e <osThreadCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0xe8>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f004 f8a8 	bl	8004720 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0xec>)
 80005d8:	f000 ffb4 	bl	8001544 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 80005dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005e0:	f000 fb98 	bl	8000d14 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <main+0xec>)
 80005ec:	f000 ffaa 	bl	8001544 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 80005f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f4:	f000 fb8e 	bl	8000d14 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80005f8:	e7ea      	b.n	80005d0 <main+0xa4>
 80005fa:	bf00      	nop
 80005fc:	200003c0 	.word	0x200003c0
 8000600:	08006cb4 	.word	0x08006cb4
 8000604:	200003b4 	.word	0x200003b4
 8000608:	08006cdc 	.word	0x08006cdc
 800060c:	200003b8 	.word	0x200003b8
 8000610:	08006d04 	.word	0x08006d04
 8000614:	200003bc 	.word	0x200003bc
 8000618:	40020800 	.word	0x40020800

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 fa46 	bl	8006abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <SystemClock_Config+0xc8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemClock_Config+0xcc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 f90b 	bl	80038bc <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f952 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2103      	movs	r1, #3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fb6d 	bl	8003dac <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d8:	f000 f93c 	bl	8000954 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2220      	movs	r2, #32
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f000 ff25 	bl	8001578 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f90e 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000031c 	.word	0x2000031c
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_USART1_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000780:	f003 fcf4 	bl	800416c <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f8e3 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000370 	.word	0x20000370
 8000798:	40011000 	.word	0x40011000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0xa0>)
 800080e:	f000 fe99 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0xa0>)
 800082c:	f000 fc0a 	bl	8001044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020800 	.word	0x40020800

08000840 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f003 ffbc 	bl	80047c6 <osDelay>
 800084e:	e7fb      	b.n	8000848 <StartDefaultTask+0x8>

08000850 <IRTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRTask_Start */
void IRTask_Start(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRTask_Start */
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(I2CMutexHandle, portMAX_DELAY);
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <IRTask_Start+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	4618      	mov	r0, r3
 8000862:	f004 fb15 	bl	8004e90 <xQueueSemaphoreTake>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== 0){
 8000866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <IRTask_Start+0x50>)
 800086c:	f000 fe52 	bl	8001514 <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d103      	bne.n	800087e <IRTask_Start+0x2e>
		tx_buff=1;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <IRTask_Start+0x54>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e002      	b.n	8000884 <IRTask_Start+0x34>
	}
	else{
		tx_buff=0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <IRTask_Start+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	}
	xSemaphoreGive(I2CMutexHandle);
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <IRTask_Start+0x4c>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	2300      	movs	r3, #0
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	f004 fa01 	bl	8004c94 <xQueueGenericSend>
    osDelay(20);
 8000892:	2014      	movs	r0, #20
 8000894:	f003 ff97 	bl	80047c6 <osDelay>
	xSemaphoreTake(I2CMutexHandle, portMAX_DELAY);
 8000898:	e7de      	b.n	8000858 <IRTask_Start+0x8>
 800089a:	bf00      	nop
 800089c:	200003c0 	.word	0x200003c0
 80008a0:	40020800 	.word	0x40020800
 80008a4:	200003c5 	.word	0x200003c5

080008a8 <I2CSendTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_I2CSendTask_Start */
void I2CSendTask_Start(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2CSendTask_Start */
  /* Infinite loop */
  for(;;)
  {
	if((sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buff, TXBUFFSIZE, 0xFFFFFFFF)) != HAL_OK){
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	2201      	movs	r2, #1
 80008b6:	4922      	ldr	r1, [pc, #136]	; (8000940 <I2CSendTask_Start+0x98>)
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <I2CSendTask_Start+0x9c>)
 80008ba:	f001 f8e7 	bl	8001a8c <HAL_I2C_Slave_Receive>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <I2CSendTask_Start+0xa0>)
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <I2CSendTask_Start+0xa0>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <I2CSendTask_Start+0x2c>
		ResetI2C(&hi2c1);
 80008ce:	481d      	ldr	r0, [pc, #116]	; (8000944 <I2CSendTask_Start+0x9c>)
 80008d0:	f7ff fe1e 	bl	8000510 <ResetI2C>
	}
	if ((sig == HAL_OK)){
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <I2CSendTask_Start+0xa0>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1e9      	bne.n	80008b0 <I2CSendTask_Start+0x8>
		if((sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&tx_buff, TXBUFFSIZE, 0x01)) != HAL_OK){
 80008dc:	2301      	movs	r3, #1
 80008de:	2201      	movs	r2, #1
 80008e0:	491a      	ldr	r1, [pc, #104]	; (800094c <I2CSendTask_Start+0xa4>)
 80008e2:	4818      	ldr	r0, [pc, #96]	; (8000944 <I2CSendTask_Start+0x9c>)
 80008e4:	f001 f8d2 	bl	8001a8c <HAL_I2C_Slave_Receive>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <I2CSendTask_Start+0xa0>)
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <I2CSendTask_Start+0xa0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d003      	beq.n	8000900 <I2CSendTask_Start+0x58>
			ResetI2C(&hi2c1);
 80008f8:	4812      	ldr	r0, [pc, #72]	; (8000944 <I2CSendTask_Start+0x9c>)
 80008fa:	f7ff fe09 	bl	8000510 <ResetI2C>
 80008fe:	e01b      	b.n	8000938 <I2CSendTask_Start+0x90>
		}
		else if(rx_buff ==0x02){
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <I2CSendTask_Start+0x98>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b02      	cmp	r3, #2
 8000908:	d116      	bne.n	8000938 <I2CSendTask_Start+0x90>
			rx_buff = 0;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <I2CSendTask_Start+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
			xSemaphoreTake(I2CMutexHandle, portMAX_DELAY);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <I2CSendTask_Start+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fab9 	bl	8004e90 <xQueueSemaphoreTake>
			HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&tx_buff, TXBUFFSIZE,0x01);
 800091e:	2301      	movs	r3, #1
 8000920:	2201      	movs	r2, #1
 8000922:	490a      	ldr	r1, [pc, #40]	; (800094c <I2CSendTask_Start+0xa4>)
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <I2CSendTask_Start+0x9c>)
 8000926:	f000 ff9b 	bl	8001860 <HAL_I2C_Slave_Transmit>
			xSemaphoreGive(I2CMutexHandle);
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <I2CSendTask_Start+0xa8>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	f004 f9ae 	bl	8004c94 <xQueueGenericSend>
		}
    osDelay(20);
 8000938:	2014      	movs	r0, #20
 800093a:	f003 ff44 	bl	80047c6 <osDelay>
	if((sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buff, TXBUFFSIZE, 0xFFFFFFFF)) != HAL_OK){
 800093e:	e7b7      	b.n	80008b0 <I2CSendTask_Start+0x8>
 8000940:	200003c4 	.word	0x200003c4
 8000944:	2000031c 	.word	0x2000031c
 8000948:	200003c6 	.word	0x200003c6
 800094c:	200003c5 	.word	0x200003c5
 8000950:	200003c0 	.word	0x200003c0

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
//	erro = 1;
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_MspInit+0x54>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x54>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_MspInit+0x54>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_MspInit+0x54>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
 80009a6:	f000 fad8 	bl	8000f5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <HAL_I2C_MspInit+0xa4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d13b      	bne.n	8000a52 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_I2C_MspInit+0xa8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <HAL_I2C_MspInit+0xa8>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <HAL_I2C_MspInit+0xa8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009f6:	23c0      	movs	r3, #192	; 0xc0
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fa:	2312      	movs	r3, #18
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a06:	2304      	movs	r3, #4
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <HAL_I2C_MspInit+0xac>)
 8000a12:	f000 fb17 	bl	8001044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_I2C_MspInit+0xa8>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <HAL_I2C_MspInit+0xa8>)
 8000a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_I2C_MspInit+0xa8>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	201f      	movs	r0, #31
 8000a38:	f000 fa8f 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a3c:	201f      	movs	r0, #31
 8000a3e:	f000 faa8 	bl	8000f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2020      	movs	r0, #32
 8000a48:	f000 fa87 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a4c:	2020      	movs	r0, #32
 8000a4e:	f000 faa0 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400

08000a68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_I2C_MspDeInit+0x44>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d113      	bne.n	8000aa2 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_I2C_MspDeInit+0x48>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_I2C_MspDeInit+0x48>)
 8000a80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <HAL_I2C_MspDeInit+0x4c>)
 8000a8a:	f000 fc5f 	bl	800134c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <HAL_I2C_MspDeInit+0x4c>)
 8000a92:	f000 fc5b 	bl	800134c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000a96:	201f      	movs	r0, #31
 8000a98:	f000 fa89 	bl	8000fae <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000a9c:	2020      	movs	r0, #32
 8000a9e:	f000 fa86 	bl	8000fae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12c      	bne.n	8000b34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae4:	f043 0310 	orr.w	r3, r3, #16
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b24:	2307      	movs	r3, #7
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_UART_MspInit+0x8c>)
 8000b30:	f000 fa88 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f8ac 	bl	8000cd4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b7c:	f005 f986 	bl	8005e8c <xTaskGetSchedulerState>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d001      	beq.n	8000b8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b86:	f005 fd5f 	bl	8006648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <I2C1_EV_IRQHandler+0x10>)
 8000b96:	f001 f883 	bl	8001ca0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000031c 	.word	0x2000031c

08000ba4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <I2C1_ER_IRQHandler+0x10>)
 8000baa:	f001 f9cc 	bl	8001f46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000031c 	.word	0x2000031c

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ffd7 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f005 ffb5 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fc8d 	bl	800052c <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c20:	08006d50 	.word	0x08006d50
  ldr r2, =_sbss
 8000c24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c28:	20004260 	.word	0x20004260

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f973 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe7c 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f999 	bl	8000fca <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f953 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	200003c8 	.word	0x200003c8

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200003c8 	.word	0x200003c8

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db12      	blt.n	8000e34 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	490a      	ldr	r1, [pc, #40]	; (8000e40 <__NVIC_DisableIRQ+0x44>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	3320      	adds	r3, #32
 8000e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e28:	f3bf 8f4f 	dsb	sy
}
 8000e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e2e:	f3bf 8f6f 	isb	sy
}
 8000e32:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff05 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff1a 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff0d 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff1d 	bl	8000dfc <__NVIC_DisableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff94 	bl	8000f00 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d004      	beq.n	8001000 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e00c      	b.n	800101a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2205      	movs	r2, #5
 8001004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001034:	b2db      	uxtb	r3, r3
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e159      	b.n	8001314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8148 	bne.w	800130e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80a2 	beq.w	800130e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b57      	ldr	r3, [pc, #348]	; (800132c <HAL_GPIO_Init+0x2e8>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a56      	ldr	r2, [pc, #344]	; (800132c <HAL_GPIO_Init+0x2e8>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b54      	ldr	r3, [pc, #336]	; (800132c <HAL_GPIO_Init+0x2e8>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a52      	ldr	r2, [pc, #328]	; (8001330 <HAL_GPIO_Init+0x2ec>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a49      	ldr	r2, [pc, #292]	; (8001334 <HAL_GPIO_Init+0x2f0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d019      	beq.n	8001246 <HAL_GPIO_Init+0x202>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a48      	ldr	r2, [pc, #288]	; (8001338 <HAL_GPIO_Init+0x2f4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0x1fe>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a47      	ldr	r2, [pc, #284]	; (800133c <HAL_GPIO_Init+0x2f8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d00d      	beq.n	800123e <HAL_GPIO_Init+0x1fa>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a46      	ldr	r2, [pc, #280]	; (8001340 <HAL_GPIO_Init+0x2fc>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x1f6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a45      	ldr	r2, [pc, #276]	; (8001344 <HAL_GPIO_Init+0x300>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <HAL_GPIO_Init+0x1f2>
 8001232:	2304      	movs	r3, #4
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x204>
 8001236:	2307      	movs	r3, #7
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x204>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x204>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x204>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x204>
 8001246:	2300      	movs	r3, #0
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <HAL_GPIO_Init+0x2ec>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_GPIO_Init+0x304>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <HAL_GPIO_Init+0x304>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_GPIO_Init+0x304>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a24      	ldr	r2, [pc, #144]	; (8001348 <HAL_GPIO_Init+0x304>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_GPIO_Init+0x304>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012de:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <HAL_GPIO_Init+0x304>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_GPIO_Init+0x304>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_GPIO_Init+0x304>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	f67f aea2 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e0bb      	b.n	80014e0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001368:	2201      	movs	r2, #1
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	429a      	cmp	r2, r3
 8001380:	f040 80ab 	bne.w	80014da <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001384:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_GPIO_DeInit+0x1ac>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	4013      	ands	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a54      	ldr	r2, [pc, #336]	; (80014fc <HAL_GPIO_DeInit+0x1b0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_DeInit+0x96>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a53      	ldr	r2, [pc, #332]	; (8001500 <HAL_GPIO_DeInit+0x1b4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_DeInit+0x92>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_GPIO_DeInit+0x1b8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_DeInit+0x8e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a51      	ldr	r2, [pc, #324]	; (8001508 <HAL_GPIO_DeInit+0x1bc>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_DeInit+0x8a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <HAL_GPIO_DeInit+0x1c0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_DeInit+0x86>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_DeInit+0x98>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_DeInit+0x98>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_DeInit+0x98>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_DeInit+0x98>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_DeInit+0x98>
 80013e2:	2300      	movs	r3, #0
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d132      	bne.n	800145a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80013f4:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4944      	ldr	r1, [pc, #272]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 80013fe:	4013      	ands	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	4941      	ldr	r1, [pc, #260]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 800140c:	4013      	ands	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	493d      	ldr	r1, [pc, #244]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 800141a:	4013      	ands	r3, r2
 800141c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800141e:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	493a      	ldr	r1, [pc, #232]	; (8001510 <HAL_GPIO_DeInit+0x1c4>)
 8001428:	4013      	ands	r3, r2
 800142a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_GPIO_DeInit+0x1ac>)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	43da      	mvns	r2, r3
 800144c:	482a      	ldr	r0, [pc, #168]	; (80014f8 <HAL_GPIO_DeInit+0x1ac>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	400a      	ands	r2, r1
 8001454:	3302      	adds	r3, #2
 8001456:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2103      	movs	r1, #3
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	08d2      	lsrs	r2, r2, #3
 8001490:	4019      	ands	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2103      	movs	r1, #3
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2103      	movs	r1, #3
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	401a      	ands	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f af40 	bls.w	8001368 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e12b      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fa0a 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015dc:	f002 fd9e 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a81      	ldr	r2, [pc, #516]	; (80017ec <HAL_I2C_Init+0x274>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d807      	bhi.n	80015fc <HAL_I2C_Init+0x84>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a80      	ldr	r2, [pc, #512]	; (80017f0 <HAL_I2C_Init+0x278>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bf94      	ite	ls
 80015f4:	2301      	movls	r3, #1
 80015f6:	2300      	movhi	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e006      	b.n	800160a <HAL_I2C_Init+0x92>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a7d      	ldr	r2, [pc, #500]	; (80017f4 <HAL_I2C_Init+0x27c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0e7      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4a78      	ldr	r2, [pc, #480]	; (80017f8 <HAL_I2C_Init+0x280>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <HAL_I2C_Init+0x274>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d802      	bhi.n	800164c <HAL_I2C_Init+0xd4>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	e009      	b.n	8001660 <HAL_I2C_Init+0xe8>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a69      	ldr	r2, [pc, #420]	; (80017fc <HAL_I2C_Init+0x284>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	3301      	adds	r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	495c      	ldr	r1, [pc, #368]	; (80017ec <HAL_I2C_Init+0x274>)
 800167c:	428b      	cmp	r3, r1
 800167e:	d819      	bhi.n	80016b4 <HAL_I2C_Init+0x13c>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e59      	subs	r1, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fbb1 f3f3 	udiv	r3, r1, r3
 800168e:	1c59      	adds	r1, r3, #1
 8001690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001694:	400b      	ands	r3, r1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <HAL_I2C_Init+0x138>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e59      	subs	r1, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ae:	e051      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e04f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_I2C_Init+0x168>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e012      	b.n	8001706 <HAL_I2C_Init+0x18e>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	0099      	lsls	r1, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Init+0x196>
 800170a:	2301      	movs	r3, #1
 800170c:	e022      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10e      	bne.n	8001734 <HAL_I2C_Init+0x1bc>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e58      	subs	r0, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6859      	ldr	r1, [r3, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	fbb0 f3f3 	udiv	r3, r0, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	0099      	lsls	r1, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	6809      	ldr	r1, [r1, #0]
 8001758:	4313      	orrs	r3, r2
 800175a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6911      	ldr	r1, [r2, #16]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68d2      	ldr	r2, [r2, #12]
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	430b      	orrs	r3, r1
 8001796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	000186a0 	.word	0x000186a0
 80017f0:	001e847f 	.word	0x001e847f
 80017f4:	003d08ff 	.word	0x003d08ff
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	10624dd3 	.word	0x10624dd3

08001800 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e021      	b.n	8001856 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2224      	movs	r2, #36	; 0x24
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff f91c 	bl	8000a68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fa44 	bl	8000cfc <HAL_GetTick>
 8001874:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b20      	cmp	r3, #32
 8001880:	f040 80fb 	bne.w	8001a7a <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_I2C_Slave_Transmit+0x30>
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0f3      	b.n	8001a7c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Slave_Transmit+0x42>
 800189e:	2302      	movs	r3, #2
 80018a0:	e0ec      	b.n	8001a7c <HAL_I2C_Slave_Transmit+0x21c>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d007      	beq.n	80018c8 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d6:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2221      	movs	r2, #33	; 0x21
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	88fa      	ldrh	r2, [r7, #6]
 80018f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a5f      	ldr	r2, [pc, #380]	; (8001a84 <HAL_I2C_Slave_Transmit+0x224>)
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001918:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	4959      	ldr	r1, [pc, #356]	; (8001a88 <HAL_I2C_Slave_Transmit+0x228>)
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f001 fe21 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0a3      	b.n	8001a7c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001952:	d165      	bne.n	8001a20 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	494a      	ldr	r1, [pc, #296]	; (8001a88 <HAL_I2C_Slave_Transmit+0x228>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f001 fe04 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e086      	b.n	8001a7c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001984:	e04c      	b.n	8001a20 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f001 fe45 	bl	800361a <I2C_WaitOnTXEFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a4:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e068      	b.n	8001a7c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d11b      	bne.n	8001a20 <HAL_I2C_Slave_Transmit+0x1c0>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d017      	beq.n	8001a20 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ae      	bne.n	8001986 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f001 fd99 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01b      	b.n	8001a7c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a4c:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
  }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	ffff0000 	.word	0xffff0000
 8001a88:	00010002 	.word	0x00010002

08001a8c <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff f92e 	bl	8000cfc <HAL_GetTick>
 8001aa0:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	f040 80ee 	bne.w	8001c8c <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_I2C_Slave_Receive+0x30>
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0e6      	b.n	8001c8e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Slave_Receive+0x42>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e0df      	b.n	8001c8e <HAL_I2C_Slave_Receive+0x202>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d007      	beq.n	8001af4 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b02:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2222      	movs	r2, #34	; 0x22
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	88fa      	ldrh	r2, [r7, #6]
 8001b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a59      	ldr	r2, [pc, #356]	; (8001c98 <HAL_I2C_Slave_Receive+0x20c>)
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b44:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4953      	ldr	r1, [pc, #332]	; (8001c9c <HAL_I2C_Slave_Receive+0x210>)
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f001 fd0b 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e096      	b.n	8001c8e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8001b76:	e04e      	b.n	8001c16 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f001 fdfd 	bl	800377c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b96:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e078      	b.n	8001c8e <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d11c      	bne.n	8001c16 <HAL_I2C_Slave_Receive+0x18a>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ac      	bne.n	8001b78 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	6839      	ldr	r1, [r7, #0]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f001 fd3a 	bl	800369c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3c:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e025      	b.n	8001c8e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	ffff0000 	.word	0xffff0000
 8001c9c:	00010002 	.word	0x00010002

08001ca0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d003      	beq.n	8001cd8 <HAL_I2C_EV_IRQHandler+0x38>
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b40      	cmp	r3, #64	; 0x40
 8001cd4:	f040 80b1 	bne.w	8001e3a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_I2C_EV_IRQHandler+0x6e>
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001cf8:	d003      	beq.n	8001d02 <HAL_I2C_EV_IRQHandler+0x62>
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d00:	d101      	bne.n	8001d06 <HAL_I2C_EV_IRQHandler+0x66>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_I2C_EV_IRQHandler+0x68>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f000 8114 	beq.w	8001f36 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_I2C_EV_IRQHandler+0x90>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f001 fdaf 	bl	8003886 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fd5e 	bl	80027ea <I2C_Master_SB>
 8001d2e:	e083      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0xac>
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fdd6 	bl	80028f6 <I2C_Master_ADD10>
 8001d4a:	e075      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0xc8>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fdf2 	bl	800294a <I2C_Master_ADDR>
 8001d66:	e067      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d036      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d80:	f000 80db 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <HAL_I2C_EV_IRQHandler+0x10a>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_I2C_EV_IRQHandler+0x10a>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f9d6 	bl	8002154 <I2C_MasterTransmit_TXE>
 8001da8:	e046      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80c2 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80bc 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	2b21      	cmp	r3, #33	; 0x21
 8001dc6:	d103      	bne.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fa5f 	bl	800228c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dce:	e0b4      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	f040 80b1 	bne.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 facd 	bl	8002378 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dde:	e0ac      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dee:	f000 80a4 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x178>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x178>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fb45 	bl	80024a0 <I2C_MasterReceive_RXNE>
 8001e16:	e00f      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 808b 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8085 	beq.w	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fbf0 	bl	8002616 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	e080      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
 8001e38:	e07f      	b.n	8001f3a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e007      	b.n	8001e5c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d011      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00c      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 ffb0 	bl	8002de8 <I2C_Slave_ADDR>
 8001e88:	e05a      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_I2C_EV_IRQHandler+0x206>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 ffea 	bl	8002e78 <I2C_Slave_STOPF>
 8001ea4:	e04c      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2b21      	cmp	r3, #33	; 0x21
 8001eaa:	d002      	beq.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x212>
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	2b29      	cmp	r3, #41	; 0x29
 8001eb0:	d120      	bne.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x238>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x238>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fecb 	bl	8002c6c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed6:	e032      	b.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02d      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d028      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fefa 	bl	8002ce6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef2:	e024      	b.n	8001f3e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x27a>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x27a>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 ff08 	bl	8002d28 <I2C_SlaveReceive_RXNE>
 8001f18:	e012      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 ff38 	bl	8002da4 <I2C_SlaveReceive_BTF>
 8001f34:	e004      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b08a      	sub	sp, #40	; 0x28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_I2C_ER_IRQHandler+0x4a>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0x70>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001fb4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d03e      	beq.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d039      	beq.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001fca:	7efb      	ldrb	r3, [r7, #27]
 8001fcc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fe4:	7ebb      	ldrb	r3, [r7, #26]
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d112      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	2b21      	cmp	r3, #33	; 0x21
 8001ff4:	d008      	beq.n	8002008 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b29      	cmp	r3, #41	; 0x29
 8001ffa:	d005      	beq.n	8002008 <HAL_I2C_ER_IRQHandler+0xc2>
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b28      	cmp	r3, #40	; 0x28
 8002000:	d106      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b21      	cmp	r3, #33	; 0x21
 8002006:	d103      	bne.n	8002010 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f001 f865 	bl	80030d8 <I2C_Slave_AF>
 800200e:	e016      	b.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002018:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002022:	7efb      	ldrb	r3, [r7, #27]
 8002024:	2b10      	cmp	r3, #16
 8002026:	d002      	beq.n	800202e <HAL_I2C_ER_IRQHandler+0xe8>
 8002028:	7efb      	ldrb	r3, [r7, #27]
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d107      	bne.n	800203e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <HAL_I2C_ER_IRQHandler+0x11e>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002062:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f001 f89e 	bl	80031b8 <I2C_ITError>
  }
}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002162:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d150      	bne.n	800221c <I2C_MasterTransmit_TXE+0xc8>
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b21      	cmp	r3, #33	; 0x21
 800217e:	d14d      	bne.n	800221c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b08      	cmp	r3, #8
 8002184:	d01d      	beq.n	80021c2 <I2C_MasterTransmit_TXE+0x6e>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b20      	cmp	r3, #32
 800218a:	d01a      	beq.n	80021c2 <I2C_MasterTransmit_TXE+0x6e>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002192:	d016      	beq.n	80021c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2211      	movs	r2, #17
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff62 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021c0:	e060      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d107      	bne.n	800220c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff7d 	bl	8002104 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800220a:	e03b      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff35 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800221a:	e033      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b21      	cmp	r3, #33	; 0x21
 8002220:	d005      	beq.n	800222e <I2C_MasterTransmit_TXE+0xda>
 8002222:	7bbb      	ldrb	r3, [r7, #14]
 8002224:	2b40      	cmp	r3, #64	; 0x40
 8002226:	d12d      	bne.n	8002284 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b22      	cmp	r3, #34	; 0x22
 800222c:	d12a      	bne.n	8002284 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d108      	bne.n	800224a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002246:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002248:	e01c      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d103      	bne.n	800225e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f88e 	bl	8002378 <I2C_MemoryTransmit_TXE_BTF>
}
 800225c:	e012      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002282:	e7ff      	b.n	8002284 <I2C_MasterTransmit_TXE+0x130>
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b21      	cmp	r3, #33	; 0x21
 80022a4:	d164      	bne.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022d4:	e04c      	b.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d01d      	beq.n	8002318 <I2C_MasterTransmit_BTF+0x8c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d01a      	beq.n	8002318 <I2C_MasterTransmit_BTF+0x8c>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e8:	d016      	beq.n	8002318 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2211      	movs	r2, #17
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff feb7 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
}
 8002316:	e02b      	b.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002326:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d107      	bne.n	8002362 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fed2 	bl	8002104 <HAL_I2C_MemTxCpltCallback>
}
 8002360:	e006      	b.n	8002370 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fe8a 	bl	8002084 <HAL_I2C_MasterTxCpltCallback>
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002386:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11d      	bne.n	80023cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d10b      	bne.n	80023b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	1c9a      	adds	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80023ae:	e073      	b.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	121b      	asrs	r3, r3, #8
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023ca:	e065      	b.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10b      	bne.n	80023ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023ea:	e055      	b.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d151      	bne.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b22      	cmp	r3, #34	; 0x22
 80023f8:	d10d      	bne.n	8002416 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002414:	e040      	b.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b21      	cmp	r3, #33	; 0x21
 8002424:	d112      	bne.n	800244c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800244a:	e025      	b.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d120      	bne.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b21      	cmp	r3, #33	; 0x21
 800245a:	d11d      	bne.n	8002498 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800246a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fe36 	bl	8002104 <HAL_I2C_MemTxCpltCallback>
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b22      	cmp	r3, #34	; 0x22
 80024b2:	f040 80ac 	bne.w	800260e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d921      	bls.n	8002508 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	f040 808c 	bne.w	800260e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002504:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002506:	e082      	b.n	800260e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	2b02      	cmp	r3, #2
 800250e:	d075      	beq.n	80025fc <I2C_MasterReceive_RXNE+0x15c>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d002      	beq.n	800251c <I2C_MasterReceive_RXNE+0x7c>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d16f      	bne.n	80025fc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f001 f8fb 	bl	8003718 <I2C_WaitOnSTOPRequestThroughIT>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d142      	bne.n	80025ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002536:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002546:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d10a      	bne.n	8002598 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff fdc1 	bl	8002118 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002596:	e03a      	b.n	800260e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2212      	movs	r2, #18
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fd76 	bl	8002098 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025ac:	e02f      	b.n	800260e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fd99 	bl	800212c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025fa:	e008      	b.n	800260e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260a:	605a      	str	r2, [r3, #4]
}
 800260c:	e7ff      	b.n	800260e <I2C_MasterReceive_RXNE+0x16e>
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b04      	cmp	r3, #4
 800262c:	d11b      	bne.n	8002666 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002664:	e0bd      	b.n	80027e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b03      	cmp	r3, #3
 800266e:	d129      	bne.n	80026c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00a      	beq.n	800269c <I2C_MasterReceive_BTF+0x86>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d007      	beq.n	800269c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026c2:	e08e      	b.n	80027e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d176      	bne.n	80027bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d002      	beq.n	80026da <I2C_MasterReceive_BTF+0xc4>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d108      	bne.n	80026ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e019      	b.n	8002720 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d002      	beq.n	80026f8 <I2C_MasterReceive_BTF+0xe2>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d108      	bne.n	800270a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e00a      	b.n	8002720 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b10      	cmp	r3, #16
 800270e:	d007      	beq.n	8002720 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800277a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d10a      	bne.n	80027a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fcba 	bl	8002118 <HAL_I2C_MemRxCpltCallback>
}
 80027a4:	e01d      	b.n	80027e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2212      	movs	r2, #18
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fc6f 	bl	8002098 <HAL_I2C_MasterRxCpltCallback>
}
 80027ba:	e012      	b.n	80027e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d117      	bne.n	800282e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002816:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002818:	e067      	b.n	80028ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	b2da      	uxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	611a      	str	r2, [r3, #16]
}
 800282c:	e05d      	b.n	80028ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002836:	d133      	bne.n	80028a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b21      	cmp	r3, #33	; 0x21
 8002842:	d109      	bne.n	8002858 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	e008      	b.n	800286a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <I2C_Master_SB+0x92>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d108      	bne.n	800288e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d032      	beq.n	80028ea <I2C_Master_SB+0x100>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02d      	beq.n	80028ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289c:	605a      	str	r2, [r3, #4]
}
 800289e:	e024      	b.n	80028ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10e      	bne.n	80028c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	11db      	asrs	r3, r3, #7
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 0306 	and.w	r3, r3, #6
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f063 030f 	orn	r3, r3, #15
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]
}
 80028c4:	e011      	b.n	80028ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10d      	bne.n	80028ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	11db      	asrs	r3, r3, #7
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0306 	and.w	r3, r3, #6
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f063 030e 	orn	r3, r3, #14
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	b2da      	uxtb	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <I2C_Master_ADD10+0x26>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00c      	beq.n	800293e <I2C_Master_ADD10+0x48>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800293c:	605a      	str	r2, [r3, #4]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800294a:	b480      	push	{r7}
 800294c:	b091      	sub	sp, #68	; 0x44
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b22      	cmp	r3, #34	; 0x22
 8002972:	f040 8169 	bne.w	8002c48 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10f      	bne.n	800299e <I2C_Master_ADDR+0x54>
 800297e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d10b      	bne.n	800299e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002986:	2300      	movs	r3, #0
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	e160      	b.n	8002c60 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11d      	bne.n	80029e2 <I2C_Master_ADDR+0x98>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029ae:	d118      	bne.n	80029e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	651a      	str	r2, [r3, #80]	; 0x50
 80029e0:	e13e      	b.n	8002c60 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d113      	bne.n	8002a14 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e115      	b.n	8002c40 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 808a 	bne.w	8002b34 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a26:	d137      	bne.n	8002a98 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a46:	d113      	bne.n	8002a70 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	e0e7      	b.n	8002c40 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e0d3      	b.n	8002c40 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d02e      	beq.n	8002afc <I2C_Master_ADDR+0x1b2>
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d02b      	beq.n	8002afc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d102      	bne.n	8002ab0 <I2C_Master_ADDR+0x166>
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d125      	bne.n	8002afc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d00e      	beq.n	8002ad4 <I2C_Master_ADDR+0x18a>
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d00b      	beq.n	8002ad4 <I2C_Master_ADDR+0x18a>
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d008      	beq.n	8002ad4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e007      	b.n	8002ae4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	e0a1      	b.n	8002c40 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e085      	b.n	8002c40 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d14d      	bne.n	8002bda <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d016      	beq.n	8002b72 <I2C_Master_ADDR+0x228>
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d013      	beq.n	8002b72 <I2C_Master_ADDR+0x228>
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d010      	beq.n	8002b72 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e007      	b.n	8002b82 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b80:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b90:	d117      	bne.n	8002bc2 <I2C_Master_ADDR+0x278>
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b98:	d00b      	beq.n	8002bb2 <I2C_Master_ADDR+0x268>
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d008      	beq.n	8002bb2 <I2C_Master_ADDR+0x268>
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d005      	beq.n	8002bb2 <I2C_Master_ADDR+0x268>
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d002      	beq.n	8002bb2 <I2C_Master_ADDR+0x268>
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d107      	bne.n	8002bc2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bc0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	e032      	b.n	8002c40 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002be8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf8:	d117      	bne.n	8002c2a <I2C_Master_ADDR+0x2e0>
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c00:	d00b      	beq.n	8002c1a <I2C_Master_ADDR+0x2d0>
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d008      	beq.n	8002c1a <I2C_Master_ADDR+0x2d0>
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d005      	beq.n	8002c1a <I2C_Master_ADDR+0x2d0>
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d002      	beq.n	8002c1a <I2C_Master_ADDR+0x2d0>
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d107      	bne.n	8002c2a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c46:	e00b      	b.n	8002c60 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
}
 8002c5e:	e7ff      	b.n	8002c60 <I2C_Master_ADDR+0x316>
 8002c60:	bf00      	nop
 8002c62:	3744      	adds	r7, #68	; 0x44
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d02b      	beq.n	8002cde <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d114      	bne.n	8002cde <I2C_SlaveTransmit_TXE+0x72>
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b29      	cmp	r3, #41	; 0x29
 8002cb8:	d111      	bne.n	8002cde <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2228      	movs	r2, #40	; 0x28
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff f9e7 	bl	80020ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d011      	beq.n	8002d1c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d02c      	beq.n	8002d9c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d114      	bne.n	8002d9c <I2C_SlaveReceive_RXNE+0x74>
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b2a      	cmp	r3, #42	; 0x2a
 8002d76:	d111      	bne.n	8002d9c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2222      	movs	r2, #34	; 0x22
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2228      	movs	r2, #40	; 0x28
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff f992 	bl	80020c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e02:	2b28      	cmp	r3, #40	; 0x28
 8002e04:	d125      	bne.n	8002e52 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e14:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	81bb      	strh	r3, [r7, #12]
 8002e34:	e002      	b.n	8002e3c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e44:	89ba      	ldrh	r2, [r7, #12]
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff f942 	bl	80020d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e50:	e00e      	b.n	8002e70 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e96:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed4:	d172      	bne.n	8002fbc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b22      	cmp	r3, #34	; 0x22
 8002eda:	d002      	beq.n	8002ee2 <I2C_Slave_STOPF+0x6a>
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee0:	d135      	bne.n	8002f4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f043 0204 	orr.w	r2, r3, #4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe f883 	bl	8001026 <HAL_DMA_GetState>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d049      	beq.n	8002fba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	4a69      	ldr	r2, [pc, #420]	; (80030d0 <I2C_Slave_STOPF+0x258>)
 8002f2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe f855 	bl	8000fe2 <HAL_DMA_Abort_IT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d03d      	beq.n	8002fba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f4c:	e035      	b.n	8002fba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0204 	orr.w	r2, r3, #4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe f84d 	bl	8001026 <HAL_DMA_GetState>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d014      	beq.n	8002fbc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	4a4e      	ldr	r2, [pc, #312]	; (80030d0 <I2C_Slave_STOPF+0x258>)
 8002f98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f81f 	bl	8000fe2 <HAL_DMA_Abort_IT>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4798      	blx	r3
 8002fb8:	e000      	b.n	8002fbc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03e      	beq.n	8003044 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d112      	bne.n	8002ffa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d112      	bne.n	800302e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8b3 	bl	80031b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003052:	e039      	b.n	80030c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b2a      	cmp	r3, #42	; 0x2a
 8003058:	d109      	bne.n	800306e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2228      	movs	r2, #40	; 0x28
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff f829 	bl	80020c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b28      	cmp	r3, #40	; 0x28
 8003078:	d111      	bne.n	800309e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <I2C_Slave_STOPF+0x25c>)
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff f82a 	bl	80020f0 <HAL_I2C_ListenCpltCallback>
}
 800309c:	e014      	b.n	80030c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	2b22      	cmp	r3, #34	; 0x22
 80030a4:	d002      	beq.n	80030ac <I2C_Slave_STOPF+0x234>
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b22      	cmp	r3, #34	; 0x22
 80030aa:	d10d      	bne.n	80030c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe fffc 	bl	80020c0 <HAL_I2C_SlaveRxCpltCallback>
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0800341d 	.word	0x0800341d
 80030d4:	ffff0000 	.word	0xffff0000

080030d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d002      	beq.n	80030fa <I2C_Slave_AF+0x22>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d129      	bne.n	800314e <I2C_Slave_AF+0x76>
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b28      	cmp	r3, #40	; 0x28
 80030fe:	d126      	bne.n	800314e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a2c      	ldr	r2, [pc, #176]	; (80031b4 <I2C_Slave_AF+0xdc>)
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003114:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe ffd2 	bl	80020f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800314c:	e02e      	b.n	80031ac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b21      	cmp	r3, #33	; 0x21
 8003152:	d126      	bne.n	80031a2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <I2C_Slave_AF+0xdc>)
 8003158:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2221      	movs	r2, #33	; 0x21
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800317e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003188:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003198:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe ff86 	bl	80020ac <HAL_I2C_SlaveTxCpltCallback>
}
 80031a0:	e004      	b.n	80031ac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031aa:	615a      	str	r2, [r3, #20]
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	ffff0000 	.word	0xffff0000

080031b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031d0:	7bbb      	ldrb	r3, [r7, #14]
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d002      	beq.n	80031dc <I2C_ITError+0x24>
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d10a      	bne.n	80031f2 <I2C_ITError+0x3a>
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b22      	cmp	r3, #34	; 0x22
 80031e0:	d107      	bne.n	80031f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031f8:	2b28      	cmp	r3, #40	; 0x28
 80031fa:	d107      	bne.n	800320c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2228      	movs	r2, #40	; 0x28
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800320a:	e015      	b.n	8003238 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800321a:	d00a      	beq.n	8003232 <I2C_ITError+0x7a>
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b60      	cmp	r3, #96	; 0x60
 8003220:	d007      	beq.n	8003232 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003246:	d162      	bne.n	800330e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003256:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d020      	beq.n	80032a8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326a:	4a6a      	ldr	r2, [pc, #424]	; (8003414 <I2C_ITError+0x25c>)
 800326c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd feb5 	bl	8000fe2 <HAL_DMA_Abort_IT>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8089 	beq.w	8003392 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a2:	4610      	mov	r0, r2
 80032a4:	4798      	blx	r3
 80032a6:	e074      	b.n	8003392 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	4a59      	ldr	r2, [pc, #356]	; (8003414 <I2C_ITError+0x25c>)
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd fe94 	bl	8000fe2 <HAL_DMA_Abort_IT>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d068      	beq.n	8003392 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d10b      	bne.n	80032e6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003308:	4610      	mov	r0, r2
 800330a:	4798      	blx	r3
 800330c:	e041      	b.n	8003392 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b60      	cmp	r3, #96	; 0x60
 8003318:	d125      	bne.n	8003366 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d10b      	bne.n	800334e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe feee 	bl	8002140 <HAL_I2C_AbortCpltCallback>
 8003364:	e015      	b.n	8003392 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d10b      	bne.n	800338c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fe fecd 	bl	800212c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10e      	bne.n	80033c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d113      	bne.n	800340c <I2C_ITError+0x254>
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b28      	cmp	r3, #40	; 0x28
 80033e8:	d110      	bne.n	800340c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <I2C_ITError+0x260>)
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fe72 	bl	80020f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	0800341d 	.word	0x0800341d
 8003418:	ffff0000 	.word	0xffff0000

0800341c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003436:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <I2C_DMAAbort+0x148>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	08db      	lsrs	r3, r3, #3
 800343c:	4a4a      	ldr	r2, [pc, #296]	; (8003568 <I2C_DMAAbort+0x14c>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0a1a      	lsrs	r2, r3, #8
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00da      	lsls	r2, r3, #3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003462:	e00a      	b.n	800347a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d0ea      	beq.n	8003450 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	2200      	movs	r2, #0
 8003488:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	2200      	movs	r2, #0
 8003498:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	2200      	movs	r2, #0
 80034be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	2200      	movs	r2, #0
 80034ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b60      	cmp	r3, #96	; 0x60
 80034ea:	d10e      	bne.n	800350a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7fe fe1c 	bl	8002140 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003508:	e027      	b.n	800355a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003510:	2b28      	cmp	r3, #40	; 0x28
 8003512:	d117      	bne.n	8003544 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003532:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2228      	movs	r2, #40	; 0x28
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003542:	e007      	b.n	8003554 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003554:	6978      	ldr	r0, [r7, #20]
 8003556:	f7fe fde9 	bl	800212c <HAL_I2C_ErrorCallback>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000000 	.word	0x20000000
 8003568:	14f8b589 	.word	0x14f8b589

0800356c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	e025      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d021      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fd fbb9 	bl	8000cfc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d116      	bne.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e023      	b.n	8003612 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10d      	bne.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	e00c      	b.n	800360a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d0b6      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003626:	e02d      	b.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f8fd 	bl	8003828 <I2C_IsAcknowledgeFailed>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e02d      	b.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d021      	beq.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7fd fb5c 	bl	8000cfc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e007      	b.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d1ca      	bne.n	8003628 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a8:	e029      	b.n	80036fe <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f8bc 	bl	8003828 <I2C_IsAcknowledgeFailed>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e029      	b.n	800370e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fd fb1f 	bl	8000cfc <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e007      	b.n	800370e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b10      	cmp	r3, #16
 800370a:	d1ce      	bne.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	08db      	lsrs	r3, r3, #3
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	0a1a      	lsrs	r2, r3, #8
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b01      	subs	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d107      	bne.n	8003756 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e008      	b.n	8003768 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003764:	d0e9      	beq.n	800373a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	20000000 	.word	0x20000000
 8003778:	14f8b589 	.word	0x14f8b589

0800377c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003788:	e042      	b.n	8003810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b10      	cmp	r3, #16
 8003796:	d119      	bne.n	80037cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0210 	mvn.w	r2, #16
 80037a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e029      	b.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fd fa96 	bl	8000cfc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e007      	b.n	8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d1b5      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d11b      	bne.n	8003878 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003848:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003896:	d103      	bne.n	80038a0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800389e:	e007      	b.n	80038b0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038a8:	d102      	bne.n	80038b0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2208      	movs	r2, #8
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e267      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d075      	beq.n	80039c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00c      	beq.n	8003900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e6:	4b85      	ldr	r3, [pc, #532]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d112      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b82      	ldr	r3, [pc, #520]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fe:	d10b      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05b      	beq.n	80039c4 <HAL_RCC_OscConfig+0x108>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d157      	bne.n	80039c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e242      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x74>
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e01d      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6f      	ldr	r2, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6c      	ldr	r2, [pc, #432]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003954:	4b69      	ldr	r3, [pc, #420]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a68      	ldr	r2, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b66      	ldr	r3, [pc, #408]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd f9c2 	bl	8000cfc <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd f9be 	bl	8000cfc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e207      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0xc0>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fd f9ae 	bl	8000cfc <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fd f9aa 	bl	8000cfc <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1f3      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0xe8>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d063      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d11c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b44      	ldr	r3, [pc, #272]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d116      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1c7      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4937      	ldr	r1, [pc, #220]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	e03a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fd f963 	bl	8000cfc <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fd f95f 	bl	8000cfc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1a8      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4925      	ldr	r1, [pc, #148]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6e:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd f942 	bl	8000cfc <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fd f93e 	bl	8000cfc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e187      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d036      	beq.n	8003b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fd f922 	bl	8000cfc <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fd f91e 	bl	8000cfc <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e167      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x200>
 8003ada:	e01b      	b.n	8003b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd f90b 	bl	8000cfc <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	e00e      	b.n	8003b08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aea:	f7fd f907 	bl	8000cfc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d907      	bls.n	8003b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e150      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	42470000 	.word	0x42470000
 8003b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ea      	bne.n	8003aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8097 	beq.w	8003c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b77      	ldr	r3, [pc, #476]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5e:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a73      	ldr	r2, [pc, #460]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd f8c7 	bl	8000cfc <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fd f8c3 	bl	8000cfc <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e10c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2ea>
 8003b98:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a63      	ldr	r2, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x30c>
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a5e      	ldr	r2, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb4:	f043 0304 	orr.w	r3, r3, #4
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003bc8:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	4b55      	ldr	r3, [pc, #340]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a54      	ldr	r2, [pc, #336]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0304 	bic.w	r3, r3, #4
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fd f888 	bl	8000cfc <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fd f884 	bl	8000cfc <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0cb      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	4b49      	ldr	r3, [pc, #292]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0ee      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x334>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c14:	f7fd f872 	bl	8000cfc <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fd f86e 	bl	8000cfc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0b5      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c32:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a1 	beq.w	8003d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d05c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d141      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd f842 	bl	8000cfc <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd f83e 	bl	8000cfc <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e087      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	491b      	ldr	r1, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fd f817 	bl	8000cfc <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fd f813 	bl	8000cfc <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e05c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x416>
 8003cf0:	e054      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd f800 	bl	8000cfc <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fc fffc 	bl	8000cfc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e045      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x444>
 8003d1e:	e03d      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e038      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d028      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d121      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0cc      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d90c      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0b8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	494d      	ldr	r1, [pc, #308]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d044      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d119      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e06f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e067      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7fc ff2e 	bl	8000cfc <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fc ff2a 	bl	8000cfc <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d20c      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e032      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f32:	f000 f821 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490a      	ldr	r1, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc fe8e 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	08006d28 	.word	0x08006d28
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7c:	b090      	sub	sp, #64	; 0x40
 8003f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
 8003f84:	2300      	movs	r3, #0
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f88:	2300      	movs	r3, #0
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	f200 80a1 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003faa:	e09b      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_GetSysClockFreq+0x184>)
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fb0:	e09b      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fb2:	4b53      	ldr	r3, [pc, #332]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb6:	e098      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc2:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d028      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fce:	4b4a      	ldr	r3, [pc, #296]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4b47      	ldr	r3, [pc, #284]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	fb03 f201 	mul.w	r2, r3, r1
 8003fe8:	2300      	movs	r3, #0
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a43      	ldr	r2, [pc, #268]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff8:	460a      	mov	r2, r1
 8003ffa:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffe:	4413      	add	r3, r2
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	2200      	movs	r2, #0
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	61fa      	str	r2, [r7, #28]
 800400a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004012:	f7fc f8e5 	bl	80001e0 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4613      	mov	r3, r2
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800401e:	e053      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	2200      	movs	r2, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	617a      	str	r2, [r7, #20]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004032:	f04f 0b00 	mov.w	fp, #0
 8004036:	4652      	mov	r2, sl
 8004038:	465b      	mov	r3, fp
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	0159      	lsls	r1, r3, #5
 8004044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004048:	0150      	lsls	r0, r2, #5
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	ebb2 080a 	subs.w	r8, r2, sl
 8004052:	eb63 090b 	sbc.w	r9, r3, fp
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004062:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004066:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800406a:	ebb2 0408 	subs.w	r4, r2, r8
 800406e:	eb63 0509 	sbc.w	r5, r3, r9
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	00eb      	lsls	r3, r5, #3
 800407c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004080:	00e2      	lsls	r2, r4, #3
 8004082:	4614      	mov	r4, r2
 8004084:	461d      	mov	r5, r3
 8004086:	eb14 030a 	adds.w	r3, r4, sl
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	eb45 030b 	adc.w	r3, r5, fp
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409e:	4629      	mov	r1, r5
 80040a0:	028b      	lsls	r3, r1, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a8:	4621      	mov	r1, r4
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	2200      	movs	r2, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040bc:	f7fc f890 	bl	80001e0 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetSysClockFreq+0x184>)
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3740      	adds	r7, #64	; 0x40
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	017d7840 	.word	0x017d7840

08004104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	08006d38 	.word	0x08006d38

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004148:	f7ff ffdc 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	08006d38 	.word	0x08006d38

0800416c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e03f      	b.n	80041fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc fc90 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	; 0x24
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f829 	bl	8004208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800420c:	b0c0      	sub	sp, #256	; 0x100
 800420e:	af00      	add	r7, sp, #0
 8004210:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	68d9      	ldr	r1, [r3, #12]
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	ea40 0301 	orr.w	r3, r0, r1
 8004230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	431a      	orrs	r2, r3
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004260:	f021 010c 	bic.w	r1, r1, #12
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800426e:	430b      	orrs	r3, r1
 8004270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004282:	6999      	ldr	r1, [r3, #24]
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	ea40 0301 	orr.w	r3, r0, r1
 800428e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b8f      	ldr	r3, [pc, #572]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004298:	429a      	cmp	r2, r3
 800429a:	d005      	beq.n	80042a8 <UART_SetConfig+0xa0>
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b8d      	ldr	r3, [pc, #564]	; (80044d8 <UART_SetConfig+0x2d0>)
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d104      	bne.n	80042b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042a8:	f7ff ff4c 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 80042ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042b0:	e003      	b.n	80042ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042b2:	f7ff ff33 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80042b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c4:	f040 810c 	bne.w	80044e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	1891      	adds	r1, r2, r2
 80042e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80042e2:	415b      	adcs	r3, r3
 80042e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042ea:	4621      	mov	r1, r4
 80042ec:	eb12 0801 	adds.w	r8, r2, r1
 80042f0:	4629      	mov	r1, r5
 80042f2:	eb43 0901 	adc.w	r9, r3, r1
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430a:	4690      	mov	r8, r2
 800430c:	4699      	mov	r9, r3
 800430e:	4623      	mov	r3, r4
 8004310:	eb18 0303 	adds.w	r3, r8, r3
 8004314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004318:	462b      	mov	r3, r5
 800431a:	eb49 0303 	adc.w	r3, r9, r3
 800431e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800432e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004332:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004336:	460b      	mov	r3, r1
 8004338:	18db      	adds	r3, r3, r3
 800433a:	653b      	str	r3, [r7, #80]	; 0x50
 800433c:	4613      	mov	r3, r2
 800433e:	eb42 0303 	adc.w	r3, r2, r3
 8004342:	657b      	str	r3, [r7, #84]	; 0x54
 8004344:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004348:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800434c:	f7fb ff48 	bl	80001e0 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4b61      	ldr	r3, [pc, #388]	; (80044dc <UART_SetConfig+0x2d4>)
 8004356:	fba3 2302 	umull	r2, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	011c      	lsls	r4, r3, #4
 800435e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004368:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800436c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	1891      	adds	r1, r2, r2
 8004376:	64b9      	str	r1, [r7, #72]	; 0x48
 8004378:	415b      	adcs	r3, r3
 800437a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800437c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004380:	4641      	mov	r1, r8
 8004382:	eb12 0a01 	adds.w	sl, r2, r1
 8004386:	4649      	mov	r1, r9
 8004388:	eb43 0b01 	adc.w	fp, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004398:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800439c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a0:	4692      	mov	sl, r2
 80043a2:	469b      	mov	fp, r3
 80043a4:	4643      	mov	r3, r8
 80043a6:	eb1a 0303 	adds.w	r3, sl, r3
 80043aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043ae:	464b      	mov	r3, r9
 80043b0:	eb4b 0303 	adc.w	r3, fp, r3
 80043b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043cc:	460b      	mov	r3, r1
 80043ce:	18db      	adds	r3, r3, r3
 80043d0:	643b      	str	r3, [r7, #64]	; 0x40
 80043d2:	4613      	mov	r3, r2
 80043d4:	eb42 0303 	adc.w	r3, r2, r3
 80043d8:	647b      	str	r3, [r7, #68]	; 0x44
 80043da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043e2:	f7fb fefd 	bl	80001e0 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	4b3b      	ldr	r3, [pc, #236]	; (80044dc <UART_SetConfig+0x2d4>)
 80043ee:	fba3 2301 	umull	r2, r3, r3, r1
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2264      	movs	r2, #100	; 0x64
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	1acb      	subs	r3, r1, r3
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <UART_SetConfig+0x2d4>)
 8004404:	fba3 2302 	umull	r2, r3, r3, r2
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004410:	441c      	add	r4, r3
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800441c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004420:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	63b9      	str	r1, [r7, #56]	; 0x38
 800442c:	415b      	adcs	r3, r3
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004434:	4641      	mov	r1, r8
 8004436:	1851      	adds	r1, r2, r1
 8004438:	6339      	str	r1, [r7, #48]	; 0x30
 800443a:	4649      	mov	r1, r9
 800443c:	414b      	adcs	r3, r1
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800444c:	4659      	mov	r1, fp
 800444e:	00cb      	lsls	r3, r1, #3
 8004450:	4651      	mov	r1, sl
 8004452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004456:	4651      	mov	r1, sl
 8004458:	00ca      	lsls	r2, r1, #3
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	4603      	mov	r3, r0
 8004460:	4642      	mov	r2, r8
 8004462:	189b      	adds	r3, r3, r2
 8004464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004468:	464b      	mov	r3, r9
 800446a:	460a      	mov	r2, r1
 800446c:	eb42 0303 	adc.w	r3, r2, r3
 8004470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004480:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004488:	460b      	mov	r3, r1
 800448a:	18db      	adds	r3, r3, r3
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
 800448e:	4613      	mov	r3, r2
 8004490:	eb42 0303 	adc.w	r3, r2, r3
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800449a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800449e:	f7fb fe9f 	bl	80001e0 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <UART_SetConfig+0x2d4>)
 80044a8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	2164      	movs	r1, #100	; 0x64
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	3332      	adds	r3, #50	; 0x32
 80044ba:	4a08      	ldr	r2, [pc, #32]	; (80044dc <UART_SetConfig+0x2d4>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 0207 	and.w	r2, r3, #7
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4422      	add	r2, r4
 80044ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044d0:	e106      	b.n	80046e0 <UART_SetConfig+0x4d8>
 80044d2:	bf00      	nop
 80044d4:	40011000 	.word	0x40011000
 80044d8:	40011400 	.word	0x40011400
 80044dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044f2:	4642      	mov	r2, r8
 80044f4:	464b      	mov	r3, r9
 80044f6:	1891      	adds	r1, r2, r2
 80044f8:	6239      	str	r1, [r7, #32]
 80044fa:	415b      	adcs	r3, r3
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
 80044fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004502:	4641      	mov	r1, r8
 8004504:	1854      	adds	r4, r2, r1
 8004506:	4649      	mov	r1, r9
 8004508:	eb43 0501 	adc.w	r5, r3, r1
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	00eb      	lsls	r3, r5, #3
 8004516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800451a:	00e2      	lsls	r2, r4, #3
 800451c:	4614      	mov	r4, r2
 800451e:	461d      	mov	r5, r3
 8004520:	4643      	mov	r3, r8
 8004522:	18e3      	adds	r3, r4, r3
 8004524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004528:	464b      	mov	r3, r9
 800452a:	eb45 0303 	adc.w	r3, r5, r3
 800452e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800453e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800454e:	4629      	mov	r1, r5
 8004550:	008b      	lsls	r3, r1, #2
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004558:	4621      	mov	r1, r4
 800455a:	008a      	lsls	r2, r1, #2
 800455c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004560:	f7fb fe3e 	bl	80001e0 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4b60      	ldr	r3, [pc, #384]	; (80046ec <UART_SetConfig+0x4e4>)
 800456a:	fba3 2302 	umull	r2, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	011c      	lsls	r4, r3, #4
 8004572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800457c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004580:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004584:	4642      	mov	r2, r8
 8004586:	464b      	mov	r3, r9
 8004588:	1891      	adds	r1, r2, r2
 800458a:	61b9      	str	r1, [r7, #24]
 800458c:	415b      	adcs	r3, r3
 800458e:	61fb      	str	r3, [r7, #28]
 8004590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004594:	4641      	mov	r1, r8
 8004596:	1851      	adds	r1, r2, r1
 8004598:	6139      	str	r1, [r7, #16]
 800459a:	4649      	mov	r1, r9
 800459c:	414b      	adcs	r3, r1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045ac:	4659      	mov	r1, fp
 80045ae:	00cb      	lsls	r3, r1, #3
 80045b0:	4651      	mov	r1, sl
 80045b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b6:	4651      	mov	r1, sl
 80045b8:	00ca      	lsls	r2, r1, #3
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	4642      	mov	r2, r8
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045c8:	464b      	mov	r3, r9
 80045ca:	460a      	mov	r2, r1
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80045de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045ec:	4649      	mov	r1, r9
 80045ee:	008b      	lsls	r3, r1, #2
 80045f0:	4641      	mov	r1, r8
 80045f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f6:	4641      	mov	r1, r8
 80045f8:	008a      	lsls	r2, r1, #2
 80045fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045fe:	f7fb fdef 	bl	80001e0 <__aeabi_uldivmod>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4611      	mov	r1, r2
 8004608:	4b38      	ldr	r3, [pc, #224]	; (80046ec <UART_SetConfig+0x4e4>)
 800460a:	fba3 2301 	umull	r2, r3, r3, r1
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2264      	movs	r2, #100	; 0x64
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	1acb      	subs	r3, r1, r3
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	3332      	adds	r3, #50	; 0x32
 800461c:	4a33      	ldr	r2, [pc, #204]	; (80046ec <UART_SetConfig+0x4e4>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004628:	441c      	add	r4, r3
 800462a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800462e:	2200      	movs	r2, #0
 8004630:	673b      	str	r3, [r7, #112]	; 0x70
 8004632:	677a      	str	r2, [r7, #116]	; 0x74
 8004634:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	1891      	adds	r1, r2, r2
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	415b      	adcs	r3, r3
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004648:	4641      	mov	r1, r8
 800464a:	1851      	adds	r1, r2, r1
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	4649      	mov	r1, r9
 8004650:	414b      	adcs	r3, r1
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004660:	4659      	mov	r1, fp
 8004662:	00cb      	lsls	r3, r1, #3
 8004664:	4651      	mov	r1, sl
 8004666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466a:	4651      	mov	r1, sl
 800466c:	00ca      	lsls	r2, r1, #3
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	4603      	mov	r3, r0
 8004674:	4642      	mov	r2, r8
 8004676:	189b      	adds	r3, r3, r2
 8004678:	66bb      	str	r3, [r7, #104]	; 0x68
 800467a:	464b      	mov	r3, r9
 800467c:	460a      	mov	r2, r1
 800467e:	eb42 0303 	adc.w	r3, r2, r3
 8004682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
 800468e:	667a      	str	r2, [r7, #100]	; 0x64
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800469c:	4649      	mov	r1, r9
 800469e:	008b      	lsls	r3, r1, #2
 80046a0:	4641      	mov	r1, r8
 80046a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a6:	4641      	mov	r1, r8
 80046a8:	008a      	lsls	r2, r1, #2
 80046aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046ae:	f7fb fd97 	bl	80001e0 <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <UART_SetConfig+0x4e4>)
 80046b8:	fba3 1302 	umull	r1, r3, r3, r2
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	2164      	movs	r1, #100	; 0x64
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	3332      	adds	r3, #50	; 0x32
 80046ca:	4a08      	ldr	r2, [pc, #32]	; (80046ec <UART_SetConfig+0x4e4>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	f003 020f 	and.w	r2, r3, #15
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4422      	add	r2, r4
 80046de:	609a      	str	r2, [r3, #8]
}
 80046e0:	bf00      	nop
 80046e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046e6:	46bd      	mov	sp, r7
 80046e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ec:	51eb851f 	.word	0x51eb851f

080046f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80046fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004702:	2b84      	cmp	r3, #132	; 0x84
 8004704:	d005      	beq.n	8004712 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	3303      	adds	r3, #3
 8004710:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004712:	68fb      	ldr	r3, [r7, #12]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004724:	f000 ffa0 	bl	8005668 <vTaskStartScheduler>
  
  return osOK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	bd80      	pop	{r7, pc}

0800472e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800472e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004730:	b089      	sub	sp, #36	; 0x24
 8004732:	af04      	add	r7, sp, #16
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <osThreadCreate+0x54>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685c      	ldr	r4, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691e      	ldr	r6, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ffc8 	bl	80046f0 <makeFreeRtosPriority>
 8004760:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800476a:	9202      	str	r2, [sp, #8]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	9100      	str	r1, [sp, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4632      	mov	r2, r6
 8004774:	4629      	mov	r1, r5
 8004776:	4620      	mov	r0, r4
 8004778:	f000 fd98 	bl	80052ac <xTaskCreateStatic>
 800477c:	4603      	mov	r3, r0
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e01c      	b.n	80047bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685c      	ldr	r4, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800478e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ffaa 	bl	80046f0 <makeFreeRtosPriority>
 800479c:	4602      	mov	r2, r0
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	9200      	str	r2, [sp, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	4632      	mov	r2, r6
 80047aa:	4629      	mov	r1, r5
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 fdda 	bl	8005366 <xTaskCreate>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d001      	beq.n	80047bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <osDelay+0x16>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	e000      	b.n	80047de <osDelay+0x18>
 80047dc:	2301      	movs	r3, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 ff0e 	bl	8005600 <vTaskDelay>
  
  return osOK;
 80047e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4619      	mov	r1, r3
 8004804:	2001      	movs	r0, #1
 8004806:	f000 fa2a 	bl	8004c5e <xQueueCreateMutexStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	e003      	b.n	8004816 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800480e:	2001      	movs	r0, #1
 8004810:	f000 fa0d 	bl	8004c2e <xQueueCreateMutex>
 8004814:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f103 0208 	add.w	r2, r3, #8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f04f 32ff 	mov.w	r2, #4294967295
 8004836:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f103 0208 	add.w	r2, r3, #8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 0208 	add.w	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d103      	bne.n	80048e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e00c      	b.n	80048fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3308      	adds	r3, #8
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e002      	b.n	80048ee <vListInsert+0x2e>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d2f6      	bcs.n	80048e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6852      	ldr	r2, [r2, #4]
 8004952:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d103      	bne.n	8004966 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049b2:	f001 fdb7 	bl	8006524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	441a      	add	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	3b01      	subs	r3, #1
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	441a      	add	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d114      	bne.n	8004a32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01a      	beq.n	8004a46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3310      	adds	r3, #16
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 f879 	bl	8005b0c <xTaskRemoveFromEventList>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d012      	beq.n	8004a46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <xQueueGenericReset+0xcc>)
 8004a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	e009      	b.n	8004a46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3310      	adds	r3, #16
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fef1 	bl	800481e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3324      	adds	r3, #36	; 0x24
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff feec 	bl	800481e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a46:	f001 fd9d 	bl	8006584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a4a:	2301      	movs	r3, #1
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08e      	sub	sp, #56	; 0x38
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <xQueueGenericCreateStatic+0x52>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <xQueueGenericCreateStatic+0x56>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <xQueueGenericCreateStatic+0x58>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	623b      	str	r3, [r7, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <xQueueGenericCreateStatic+0x7e>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <xQueueGenericCreateStatic+0x82>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <xQueueGenericCreateStatic+0x84>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	61fb      	str	r3, [r7, #28]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004af6:	2348      	movs	r3, #72	; 0x48
 8004af8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b48      	cmp	r3, #72	; 0x48
 8004afe:	d00a      	beq.n	8004b16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	61bb      	str	r3, [r7, #24]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4613      	mov	r3, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f83f 	bl	8004bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3730      	adds	r7, #48	; 0x30
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	613b      	str	r3, [r7, #16]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3348      	adds	r3, #72	; 0x48
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 fdb1 	bl	80066e8 <pvPortMalloc>
 8004b86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d011      	beq.n	8004bb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	3348      	adds	r3, #72	; 0x48
 8004b96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ba0:	79fa      	ldrb	r2, [r7, #7]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f805 	bl	8004bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
	}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d103      	bne.n	8004bd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e002      	b.n	8004bde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bea:	2101      	movs	r1, #1
 8004bec:	69b8      	ldr	r0, [r7, #24]
 8004bee:	f7ff fecb 	bl	8004988 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f837 	bl	8004c94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	4603      	mov	r3, r0
 8004c36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6939      	ldr	r1, [r7, #16]
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f7ff ff7e 	bl	8004b48 <xQueueGenericCreate>
 8004c4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff ffd3 	bl	8004bfa <prvInitialiseMutex>

		return xNewQueue;
 8004c54:	68fb      	ldr	r3, [r7, #12]
	}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	4603      	mov	r3, r0
 8004c66:	6039      	str	r1, [r7, #0]
 8004c68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	6939      	ldr	r1, [r7, #16]
 8004c7c:	6978      	ldr	r0, [r7, #20]
 8004c7e:	f7ff feeb 	bl	8004a58 <xQueueGenericCreateStatic>
 8004c82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff ffb8 	bl	8004bfa <prvInitialiseMutex>

		return xNewQueue;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
	}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	; 0x38
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericSend+0x32>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d103      	bne.n	8004cd4 <xQueueGenericSend+0x40>
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <xQueueGenericSend+0x44>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <xQueueGenericSend+0x46>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <xQueueGenericSend+0x60>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSend+0x6e>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <xQueueGenericSend+0x72>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericSend+0x74>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	623b      	str	r3, [r7, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d22:	f001 f8b3 	bl	8005e8c <xTaskGetSchedulerState>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <xQueueGenericSend+0x9e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <xQueueGenericSend+0xa2>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <xQueueGenericSend+0xa4>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61fb      	str	r3, [r7, #28]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d52:	f001 fbe7 	bl	8006524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <xQueueGenericSend+0xd4>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d129      	bne.n	8004dbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d6e:	f000 f9b3 	bl	80050d8 <prvCopyDataToQueue>
 8004d72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	3324      	adds	r3, #36	; 0x24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fec3 	bl	8005b0c <xTaskRemoveFromEventList>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d8c:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <xQueueGenericSend+0x1f8>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	e00a      	b.n	8004db4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004da4:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <xQueueGenericSend+0x1f8>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004db4:	f001 fbe6 	bl	8006584 <vPortExitCritical>
				return pdPASS;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e063      	b.n	8004e84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dc2:	f001 fbdf 	bl	8006584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e05c      	b.n	8004e84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fefb 	bl	8005bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dde:	f001 fbd1 	bl	8006584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004de2:	f000 fcab 	bl	800573c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004de6:	f001 fb9d 	bl	8006524 <vPortEnterCritical>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d103      	bne.n	8004e00 <xQueueGenericSend+0x16c>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d103      	bne.n	8004e16 <xQueueGenericSend+0x182>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e16:	f001 fbb5 	bl	8006584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e1a:	1d3a      	adds	r2, r7, #4
 8004e1c:	f107 0314 	add.w	r3, r7, #20
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 feea 	bl	8005bfc <xTaskCheckForTimeOut>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d124      	bne.n	8004e78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e30:	f000 fa24 	bl	800527c <prvIsQueueFull>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d018      	beq.n	8004e6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	3310      	adds	r3, #16
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fe3e 	bl	8005ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4a:	f000 f9af 	bl	80051ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e4e:	f000 fc83 	bl	8005758 <xTaskResumeAll>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f47f af7c 	bne.w	8004d52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <xQueueGenericSend+0x1f8>)
 8004e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	e772      	b.n	8004d52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e6e:	f000 f99d 	bl	80051ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e72:	f000 fc71 	bl	8005758 <xTaskResumeAll>
 8004e76:	e76c      	b.n	8004d52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7a:	f000 f997 	bl	80051ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e7e:	f000 fc6b 	bl	8005758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3738      	adds	r7, #56	; 0x38
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08e      	sub	sp, #56	; 0x38
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	623b      	str	r3, [r7, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	61fb      	str	r3, [r7, #28]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ee0:	f000 ffd4 	bl	8005e8c <xTaskGetSchedulerState>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <xQueueSemaphoreTake+0x60>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <xQueueSemaphoreTake+0x64>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <xQueueSemaphoreTake+0x66>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	61bb      	str	r3, [r7, #24]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f10:	f001 fb08 	bl	8006524 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d024      	beq.n	8004f6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	1e5a      	subs	r2, r3, #1
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f30:	f001 f954 	bl	80061dc <pvTaskIncrementMutexHeldCount>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00f      	beq.n	8004f62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	3310      	adds	r3, #16
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fde0 	bl	8005b0c <xTaskRemoveFromEventList>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f52:	4b54      	ldr	r3, [pc, #336]	; (80050a4 <xQueueSemaphoreTake+0x214>)
 8004f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f62:	f001 fb0f 	bl	8006584 <vPortExitCritical>
				return pdPASS;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e097      	b.n	800509a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d111      	bne.n	8004f94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	617b      	str	r3, [r7, #20]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f8c:	f001 fafa 	bl	8006584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e082      	b.n	800509a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f9a:	f107 030c 	add.w	r3, r7, #12
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fe16 	bl	8005bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fa8:	f001 faec 	bl	8006584 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fac:	f000 fbc6 	bl	800573c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb0:	f001 fab8 	bl	8006524 <vPortEnterCritical>
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fba:	b25b      	sxtb	r3, r3
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d103      	bne.n	8004fca <xQueueSemaphoreTake+0x13a>
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d103      	bne.n	8004fe0 <xQueueSemaphoreTake+0x150>
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe0:	f001 fad0 	bl	8006584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fe4:	463a      	mov	r2, r7
 8004fe6:	f107 030c 	add.w	r3, r7, #12
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fe05 	bl	8005bfc <xTaskCheckForTimeOut>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d132      	bne.n	800505e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ffa:	f000 f929 	bl	8005250 <prvIsQueueEmpty>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d026      	beq.n	8005052 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800500c:	f001 fa8a 	bl	8006524 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 ff57 	bl	8005ec8 <xTaskPriorityInherit>
 800501a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800501c:	f001 fab2 	bl	8006584 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	3324      	adds	r3, #36	; 0x24
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fd4b 	bl	8005ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800502e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005030:	f000 f8bc 	bl	80051ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005034:	f000 fb90 	bl	8005758 <xTaskResumeAll>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	f47f af68 	bne.w	8004f10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005040:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <xQueueSemaphoreTake+0x214>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	e75e      	b.n	8004f10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005054:	f000 f8aa 	bl	80051ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005058:	f000 fb7e 	bl	8005758 <xTaskResumeAll>
 800505c:	e758      	b.n	8004f10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800505e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005060:	f000 f8a4 	bl	80051ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005064:	f000 fb78 	bl	8005758 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800506a:	f000 f8f1 	bl	8005250 <prvIsQueueEmpty>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f43f af4d 	beq.w	8004f10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800507c:	f001 fa52 	bl	8006524 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005082:	f000 f811 	bl	80050a8 <prvGetDisinheritPriorityAfterTimeout>
 8005086:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800508e:	4618      	mov	r0, r3
 8005090:	f001 f816 	bl	80060c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005094:	f001 fa76 	bl	8006584 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005098:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800509a:	4618      	mov	r0, r3
 800509c:	3738      	adds	r7, #56	; 0x38
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d006      	beq.n	80050c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1c3 0307 	rsb	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e001      	b.n	80050ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80050ca:	68fb      	ldr	r3, [r7, #12]
	}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10d      	bne.n	8005112 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d14d      	bne.n	800519a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 ff56 	bl	8005fb4 <xTaskPriorityDisinherit>
 8005108:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	e043      	b.n	800519a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d119      	bne.n	800514c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6858      	ldr	r0, [r3, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	461a      	mov	r2, r3
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	f001 fd4e 	bl	8006bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d32b      	bcc.n	800519a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	e026      	b.n	800519a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68d8      	ldr	r0, [r3, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	461a      	mov	r2, r3
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	f001 fd34 	bl	8006bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	425b      	negs	r3, r3
 8005166:	441a      	add	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d207      	bcs.n	8005188 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	425b      	negs	r3, r3
 8005182:	441a      	add	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d105      	bne.n	800519a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	3b01      	subs	r3, #1
 8005198:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051a2:	697b      	ldr	r3, [r7, #20]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051b4:	f001 f9b6 	bl	8006524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051c0:	e011      	b.n	80051e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d012      	beq.n	80051f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fc9c 	bl	8005b0c <xTaskRemoveFromEventList>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051da:	f000 fd71 	bl	8005cc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	dce9      	bgt.n	80051c2 <prvUnlockQueue+0x16>
 80051ee:	e000      	b.n	80051f2 <prvUnlockQueue+0x46>
					break;
 80051f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051fa:	f001 f9c3 	bl	8006584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051fe:	f001 f991 	bl	8006524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005208:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800520a:	e011      	b.n	8005230 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d012      	beq.n	800523a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3310      	adds	r3, #16
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fc77 	bl	8005b0c <xTaskRemoveFromEventList>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005224:	f000 fd4c 	bl	8005cc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005228:	7bbb      	ldrb	r3, [r7, #14]
 800522a:	3b01      	subs	r3, #1
 800522c:	b2db      	uxtb	r3, r3
 800522e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005234:	2b00      	cmp	r3, #0
 8005236:	dce9      	bgt.n	800520c <prvUnlockQueue+0x60>
 8005238:	e000      	b.n	800523c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800523a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	22ff      	movs	r2, #255	; 0xff
 8005240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005244:	f001 f99e 	bl	8006584 <vPortExitCritical>
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005258:	f001 f964 	bl	8006524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005264:	2301      	movs	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e001      	b.n	800526e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800526e:	f001 f989 	bl	8006584 <vPortExitCritical>

	return xReturn;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005284:	f001 f94e 	bl	8006524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	429a      	cmp	r2, r3
 8005292:	d102      	bne.n	800529a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e001      	b.n	800529e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800529e:	f001 f971 	bl	8006584 <vPortExitCritical>

	return xReturn;
 80052a2:	68fb      	ldr	r3, [r7, #12]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08e      	sub	sp, #56	; 0x38
 80052b0:	af04      	add	r7, sp, #16
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	623b      	str	r3, [r7, #32]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61fb      	str	r3, [r7, #28]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052f2:	23a0      	movs	r3, #160	; 0xa0
 80052f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2ba0      	cmp	r3, #160	; 0xa0
 80052fa:	d00a      	beq.n	8005312 <xTaskCreateStatic+0x66>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61bb      	str	r3, [r7, #24]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005312:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01e      	beq.n	8005358 <xTaskCreateStatic+0xac>
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005328:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	2202      	movs	r2, #2
 800532e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005332:	2300      	movs	r3, #0
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	9302      	str	r3, [sp, #8]
 800533a:	f107 0314 	add.w	r3, r7, #20
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f850 	bl	80053f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005352:	f000 f8eb 	bl	800552c <prvAddNewTaskToReadyList>
 8005356:	e001      	b.n	800535c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800535c:	697b      	ldr	r3, [r7, #20]
	}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	; 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005366:	b580      	push	{r7, lr}
 8005368:	b08c      	sub	sp, #48	; 0x30
 800536a:	af04      	add	r7, sp, #16
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f001 f9b4 	bl	80066e8 <pvPortMalloc>
 8005380:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005388:	20a0      	movs	r0, #160	; 0xa0
 800538a:	f001 f9ad 	bl	80066e8 <pvPortMalloc>
 800538e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
 800539c:	e005      	b.n	80053aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800539e:	6978      	ldr	r0, [r7, #20]
 80053a0:	f001 fa6e 	bl	8006880 <vPortFree>
 80053a4:	e001      	b.n	80053aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d017      	beq.n	80053e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	2300      	movs	r3, #0
 80053bc:	9303      	str	r3, [sp, #12]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	9302      	str	r3, [sp, #8]
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f80e 	bl	80053f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053d4:	69f8      	ldr	r0, [r7, #28]
 80053d6:	f000 f8a9 	bl	800552c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053da:	2301      	movs	r3, #1
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e002      	b.n	80053e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053e6:	69bb      	ldr	r3, [r7, #24]
	}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005408:	3b01      	subs	r3, #1
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f023 0307 	bic.w	r3, r3, #7
 8005416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	617b      	str	r3, [r7, #20]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01f      	beq.n	800547e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	e012      	b.n	800546a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	7819      	ldrb	r1, [r3, #0]
 800544c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	3334      	adds	r3, #52	; 0x34
 8005454:	460a      	mov	r2, r1
 8005456:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	3301      	adds	r3, #1
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d9e9      	bls.n	8005444 <prvInitialiseNewTask+0x54>
 8005470:	e000      	b.n	8005474 <prvInitialiseNewTask+0x84>
			{
				break;
 8005472:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800547c:	e003      	b.n	8005486 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	2b06      	cmp	r3, #6
 800548a:	d901      	bls.n	8005490 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800548c:	2306      	movs	r3, #6
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005494:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	2200      	movs	r2, #0
 80054a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff f9d9 	bl	800485e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	3318      	adds	r3, #24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f9d4 	bl	800485e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f1c3 0207 	rsb	r2, r3, #7
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	334c      	adds	r3, #76	; 0x4c
 80054e0:	224c      	movs	r2, #76	; 0x4c
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fae9 	bl	8006abc <memset>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <prvInitialiseNewTask+0x130>)
 80054ee:	651a      	str	r2, [r3, #80]	; 0x50
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <prvInitialiseNewTask+0x134>)
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <prvInitialiseNewTask+0x138>)
 80054fa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	68f9      	ldr	r1, [r7, #12]
 8005500:	69b8      	ldr	r0, [r7, #24]
 8005502:	f000 fee5 	bl	80062d0 <pxPortInitialiseStack>
 8005506:	4602      	mov	r2, r0
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005518:	bf00      	nop
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20004120 	.word	0x20004120
 8005524:	20004188 	.word	0x20004188
 8005528:	200041f0 	.word	0x200041f0

0800552c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005534:	f000 fff6 	bl	8006524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005538:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <prvAddNewTaskToReadyList+0xb8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a29      	ldr	r2, [pc, #164]	; (80055e4 <prvAddNewTaskToReadyList+0xb8>)
 8005540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005542:	4b29      	ldr	r3, [pc, #164]	; (80055e8 <prvAddNewTaskToReadyList+0xbc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <prvAddNewTaskToReadyList+0xbc>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005550:	4b24      	ldr	r3, [pc, #144]	; (80055e4 <prvAddNewTaskToReadyList+0xb8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d110      	bne.n	800557a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005558:	f000 fbd6 	bl	8005d08 <prvInitialiseTaskLists>
 800555c:	e00d      	b.n	800557a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <prvAddNewTaskToReadyList+0xc0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <prvAddNewTaskToReadyList+0xbc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	429a      	cmp	r2, r3
 8005572:	d802      	bhi.n	800557a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005574:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <prvAddNewTaskToReadyList+0xbc>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <prvAddNewTaskToReadyList+0xc4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <prvAddNewTaskToReadyList+0xc4>)
 8005582:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	2201      	movs	r2, #1
 800558a:	409a      	lsls	r2, r3
 800558c:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <prvAddNewTaskToReadyList+0xc8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <prvAddNewTaskToReadyList+0xc8>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <prvAddNewTaskToReadyList+0xcc>)
 80055a4:	441a      	add	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f7ff f963 	bl	8004878 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055b2:	f000 ffe7 	bl	8006584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <prvAddNewTaskToReadyList+0xc0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00e      	beq.n	80055dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <prvAddNewTaskToReadyList+0xbc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d207      	bcs.n	80055dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <prvAddNewTaskToReadyList+0xd0>)
 80055ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	200004cc 	.word	0x200004cc
 80055e8:	200003cc 	.word	0x200003cc
 80055ec:	200004d8 	.word	0x200004d8
 80055f0:	200004e8 	.word	0x200004e8
 80055f4:	200004d4 	.word	0x200004d4
 80055f8:	200003d0 	.word	0x200003d0
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d017      	beq.n	8005642 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <vTaskDelay+0x60>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <vTaskDelay+0x30>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	60bb      	str	r3, [r7, #8]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005630:	f000 f884 	bl	800573c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005634:	2100      	movs	r1, #0
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fde4 	bl	8006204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800563c:	f000 f88c 	bl	8005758 <xTaskResumeAll>
 8005640:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d107      	bne.n	8005658 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <vTaskDelay+0x64>)
 800564a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	200004f4 	.word	0x200004f4
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005676:	463a      	mov	r2, r7
 8005678:	1d39      	adds	r1, r7, #4
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f7fa ff2c 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	9202      	str	r2, [sp, #8]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2300      	movs	r3, #0
 8005694:	460a      	mov	r2, r1
 8005696:	4921      	ldr	r1, [pc, #132]	; (800571c <vTaskStartScheduler+0xb4>)
 8005698:	4821      	ldr	r0, [pc, #132]	; (8005720 <vTaskStartScheduler+0xb8>)
 800569a:	f7ff fe07 	bl	80052ac <xTaskCreateStatic>
 800569e:	4603      	mov	r3, r0
 80056a0:	4a20      	ldr	r2, [pc, #128]	; (8005724 <vTaskStartScheduler+0xbc>)
 80056a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056a4:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <vTaskStartScheduler+0xbc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e001      	b.n	80056b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d11b      	bne.n	80056f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	613b      	str	r3, [r7, #16]
}
 80056ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056d0:	4b15      	ldr	r3, [pc, #84]	; (8005728 <vTaskStartScheduler+0xc0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	334c      	adds	r3, #76	; 0x4c
 80056d6:	4a15      	ldr	r2, [pc, #84]	; (800572c <vTaskStartScheduler+0xc4>)
 80056d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <vTaskStartScheduler+0xc8>)
 80056dc:	f04f 32ff 	mov.w	r2, #4294967295
 80056e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <vTaskStartScheduler+0xcc>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056e8:	4b13      	ldr	r3, [pc, #76]	; (8005738 <vTaskStartScheduler+0xd0>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056ee:	f000 fe77 	bl	80063e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056f2:	e00e      	b.n	8005712 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d10a      	bne.n	8005712 <vTaskStartScheduler+0xaa>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
}
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <vTaskStartScheduler+0xa8>
}
 8005712:	bf00      	nop
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	08006d20 	.word	0x08006d20
 8005720:	08005cd9 	.word	0x08005cd9
 8005724:	200004f0 	.word	0x200004f0
 8005728:	200003cc 	.word	0x200003cc
 800572c:	2000005c 	.word	0x2000005c
 8005730:	200004ec 	.word	0x200004ec
 8005734:	200004d8 	.word	0x200004d8
 8005738:	200004d0 	.word	0x200004d0

0800573c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <vTaskSuspendAll+0x18>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	4a03      	ldr	r2, [pc, #12]	; (8005754 <vTaskSuspendAll+0x18>)
 8005748:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	200004f4 	.word	0x200004f4

08005758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005766:	4b41      	ldr	r3, [pc, #260]	; (800586c <xTaskResumeAll+0x114>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <xTaskResumeAll+0x2c>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005784:	f000 fece 	bl	8006524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005788:	4b38      	ldr	r3, [pc, #224]	; (800586c <xTaskResumeAll+0x114>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	4a37      	ldr	r2, [pc, #220]	; (800586c <xTaskResumeAll+0x114>)
 8005790:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005792:	4b36      	ldr	r3, [pc, #216]	; (800586c <xTaskResumeAll+0x114>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d161      	bne.n	800585e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800579a:	4b35      	ldr	r3, [pc, #212]	; (8005870 <xTaskResumeAll+0x118>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d05d      	beq.n	800585e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a2:	e02e      	b.n	8005802 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a4:	4b33      	ldr	r3, [pc, #204]	; (8005874 <xTaskResumeAll+0x11c>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3318      	adds	r3, #24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff f8be 	bl	8004932 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff f8b9 	bl	8004932 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	2201      	movs	r2, #1
 80057c6:	409a      	lsls	r2, r3
 80057c8:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <xTaskResumeAll+0x120>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <xTaskResumeAll+0x120>)
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4a27      	ldr	r2, [pc, #156]	; (800587c <xTaskResumeAll+0x124>)
 80057e0:	441a      	add	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7ff f845 	bl	8004878 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	4b23      	ldr	r3, [pc, #140]	; (8005880 <xTaskResumeAll+0x128>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80057fc:	4b21      	ldr	r3, [pc, #132]	; (8005884 <xTaskResumeAll+0x12c>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <xTaskResumeAll+0x11c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1cc      	bne.n	80057a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005810:	f000 fb1c 	bl	8005e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005814:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <xTaskResumeAll+0x130>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005820:	f000 f836 	bl	8005890 <xTaskIncrementTick>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800582a:	4b16      	ldr	r3, [pc, #88]	; (8005884 <xTaskResumeAll+0x12c>)
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3b01      	subs	r3, #1
 8005834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f1      	bne.n	8005820 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800583c:	4b12      	ldr	r3, [pc, #72]	; (8005888 <xTaskResumeAll+0x130>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <xTaskResumeAll+0x12c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800584a:	2301      	movs	r3, #1
 800584c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800584e:	4b0f      	ldr	r3, [pc, #60]	; (800588c <xTaskResumeAll+0x134>)
 8005850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800585e:	f000 fe91 	bl	8006584 <vPortExitCritical>

	return xAlreadyYielded;
 8005862:	68bb      	ldr	r3, [r7, #8]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	200004f4 	.word	0x200004f4
 8005870:	200004cc 	.word	0x200004cc
 8005874:	2000048c 	.word	0x2000048c
 8005878:	200004d4 	.word	0x200004d4
 800587c:	200003d0 	.word	0x200003d0
 8005880:	200003cc 	.word	0x200003cc
 8005884:	200004e0 	.word	0x200004e0
 8005888:	200004dc 	.word	0x200004dc
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589a:	4b4e      	ldr	r3, [pc, #312]	; (80059d4 <xTaskIncrementTick+0x144>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 808e 	bne.w	80059c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058a4:	4b4c      	ldr	r3, [pc, #304]	; (80059d8 <xTaskIncrementTick+0x148>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058ac:	4a4a      	ldr	r2, [pc, #296]	; (80059d8 <xTaskIncrementTick+0x148>)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d120      	bne.n	80058fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b8:	4b48      	ldr	r3, [pc, #288]	; (80059dc <xTaskIncrementTick+0x14c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	603b      	str	r3, [r7, #0]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xTaskIncrementTick+0x46>
 80058d8:	4b40      	ldr	r3, [pc, #256]	; (80059dc <xTaskIncrementTick+0x14c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	4b40      	ldr	r3, [pc, #256]	; (80059e0 <xTaskIncrementTick+0x150>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a3e      	ldr	r2, [pc, #248]	; (80059dc <xTaskIncrementTick+0x14c>)
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4a3e      	ldr	r2, [pc, #248]	; (80059e0 <xTaskIncrementTick+0x150>)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b3d      	ldr	r3, [pc, #244]	; (80059e4 <xTaskIncrementTick+0x154>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4a3c      	ldr	r2, [pc, #240]	; (80059e4 <xTaskIncrementTick+0x154>)
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	f000 faa9 	bl	8005e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058fa:	4b3b      	ldr	r3, [pc, #236]	; (80059e8 <xTaskIncrementTick+0x158>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d348      	bcc.n	8005996 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005904:	4b35      	ldr	r3, [pc, #212]	; (80059dc <xTaskIncrementTick+0x14c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590e:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <xTaskIncrementTick+0x158>)
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	601a      	str	r2, [r3, #0]
					break;
 8005916:	e03e      	b.n	8005996 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005918:	4b30      	ldr	r3, [pc, #192]	; (80059dc <xTaskIncrementTick+0x14c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d203      	bcs.n	8005938 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005930:	4a2d      	ldr	r2, [pc, #180]	; (80059e8 <xTaskIncrementTick+0x158>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005936:	e02e      	b.n	8005996 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3304      	adds	r3, #4
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fff8 	bl	8004932 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	3318      	adds	r3, #24
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe ffef 	bl	8004932 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	2201      	movs	r2, #1
 800595a:	409a      	lsls	r2, r3
 800595c:	4b23      	ldr	r3, [pc, #140]	; (80059ec <xTaskIncrementTick+0x15c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4313      	orrs	r3, r2
 8005962:	4a22      	ldr	r2, [pc, #136]	; (80059ec <xTaskIncrementTick+0x15c>)
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <xTaskIncrementTick+0x160>)
 8005974:	441a      	add	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	3304      	adds	r3, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f7fe ff7b 	bl	8004878 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005986:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <xTaskIncrementTick+0x164>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	429a      	cmp	r2, r3
 800598e:	d3b9      	bcc.n	8005904 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005994:	e7b6      	b.n	8005904 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005996:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <xTaskIncrementTick+0x164>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	4914      	ldr	r1, [pc, #80]	; (80059f0 <xTaskIncrementTick+0x160>)
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d901      	bls.n	80059b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <xTaskIncrementTick+0x168>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80059ba:	2301      	movs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e004      	b.n	80059ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059c0:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <xTaskIncrementTick+0x16c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	4a0d      	ldr	r2, [pc, #52]	; (80059fc <xTaskIncrementTick+0x16c>)
 80059c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059ca:	697b      	ldr	r3, [r7, #20]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	200004f4 	.word	0x200004f4
 80059d8:	200004d0 	.word	0x200004d0
 80059dc:	20000484 	.word	0x20000484
 80059e0:	20000488 	.word	0x20000488
 80059e4:	200004e4 	.word	0x200004e4
 80059e8:	200004ec 	.word	0x200004ec
 80059ec:	200004d4 	.word	0x200004d4
 80059f0:	200003d0 	.word	0x200003d0
 80059f4:	200003cc 	.word	0x200003cc
 80059f8:	200004e0 	.word	0x200004e0
 80059fc:	200004dc 	.word	0x200004dc

08005a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a06:	4b29      	ldr	r3, [pc, #164]	; (8005aac <vTaskSwitchContext+0xac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a0e:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <vTaskSwitchContext+0xb0>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a14:	e044      	b.n	8005aa0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005a16:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <vTaskSwitchContext+0xb0>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <vTaskSwitchContext+0xb4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	fab3 f383 	clz	r3, r3
 8005a28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a2a:	7afb      	ldrb	r3, [r7, #11]
 8005a2c:	f1c3 031f 	rsb	r3, r3, #31
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	4921      	ldr	r1, [pc, #132]	; (8005ab8 <vTaskSwitchContext+0xb8>)
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	607b      	str	r3, [r7, #4]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <vTaskSwitchContext+0x5a>
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <vTaskSwitchContext+0xb8>)
 8005a68:	4413      	add	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d104      	bne.n	8005a8c <vTaskSwitchContext+0x8c>
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <vTaskSwitchContext+0xbc>)
 8005a94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <vTaskSwitchContext+0xbc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	334c      	adds	r3, #76	; 0x4c
 8005a9c:	4a08      	ldr	r2, [pc, #32]	; (8005ac0 <vTaskSwitchContext+0xc0>)
 8005a9e:	6013      	str	r3, [r2, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	200004f4 	.word	0x200004f4
 8005ab0:	200004e0 	.word	0x200004e0
 8005ab4:	200004d4 	.word	0x200004d4
 8005ab8:	200003d0 	.word	0x200003d0
 8005abc:	200003cc 	.word	0x200003cc
 8005ac0:	2000005c 	.word	0x2000005c

08005ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60fb      	str	r3, [r7, #12]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <vTaskPlaceOnEventList+0x44>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3318      	adds	r3, #24
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fe fee4 	bl	80048c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005af8:	2101      	movs	r1, #1
 8005afa:	6838      	ldr	r0, [r7, #0]
 8005afc:	f000 fb82 	bl	8006204 <prvAddCurrentTaskToDelayedList>
}
 8005b00:	bf00      	nop
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	200003cc 	.word	0x200003cc

08005b0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60fb      	str	r3, [r7, #12]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	3318      	adds	r3, #24
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fef8 	bl	8004932 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b42:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <xTaskRemoveFromEventList+0xac>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d11c      	bne.n	8005b84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe feef 	bl	8004932 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	2201      	movs	r2, #1
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <xTaskRemoveFromEventList+0xb0>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <xTaskRemoveFromEventList+0xb0>)
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <xTaskRemoveFromEventList+0xb4>)
 8005b74:	441a      	add	r2, r3
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f7fe fe7b 	bl	8004878 <vListInsertEnd>
 8005b82:	e005      	b.n	8005b90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	3318      	adds	r3, #24
 8005b88:	4619      	mov	r1, r3
 8005b8a:	480e      	ldr	r0, [pc, #56]	; (8005bc4 <xTaskRemoveFromEventList+0xb8>)
 8005b8c:	f7fe fe74 	bl	8004878 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <xTaskRemoveFromEventList+0xbc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d905      	bls.n	8005baa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <xTaskRemoveFromEventList+0xc0>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e001      	b.n	8005bae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bae:	697b      	ldr	r3, [r7, #20]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	200004f4 	.word	0x200004f4
 8005bbc:	200004d4 	.word	0x200004d4
 8005bc0:	200003d0 	.word	0x200003d0
 8005bc4:	2000048c 	.word	0x2000048c
 8005bc8:	200003cc 	.word	0x200003cc
 8005bcc:	200004e0 	.word	0x200004e0

08005bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <vTaskInternalSetTimeOutState+0x24>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <vTaskInternalSetTimeOutState+0x28>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	605a      	str	r2, [r3, #4]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	200004e4 	.word	0x200004e4
 8005bf8:	200004d0 	.word	0x200004d0

08005bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	613b      	str	r3, [r7, #16]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	60fb      	str	r3, [r7, #12]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c3e:	f000 fc71 	bl	8006524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c42:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <xTaskCheckForTimeOut+0xbc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d102      	bne.n	8005c62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e023      	b.n	8005caa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <xTaskCheckForTimeOut+0xc0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d007      	beq.n	8005c7e <xTaskCheckForTimeOut+0x82>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d302      	bcc.n	8005c7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	e015      	b.n	8005caa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d20b      	bcs.n	8005ca0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad2      	subs	r2, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff9b 	bl	8005bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e004      	b.n	8005caa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005caa:	f000 fc6b 	bl	8006584 <vPortExitCritical>

	return xReturn;
 8005cae:	69fb      	ldr	r3, [r7, #28]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200004d0 	.word	0x200004d0
 8005cbc:	200004e4 	.word	0x200004e4

08005cc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <vTaskMissedYield+0x14>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	200004e0 	.word	0x200004e0

08005cd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ce0:	f000 f852 	bl	8005d88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <prvIdleTask+0x28>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d9f9      	bls.n	8005ce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <prvIdleTask+0x2c>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cfc:	e7f0      	b.n	8005ce0 <prvIdleTask+0x8>
 8005cfe:	bf00      	nop
 8005d00:	200003d0 	.word	0x200003d0
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d0e:	2300      	movs	r3, #0
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	e00c      	b.n	8005d2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <prvInitialiseTaskLists+0x60>)
 8005d20:	4413      	add	r3, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fd7b 	bl	800481e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b06      	cmp	r3, #6
 8005d32:	d9ef      	bls.n	8005d14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d34:	480d      	ldr	r0, [pc, #52]	; (8005d6c <prvInitialiseTaskLists+0x64>)
 8005d36:	f7fe fd72 	bl	800481e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d3a:	480d      	ldr	r0, [pc, #52]	; (8005d70 <prvInitialiseTaskLists+0x68>)
 8005d3c:	f7fe fd6f 	bl	800481e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d40:	480c      	ldr	r0, [pc, #48]	; (8005d74 <prvInitialiseTaskLists+0x6c>)
 8005d42:	f7fe fd6c 	bl	800481e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d46:	480c      	ldr	r0, [pc, #48]	; (8005d78 <prvInitialiseTaskLists+0x70>)
 8005d48:	f7fe fd69 	bl	800481e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d4c:	480b      	ldr	r0, [pc, #44]	; (8005d7c <prvInitialiseTaskLists+0x74>)
 8005d4e:	f7fe fd66 	bl	800481e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <prvInitialiseTaskLists+0x78>)
 8005d54:	4a05      	ldr	r2, [pc, #20]	; (8005d6c <prvInitialiseTaskLists+0x64>)
 8005d56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <prvInitialiseTaskLists+0x7c>)
 8005d5a:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <prvInitialiseTaskLists+0x68>)
 8005d5c:	601a      	str	r2, [r3, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200003d0 	.word	0x200003d0
 8005d6c:	2000045c 	.word	0x2000045c
 8005d70:	20000470 	.word	0x20000470
 8005d74:	2000048c 	.word	0x2000048c
 8005d78:	200004a0 	.word	0x200004a0
 8005d7c:	200004b8 	.word	0x200004b8
 8005d80:	20000484 	.word	0x20000484
 8005d84:	20000488 	.word	0x20000488

08005d88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d8e:	e019      	b.n	8005dc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d90:	f000 fbc8 	bl	8006524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d94:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <prvCheckTasksWaitingTermination+0x50>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fe fdc6 	bl	8004932 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <prvCheckTasksWaitingTermination+0x54>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <prvCheckTasksWaitingTermination+0x54>)
 8005dae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <prvCheckTasksWaitingTermination+0x58>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <prvCheckTasksWaitingTermination+0x58>)
 8005db8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dba:	f000 fbe3 	bl	8006584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f810 	bl	8005de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <prvCheckTasksWaitingTermination+0x58>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e1      	bne.n	8005d90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200004a0 	.word	0x200004a0
 8005ddc:	200004cc 	.word	0x200004cc
 8005de0:	200004b4 	.word	0x200004b4

08005de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	334c      	adds	r3, #76	; 0x4c
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fe6b 	bl	8006acc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d108      	bne.n	8005e12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fd3b 	bl	8006880 <vPortFree>
				vPortFree( pxTCB );
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd38 	bl	8006880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e10:	e018      	b.n	8005e44 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d103      	bne.n	8005e24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fd2f 	bl	8006880 <vPortFree>
	}
 8005e22:	e00f      	b.n	8005e44 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d00a      	beq.n	8005e44 <prvDeleteTCB+0x60>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <prvDeleteTCB+0x5e>
	}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <prvResetNextTaskUnblockTime+0x38>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <prvResetNextTaskUnblockTime+0x3c>)
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e64:	e008      	b.n	8005e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <prvResetNextTaskUnblockTime+0x38>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <prvResetNextTaskUnblockTime+0x3c>)
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	20000484 	.word	0x20000484
 8005e88:	200004ec 	.word	0x200004ec

08005e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <xTaskGetSchedulerState+0x34>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	e008      	b.n	8005eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea0:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <xTaskGetSchedulerState+0x38>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	607b      	str	r3, [r7, #4]
 8005eac:	e001      	b.n	8005eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005eb2:	687b      	ldr	r3, [r7, #4]
	}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	200004d8 	.word	0x200004d8
 8005ec4:	200004f4 	.word	0x200004f4

08005ec8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d05e      	beq.n	8005f9c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <xTaskPriorityInherit+0xe0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d24e      	bcs.n	8005f8a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db06      	blt.n	8005f02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	4b2c      	ldr	r3, [pc, #176]	; (8005fa8 <xTaskPriorityInherit+0xe0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	f1c3 0207 	rsb	r2, r3, #7
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6959      	ldr	r1, [r3, #20]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4a26      	ldr	r2, [pc, #152]	; (8005fac <xTaskPriorityInherit+0xe4>)
 8005f14:	4413      	add	r3, r2
 8005f16:	4299      	cmp	r1, r3
 8005f18:	d12f      	bne.n	8005f7a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe fd07 	bl	8004932 <uxListRemove>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	2201      	movs	r2, #1
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43da      	mvns	r2, r3
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <xTaskPriorityInherit+0xe8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <xTaskPriorityInherit+0xe8>)
 8005f3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f40:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <xTaskPriorityInherit+0xe0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	2201      	movs	r2, #1
 8005f50:	409a      	lsls	r2, r3
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <xTaskPriorityInherit+0xe8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <xTaskPriorityInherit+0xe8>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4a10      	ldr	r2, [pc, #64]	; (8005fac <xTaskPriorityInherit+0xe4>)
 8005f6a:	441a      	add	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7fe fc80 	bl	8004878 <vListInsertEnd>
 8005f78:	e004      	b.n	8005f84 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <xTaskPriorityInherit+0xe0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e008      	b.n	8005f9c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <xTaskPriorityInherit+0xe0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d201      	bcs.n	8005f9c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
	}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200003cc 	.word	0x200003cc
 8005fac:	200003d0 	.word	0x200003d0
 8005fb0:	200004d4 	.word	0x200004d4

08005fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d06e      	beq.n	80060a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fca:	4b3a      	ldr	r3, [pc, #232]	; (80060b4 <xTaskPriorityDisinherit+0x100>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d00a      	beq.n	8005fea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	60fb      	str	r3, [r7, #12]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60bb      	str	r3, [r7, #8]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600c:	1e5a      	subs	r2, r3, #1
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	429a      	cmp	r2, r3
 800601c:	d044      	beq.n	80060a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006022:	2b00      	cmp	r3, #0
 8006024:	d140      	bne.n	80060a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	3304      	adds	r3, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fc81 	bl	8004932 <uxListRemove>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d115      	bne.n	8006062 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603a:	491f      	ldr	r1, [pc, #124]	; (80060b8 <xTaskPriorityDisinherit+0x104>)
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xTaskPriorityDisinherit+0xae>
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	2201      	movs	r2, #1
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43da      	mvns	r2, r3
 8006058:	4b18      	ldr	r3, [pc, #96]	; (80060bc <xTaskPriorityDisinherit+0x108>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4013      	ands	r3, r2
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <xTaskPriorityDisinherit+0x108>)
 8006060:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	f1c3 0207 	rsb	r2, r3, #7
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	2201      	movs	r2, #1
 800607c:	409a      	lsls	r2, r3
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <xTaskPriorityDisinherit+0x108>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4313      	orrs	r3, r2
 8006084:	4a0d      	ldr	r2, [pc, #52]	; (80060bc <xTaskPriorityDisinherit+0x108>)
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <xTaskPriorityDisinherit+0x104>)
 8006096:	441a      	add	r2, r3
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7fe fbea 	bl	8004878 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060a8:	697b      	ldr	r3, [r7, #20]
	}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	200003cc 	.word	0x200003cc
 80060b8:	200003d0 	.word	0x200003d0
 80060bc:	200004d4 	.word	0x200004d4

080060c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060ce:	2301      	movs	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d077      	beq.n	80061c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d902      	bls.n	8006106 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e002      	b.n	800610c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	429a      	cmp	r2, r3
 8006114:	d058      	beq.n	80061c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d153      	bne.n	80061c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	429a      	cmp	r2, r3
 8006128:	d10a      	bne.n	8006140 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	60bb      	str	r3, [r7, #8]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	db04      	blt.n	800615e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f1c3 0207 	rsb	r2, r3, #7
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	6959      	ldr	r1, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800616e:	4413      	add	r3, r2
 8006170:	4299      	cmp	r1, r3
 8006172:	d129      	bne.n	80061c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	3304      	adds	r3, #4
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fbda 	bl	8004932 <uxListRemove>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	2201      	movs	r2, #1
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4013      	ands	r3, r2
 8006196:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006198:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	2201      	movs	r2, #1
 80061a0:	409a      	lsls	r2, r3
 80061a2:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	4a0b      	ldr	r2, [pc, #44]	; (80061d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4a06      	ldr	r2, [pc, #24]	; (80061d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80061ba:	441a      	add	r2, r3
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f7fe fb58 	bl	8004878 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061c8:	bf00      	nop
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	200003cc 	.word	0x200003cc
 80061d4:	200003d0 	.word	0x200003d0
 80061d8:	200004d4 	.word	0x200004d4

080061dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <pvTaskIncrementMutexHeldCount+0x24>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <pvTaskIncrementMutexHeldCount+0x24>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ee:	3201      	adds	r2, #1
 80061f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80061f2:	4b03      	ldr	r3, [pc, #12]	; (8006200 <pvTaskIncrementMutexHeldCount+0x24>)
 80061f4:	681b      	ldr	r3, [r3, #0]
	}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	200003cc 	.word	0x200003cc

08006204 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800620e:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006214:	4b28      	ldr	r3, [pc, #160]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3304      	adds	r3, #4
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fb89 	bl	8004932 <uxListRemove>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006226:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	2201      	movs	r2, #1
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	43da      	mvns	r2, r3
 8006234:	4b21      	ldr	r3, [pc, #132]	; (80062bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4013      	ands	r3, r2
 800623a:	4a20      	ldr	r2, [pc, #128]	; (80062bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800623c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d10a      	bne.n	800625c <prvAddCurrentTaskToDelayedList+0x58>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624c:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	481a      	ldr	r0, [pc, #104]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006256:	f7fe fb0f 	bl	8004878 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800625a:	e026      	b.n	80062aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006264:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	429a      	cmp	r2, r3
 8006272:	d209      	bcs.n	8006288 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006274:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3304      	adds	r3, #4
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7fe fb1d 	bl	80048c0 <vListInsert>
}
 8006286:	e010      	b.n	80062aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3304      	adds	r3, #4
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7fe fb13 	bl	80048c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d202      	bcs.n	80062aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80062a4:	4a09      	ldr	r2, [pc, #36]	; (80062cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6013      	str	r3, [r2, #0]
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	200004d0 	.word	0x200004d0
 80062b8:	200003cc 	.word	0x200003cc
 80062bc:	200004d4 	.word	0x200004d4
 80062c0:	200004b8 	.word	0x200004b8
 80062c4:	20000488 	.word	0x20000488
 80062c8:	20000484 	.word	0x20000484
 80062cc:	200004ec 	.word	0x200004ec

080062d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b04      	subs	r3, #4
 80062e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f023 0201 	bic.w	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b04      	subs	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006300:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <pxPortInitialiseStack+0x64>)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3b14      	subs	r3, #20
 800630a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3b04      	subs	r3, #4
 8006316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f06f 0202 	mvn.w	r2, #2
 800631e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b20      	subs	r3, #32
 8006324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006326:	68fb      	ldr	r3, [r7, #12]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	08006339 	.word	0x08006339

08006338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <prvTaskExitError+0x54>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d00a      	beq.n	8006362 <prvTaskExitError+0x2a>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <prvTaskExitError+0x28>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60bb      	str	r3, [r7, #8]
}
 8006374:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006376:	bf00      	nop
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0fc      	beq.n	8006378 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	2000000c 	.word	0x2000000c

08006390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <pxCurrentTCBConst2>)
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	6808      	ldr	r0, [r1, #0]
 8006396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	f380 8809 	msr	PSP, r0
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8811 	msr	BASEPRI, r0
 80063aa:	4770      	bx	lr
 80063ac:	f3af 8000 	nop.w

080063b0 <pxCurrentTCBConst2>:
 80063b0:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop

080063b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063b8:	4808      	ldr	r0, [pc, #32]	; (80063dc <prvPortStartFirstTask+0x24>)
 80063ba:	6800      	ldr	r0, [r0, #0]
 80063bc:	6800      	ldr	r0, [r0, #0]
 80063be:	f380 8808 	msr	MSP, r0
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8814 	msr	CONTROL, r0
 80063ca:	b662      	cpsie	i
 80063cc:	b661      	cpsie	f
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	df00      	svc	0
 80063d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063da:	bf00      	nop
 80063dc:	e000ed08 	.word	0xe000ed08

080063e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063e6:	4b46      	ldr	r3, [pc, #280]	; (8006500 <xPortStartScheduler+0x120>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a46      	ldr	r2, [pc, #280]	; (8006504 <xPortStartScheduler+0x124>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10a      	bne.n	8006406 <xPortStartScheduler+0x26>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	613b      	str	r3, [r7, #16]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <xPortStartScheduler+0x120>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3f      	ldr	r2, [pc, #252]	; (8006508 <xPortStartScheduler+0x128>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10a      	bne.n	8006426 <xPortStartScheduler+0x46>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	60fb      	str	r3, [r7, #12]
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <xPortStartScheduler+0x12c>)
 8006428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006448:	b2da      	uxtb	r2, r3
 800644a:	4b31      	ldr	r3, [pc, #196]	; (8006510 <xPortStartScheduler+0x130>)
 800644c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800644e:	4b31      	ldr	r3, [pc, #196]	; (8006514 <xPortStartScheduler+0x134>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006454:	e009      	b.n	800646a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006456:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <xPortStartScheduler+0x134>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3b01      	subs	r3, #1
 800645c:	4a2d      	ldr	r2, [pc, #180]	; (8006514 <xPortStartScheduler+0x134>)
 800645e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	b2db      	uxtb	r3, r3
 8006468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	2b80      	cmp	r3, #128	; 0x80
 8006474:	d0ef      	beq.n	8006456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006476:	4b27      	ldr	r3, [pc, #156]	; (8006514 <xPortStartScheduler+0x134>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f1c3 0307 	rsb	r3, r3, #7
 800647e:	2b04      	cmp	r3, #4
 8006480:	d00a      	beq.n	8006498 <xPortStartScheduler+0xb8>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60bb      	str	r3, [r7, #8]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006498:	4b1e      	ldr	r3, [pc, #120]	; (8006514 <xPortStartScheduler+0x134>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <xPortStartScheduler+0x134>)
 80064a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064a2:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <xPortStartScheduler+0x134>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064aa:	4a1a      	ldr	r2, [pc, #104]	; (8006514 <xPortStartScheduler+0x134>)
 80064ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064b6:	4b18      	ldr	r3, [pc, #96]	; (8006518 <xPortStartScheduler+0x138>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a17      	ldr	r2, [pc, #92]	; (8006518 <xPortStartScheduler+0x138>)
 80064bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <xPortStartScheduler+0x138>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a14      	ldr	r2, [pc, #80]	; (8006518 <xPortStartScheduler+0x138>)
 80064c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064ce:	f000 f8dd 	bl	800668c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064d2:	4b12      	ldr	r3, [pc, #72]	; (800651c <xPortStartScheduler+0x13c>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064d8:	f000 f8fc 	bl	80066d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064dc:	4b10      	ldr	r3, [pc, #64]	; (8006520 <xPortStartScheduler+0x140>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0f      	ldr	r2, [pc, #60]	; (8006520 <xPortStartScheduler+0x140>)
 80064e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064e8:	f7ff ff66 	bl	80063b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064ec:	f7ff fa88 	bl	8005a00 <vTaskSwitchContext>
	prvTaskExitError();
 80064f0:	f7ff ff22 	bl	8006338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	e000ed00 	.word	0xe000ed00
 8006504:	410fc271 	.word	0x410fc271
 8006508:	410fc270 	.word	0x410fc270
 800650c:	e000e400 	.word	0xe000e400
 8006510:	200004f8 	.word	0x200004f8
 8006514:	200004fc 	.word	0x200004fc
 8006518:	e000ed20 	.word	0xe000ed20
 800651c:	2000000c 	.word	0x2000000c
 8006520:	e000ef34 	.word	0xe000ef34

08006524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	607b      	str	r3, [r7, #4]
}
 800653c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800653e:	4b0f      	ldr	r3, [pc, #60]	; (800657c <vPortEnterCritical+0x58>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3301      	adds	r3, #1
 8006544:	4a0d      	ldr	r2, [pc, #52]	; (800657c <vPortEnterCritical+0x58>)
 8006546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <vPortEnterCritical+0x58>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d10f      	bne.n	8006570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <vPortEnterCritical+0x5c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <vPortEnterCritical+0x4c>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	603b      	str	r3, [r7, #0]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <vPortEnterCritical+0x4a>
	}
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	2000000c 	.word	0x2000000c
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <vPortExitCritical+0x50>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <vPortExitCritical+0x24>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	607b      	str	r3, [r7, #4]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <vPortExitCritical+0x50>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <vPortExitCritical+0x50>)
 80065b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065b2:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <vPortExitCritical+0x50>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d105      	bne.n	80065c6 <vPortExitCritical+0x42>
 80065ba:	2300      	movs	r3, #0
 80065bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	2000000c 	.word	0x2000000c
	...

080065e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065e0:	f3ef 8009 	mrs	r0, PSP
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4b15      	ldr	r3, [pc, #84]	; (8006640 <pxCurrentTCBConst>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	f01e 0f10 	tst.w	lr, #16
 80065f0:	bf08      	it	eq
 80065f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	6010      	str	r0, [r2, #0]
 80065fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006604:	f380 8811 	msr	BASEPRI, r0
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f7ff f9f6 	bl	8005a00 <vTaskSwitchContext>
 8006614:	f04f 0000 	mov.w	r0, #0
 8006618:	f380 8811 	msr	BASEPRI, r0
 800661c:	bc09      	pop	{r0, r3}
 800661e:	6819      	ldr	r1, [r3, #0]
 8006620:	6808      	ldr	r0, [r1, #0]
 8006622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006626:	f01e 0f10 	tst.w	lr, #16
 800662a:	bf08      	it	eq
 800662c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006630:	f380 8809 	msr	PSP, r0
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	f3af 8000 	nop.w

08006640 <pxCurrentTCBConst>:
 8006640:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop

08006648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	607b      	str	r3, [r7, #4]
}
 8006660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006662:	f7ff f915 	bl	8005890 <xTaskIncrementTick>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <xPortSysTickHandler+0x40>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	2300      	movs	r3, #0
 8006676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f383 8811 	msr	BASEPRI, r3
}
 800667e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006690:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <vPortSetupTimerInterrupt+0x34>)
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <vPortSetupTimerInterrupt+0x38>)
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <vPortSetupTimerInterrupt+0x3c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <vPortSetupTimerInterrupt+0x40>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	099b      	lsrs	r3, r3, #6
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <vPortSetupTimerInterrupt+0x44>)
 80066aa:	3b01      	subs	r3, #1
 80066ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066ae:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <vPortSetupTimerInterrupt+0x34>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
}
 80066b4:	bf00      	nop
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	e000e010 	.word	0xe000e010
 80066c4:	e000e018 	.word	0xe000e018
 80066c8:	20000000 	.word	0x20000000
 80066cc:	10624dd3 	.word	0x10624dd3
 80066d0:	e000e014 	.word	0xe000e014

080066d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066e4 <vPortEnableVFP+0x10>
 80066d8:	6801      	ldr	r1, [r0, #0]
 80066da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066de:	6001      	str	r1, [r0, #0]
 80066e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066e2:	bf00      	nop
 80066e4:	e000ed88 	.word	0xe000ed88

080066e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066f4:	f7ff f822 	bl	800573c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066f8:	4b5b      	ldr	r3, [pc, #364]	; (8006868 <pvPortMalloc+0x180>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006700:	f000 f920 	bl	8006944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006704:	4b59      	ldr	r3, [pc, #356]	; (800686c <pvPortMalloc+0x184>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 8093 	bne.w	8006838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01d      	beq.n	8006754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006718:	2208      	movs	r2, #8
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b00      	cmp	r3, #0
 8006728:	d014      	beq.n	8006754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f023 0307 	bic.w	r3, r3, #7
 8006730:	3308      	adds	r3, #8
 8006732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <pvPortMalloc+0x6c>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	617b      	str	r3, [r7, #20]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d06e      	beq.n	8006838 <pvPortMalloc+0x150>
 800675a:	4b45      	ldr	r3, [pc, #276]	; (8006870 <pvPortMalloc+0x188>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d869      	bhi.n	8006838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006764:	4b43      	ldr	r3, [pc, #268]	; (8006874 <pvPortMalloc+0x18c>)
 8006766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006768:	4b42      	ldr	r3, [pc, #264]	; (8006874 <pvPortMalloc+0x18c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800676e:	e004      	b.n	800677a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d903      	bls.n	800678c <pvPortMalloc+0xa4>
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f1      	bne.n	8006770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800678c:	4b36      	ldr	r3, [pc, #216]	; (8006868 <pvPortMalloc+0x180>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006792:	429a      	cmp	r2, r3
 8006794:	d050      	beq.n	8006838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2208      	movs	r2, #8
 800679c:	4413      	add	r3, r2
 800679e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	2308      	movs	r3, #8
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d91f      	bls.n	80067f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <pvPortMalloc+0xf8>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	613b      	str	r3, [r7, #16]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1ad2      	subs	r2, r2, r3
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067f2:	69b8      	ldr	r0, [r7, #24]
 80067f4:	f000 f908 	bl	8006a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067f8:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <pvPortMalloc+0x188>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <pvPortMalloc+0x188>)
 8006804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006806:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <pvPortMalloc+0x188>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <pvPortMalloc+0x190>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d203      	bcs.n	800681a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006812:	4b17      	ldr	r3, [pc, #92]	; (8006870 <pvPortMalloc+0x188>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <pvPortMalloc+0x190>)
 8006818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <pvPortMalloc+0x184>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	431a      	orrs	r2, r3
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800682e:	4b13      	ldr	r3, [pc, #76]	; (800687c <pvPortMalloc+0x194>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	4a11      	ldr	r2, [pc, #68]	; (800687c <pvPortMalloc+0x194>)
 8006836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006838:	f7fe ff8e 	bl	8005758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <pvPortMalloc+0x174>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60fb      	str	r3, [r7, #12]
}
 8006858:	bf00      	nop
 800685a:	e7fe      	b.n	800685a <pvPortMalloc+0x172>
	return pvReturn;
 800685c:	69fb      	ldr	r3, [r7, #28]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3728      	adds	r7, #40	; 0x28
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20004108 	.word	0x20004108
 800686c:	2000411c 	.word	0x2000411c
 8006870:	2000410c 	.word	0x2000410c
 8006874:	20004100 	.word	0x20004100
 8006878:	20004110 	.word	0x20004110
 800687c:	20004114 	.word	0x20004114

08006880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d04d      	beq.n	800692e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006892:	2308      	movs	r3, #8
 8006894:	425b      	negs	r3, r3
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4413      	add	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	4b24      	ldr	r3, [pc, #144]	; (8006938 <vPortFree+0xb8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <vPortFree+0x44>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	60fb      	str	r3, [r7, #12]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <vPortFree+0x62>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	60bb      	str	r3, [r7, #8]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4b14      	ldr	r3, [pc, #80]	; (8006938 <vPortFree+0xb8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01e      	beq.n	800692e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d11a      	bne.n	800692e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <vPortFree+0xb8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006908:	f7fe ff18 	bl	800573c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <vPortFree+0xbc>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4413      	add	r3, r2
 8006916:	4a09      	ldr	r2, [pc, #36]	; (800693c <vPortFree+0xbc>)
 8006918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800691a:	6938      	ldr	r0, [r7, #16]
 800691c:	f000 f874 	bl	8006a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <vPortFree+0xc0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	4a06      	ldr	r2, [pc, #24]	; (8006940 <vPortFree+0xc0>)
 8006928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800692a:	f7fe ff15 	bl	8005758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800692e:	bf00      	nop
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	2000411c 	.word	0x2000411c
 800693c:	2000410c 	.word	0x2000410c
 8006940:	20004118 	.word	0x20004118

08006944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800694a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800694e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006950:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <prvHeapInit+0xac>)
 8006952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3307      	adds	r3, #7
 8006962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0307 	bic.w	r3, r3, #7
 800696a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <prvHeapInit+0xac>)
 8006974:	4413      	add	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800697c:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <prvHeapInit+0xb0>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006982:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <prvHeapInit+0xb0>)
 8006984:	2200      	movs	r2, #0
 8006986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4413      	add	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006990:	2208      	movs	r2, #8
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0307 	bic.w	r3, r3, #7
 800699e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <prvHeapInit+0xb4>)
 80069a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069a6:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <prvHeapInit+0xb4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ae:	4b12      	ldr	r3, [pc, #72]	; (80069f8 <prvHeapInit+0xb4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069c4:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <prvHeapInit+0xb4>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <prvHeapInit+0xb8>)
 80069d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4a09      	ldr	r2, [pc, #36]	; (8006a00 <prvHeapInit+0xbc>)
 80069da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069dc:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <prvHeapInit+0xc0>)
 80069de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069e2:	601a      	str	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	20000500 	.word	0x20000500
 80069f4:	20004100 	.word	0x20004100
 80069f8:	20004108 	.word	0x20004108
 80069fc:	20004110 	.word	0x20004110
 8006a00:	2000410c 	.word	0x2000410c
 8006a04:	2000411c 	.word	0x2000411c

08006a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a10:	4b28      	ldr	r3, [pc, #160]	; (8006ab4 <prvInsertBlockIntoFreeList+0xac>)
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e002      	b.n	8006a1c <prvInsertBlockIntoFreeList+0x14>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d8f7      	bhi.n	8006a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	4413      	add	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d108      	bne.n	8006a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	441a      	add	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	441a      	add	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d118      	bne.n	8006a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d00d      	beq.n	8006a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e008      	b.n	8006a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a86:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e003      	b.n	8006a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d002      	beq.n	8006aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20004100 	.word	0x20004100
 8006ab8:	20004108 	.word	0x20004108

08006abc <memset>:
 8006abc:	4402      	add	r2, r0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d100      	bne.n	8006ac6 <memset+0xa>
 8006ac4:	4770      	bx	lr
 8006ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aca:	e7f9      	b.n	8006ac0 <memset+0x4>

08006acc <_reclaim_reent>:
 8006acc:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <_reclaim_reent+0xa8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4283      	cmp	r3, r0
 8006ad2:	b570      	push	{r4, r5, r6, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	d04b      	beq.n	8006b70 <_reclaim_reent+0xa4>
 8006ad8:	69c3      	ldr	r3, [r0, #28]
 8006ada:	b143      	cbz	r3, 8006aee <_reclaim_reent+0x22>
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d144      	bne.n	8006b6c <_reclaim_reent+0xa0>
 8006ae2:	69e3      	ldr	r3, [r4, #28]
 8006ae4:	6819      	ldr	r1, [r3, #0]
 8006ae6:	b111      	cbz	r1, 8006aee <_reclaim_reent+0x22>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 f879 	bl	8006be0 <_free_r>
 8006aee:	6961      	ldr	r1, [r4, #20]
 8006af0:	b111      	cbz	r1, 8006af8 <_reclaim_reent+0x2c>
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f874 	bl	8006be0 <_free_r>
 8006af8:	69e1      	ldr	r1, [r4, #28]
 8006afa:	b111      	cbz	r1, 8006b02 <_reclaim_reent+0x36>
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 f86f 	bl	8006be0 <_free_r>
 8006b02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006b04:	b111      	cbz	r1, 8006b0c <_reclaim_reent+0x40>
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 f86a 	bl	8006be0 <_free_r>
 8006b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b0e:	b111      	cbz	r1, 8006b16 <_reclaim_reent+0x4a>
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 f865 	bl	8006be0 <_free_r>
 8006b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b18:	b111      	cbz	r1, 8006b20 <_reclaim_reent+0x54>
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 f860 	bl	8006be0 <_free_r>
 8006b20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b22:	b111      	cbz	r1, 8006b2a <_reclaim_reent+0x5e>
 8006b24:	4620      	mov	r0, r4
 8006b26:	f000 f85b 	bl	8006be0 <_free_r>
 8006b2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006b2c:	b111      	cbz	r1, 8006b34 <_reclaim_reent+0x68>
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f856 	bl	8006be0 <_free_r>
 8006b34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006b36:	b111      	cbz	r1, 8006b3e <_reclaim_reent+0x72>
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 f851 	bl	8006be0 <_free_r>
 8006b3e:	6a23      	ldr	r3, [r4, #32]
 8006b40:	b1b3      	cbz	r3, 8006b70 <_reclaim_reent+0xa4>
 8006b42:	4620      	mov	r0, r4
 8006b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b48:	4718      	bx	r3
 8006b4a:	5949      	ldr	r1, [r1, r5]
 8006b4c:	b941      	cbnz	r1, 8006b60 <_reclaim_reent+0x94>
 8006b4e:	3504      	adds	r5, #4
 8006b50:	69e3      	ldr	r3, [r4, #28]
 8006b52:	2d80      	cmp	r5, #128	; 0x80
 8006b54:	68d9      	ldr	r1, [r3, #12]
 8006b56:	d1f8      	bne.n	8006b4a <_reclaim_reent+0x7e>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 f841 	bl	8006be0 <_free_r>
 8006b5e:	e7c0      	b.n	8006ae2 <_reclaim_reent+0x16>
 8006b60:	680e      	ldr	r6, [r1, #0]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f83c 	bl	8006be0 <_free_r>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	e7ef      	b.n	8006b4c <_reclaim_reent+0x80>
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	e7ef      	b.n	8006b50 <_reclaim_reent+0x84>
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
 8006b72:	bf00      	nop
 8006b74:	2000005c 	.word	0x2000005c

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4d0d      	ldr	r5, [pc, #52]	; (8006bb0 <__libc_init_array+0x38>)
 8006b7c:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <__libc_init_array+0x3c>)
 8006b7e:	1b64      	subs	r4, r4, r5
 8006b80:	10a4      	asrs	r4, r4, #2
 8006b82:	2600      	movs	r6, #0
 8006b84:	42a6      	cmp	r6, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	4d0b      	ldr	r5, [pc, #44]	; (8006bb8 <__libc_init_array+0x40>)
 8006b8a:	4c0c      	ldr	r4, [pc, #48]	; (8006bbc <__libc_init_array+0x44>)
 8006b8c:	f000 f880 	bl	8006c90 <_init>
 8006b90:	1b64      	subs	r4, r4, r5
 8006b92:	10a4      	asrs	r4, r4, #2
 8006b94:	2600      	movs	r6, #0
 8006b96:	42a6      	cmp	r6, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba0:	4798      	blx	r3
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006baa:	4798      	blx	r3
 8006bac:	3601      	adds	r6, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	08006d48 	.word	0x08006d48
 8006bb4:	08006d48 	.word	0x08006d48
 8006bb8:	08006d48 	.word	0x08006d48
 8006bbc:	08006d4c 	.word	0x08006d4c

08006bc0 <__retarget_lock_acquire_recursive>:
 8006bc0:	4770      	bx	lr

08006bc2 <__retarget_lock_release_recursive>:
 8006bc2:	4770      	bx	lr

08006bc4 <memcpy>:
 8006bc4:	440a      	add	r2, r1
 8006bc6:	4291      	cmp	r1, r2
 8006bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bcc:	d100      	bne.n	8006bd0 <memcpy+0xc>
 8006bce:	4770      	bx	lr
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	d1f9      	bne.n	8006bd2 <memcpy+0xe>
 8006bde:	bd10      	pop	{r4, pc}

08006be0 <_free_r>:
 8006be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006be2:	2900      	cmp	r1, #0
 8006be4:	d044      	beq.n	8006c70 <_free_r+0x90>
 8006be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bea:	9001      	str	r0, [sp, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f1a1 0404 	sub.w	r4, r1, #4
 8006bf2:	bfb8      	it	lt
 8006bf4:	18e4      	addlt	r4, r4, r3
 8006bf6:	f000 f83f 	bl	8006c78 <__malloc_lock>
 8006bfa:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <_free_r+0x94>)
 8006bfc:	9801      	ldr	r0, [sp, #4]
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	b933      	cbnz	r3, 8006c10 <_free_r+0x30>
 8006c02:	6063      	str	r3, [r4, #4]
 8006c04:	6014      	str	r4, [r2, #0]
 8006c06:	b003      	add	sp, #12
 8006c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c0c:	f000 b83a 	b.w	8006c84 <__malloc_unlock>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d908      	bls.n	8006c26 <_free_r+0x46>
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	1961      	adds	r1, r4, r5
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf01      	itttt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	1949      	addeq	r1, r1, r5
 8006c22:	6021      	streq	r1, [r4, #0]
 8006c24:	e7ed      	b.n	8006c02 <_free_r+0x22>
 8006c26:	461a      	mov	r2, r3
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	b10b      	cbz	r3, 8006c30 <_free_r+0x50>
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d9fa      	bls.n	8006c26 <_free_r+0x46>
 8006c30:	6811      	ldr	r1, [r2, #0]
 8006c32:	1855      	adds	r5, r2, r1
 8006c34:	42a5      	cmp	r5, r4
 8006c36:	d10b      	bne.n	8006c50 <_free_r+0x70>
 8006c38:	6824      	ldr	r4, [r4, #0]
 8006c3a:	4421      	add	r1, r4
 8006c3c:	1854      	adds	r4, r2, r1
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	6011      	str	r1, [r2, #0]
 8006c42:	d1e0      	bne.n	8006c06 <_free_r+0x26>
 8006c44:	681c      	ldr	r4, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	6053      	str	r3, [r2, #4]
 8006c4a:	440c      	add	r4, r1
 8006c4c:	6014      	str	r4, [r2, #0]
 8006c4e:	e7da      	b.n	8006c06 <_free_r+0x26>
 8006c50:	d902      	bls.n	8006c58 <_free_r+0x78>
 8006c52:	230c      	movs	r3, #12
 8006c54:	6003      	str	r3, [r0, #0]
 8006c56:	e7d6      	b.n	8006c06 <_free_r+0x26>
 8006c58:	6825      	ldr	r5, [r4, #0]
 8006c5a:	1961      	adds	r1, r4, r5
 8006c5c:	428b      	cmp	r3, r1
 8006c5e:	bf04      	itt	eq
 8006c60:	6819      	ldreq	r1, [r3, #0]
 8006c62:	685b      	ldreq	r3, [r3, #4]
 8006c64:	6063      	str	r3, [r4, #4]
 8006c66:	bf04      	itt	eq
 8006c68:	1949      	addeq	r1, r1, r5
 8006c6a:	6021      	streq	r1, [r4, #0]
 8006c6c:	6054      	str	r4, [r2, #4]
 8006c6e:	e7ca      	b.n	8006c06 <_free_r+0x26>
 8006c70:	b003      	add	sp, #12
 8006c72:	bd30      	pop	{r4, r5, pc}
 8006c74:	2000425c 	.word	0x2000425c

08006c78 <__malloc_lock>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__malloc_lock+0x8>)
 8006c7a:	f7ff bfa1 	b.w	8006bc0 <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	20004258 	.word	0x20004258

08006c84 <__malloc_unlock>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__malloc_unlock+0x8>)
 8006c86:	f7ff bf9c 	b.w	8006bc2 <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	20004258 	.word	0x20004258

08006c90 <_init>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr

08006c9c <_fini>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr
