
drive-motor-hcsr04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006934  08006934  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800693c  0800693c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800693c  0800693c  0001693c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000005c  080069a0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080069a0  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e30f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002104  00000000  00000000  0002e3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  000304e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0f  00000000  00000000  000311c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e8a  00000000  00000000  00031bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f61e  00000000  00000000  00048a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e0e4  00000000  00000000  0005807f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dbc  00000000  00000000  000e6164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e9f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006780 	.word	0x08006780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08006780 	.word	0x08006780

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Delay_us>:
#include "stm32f4xx_it.h"
#include "stm32f4xx_hal_tim.h"
#include "hcsr04.h"
extern TIM_HandleTypeDef htim1;

void Delay_us (uint16_t time){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
  	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <Delay_us+0x30>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	625a      	str	r2, [r3, #36]	; 0x24
  	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 800059e:	bf00      	nop
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <Delay_us+0x30>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3f9      	bcc.n	80005a0 <Delay_us+0x14>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000078 	.word	0x20000078

080005c0 <Read_HCSR04>:

//uint16_t getDistance(){
//	return distance;
//}

void Read_HCSR04(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <Read_HCSR04+0x38>)
 80005cc:	f001 fe3e 	bl	800224c <HAL_GPIO_WritePin>
  	Delay_us(10);
 80005d0:	200a      	movs	r0, #10
 80005d2:	f7ff ffdb 	bl	800058c <Delay_us>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <Read_HCSR04+0x38>)
 80005de:	f001 fe35 	bl	800224c <HAL_GPIO_WritePin>
  	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <Read_HCSR04+0x3c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <Read_HCSR04+0x3c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f042 0202 	orr.w	r2, r2, #2
 80005f0:	60da      	str	r2, [r3, #12]
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40020000 	.word	0x40020000
 80005fc:	20000078 	.word	0x20000078

08000600 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000600:	b580      	push	{r7, lr}
 8000602:	b090      	sub	sp, #64	; 0x40
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	7f1b      	ldrb	r3, [r3, #28]
 800060c:	2b01      	cmp	r3, #1
 800060e:	f040 809c 	bne.w	800074a <HAL_TIM_IC_CaptureCallback+0x14a>
  		if (flag_raise==0){
 8000612:	4b50      	ldr	r3, [pc, #320]	; (8000754 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d11a      	bne.n	8000650 <HAL_TIM_IC_CaptureCallback+0x50>
  			val_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f003 f877 	bl	8003710 <HAL_TIM_ReadCapturedValue>
 8000622:	4603      	mov	r3, r0
 8000624:	4a4c      	ldr	r2, [pc, #304]	; (8000758 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000626:	6013      	str	r3, [r2, #0]
  			flag_raise=1;
 8000628:	4b4a      	ldr	r3, [pc, #296]	; (8000754 <HAL_TIM_IC_CaptureCallback+0x154>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6a1a      	ldr	r2, [r3, #32]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f022 020a 	bic.w	r2, r2, #10
 800063c:	621a      	str	r2, [r3, #32]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6a1a      	ldr	r2, [r3, #32]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f042 0202 	orr.w	r2, r2, #2
 800064c:	621a      	str	r2, [r3, #32]
			flag_raise = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
  		}
  	}
}
 800064e:	e07c      	b.n	800074a <HAL_TIM_IC_CaptureCallback+0x14a>
  		else if (flag_raise == 1){
 8000650:	4b40      	ldr	r3, [pc, #256]	; (8000754 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d178      	bne.n	800074a <HAL_TIM_IC_CaptureCallback+0x14a>
  			val_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f003 f858 	bl	8003710 <HAL_TIM_ReadCapturedValue>
 8000660:	4603      	mov	r3, r0
 8000662:	4a3e      	ldr	r2, [pc, #248]	; (800075c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000664:	6013      	str	r3, [r2, #0]
  			__HAL_TIM_SET_COUNTER(htim,0);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  			if (val_2 > val_1){
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d907      	bls.n	800068a <HAL_TIM_IC_CaptureCallback+0x8a>
  				difference = val_2 - val_1;
 800067a:	4b38      	ldr	r3, [pc, #224]	; (800075c <HAL_TIM_IC_CaptureCallback+0x15c>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	4a36      	ldr	r2, [pc, #216]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	e00f      	b.n	80006aa <HAL_TIM_IC_CaptureCallback+0xaa>
  			else if (val_1 > val_2){
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <HAL_TIM_IC_CaptureCallback+0x158>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b33      	ldr	r3, [pc, #204]	; (800075c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d909      	bls.n	80006aa <HAL_TIM_IC_CaptureCallback+0xaa>
  				difference = (0xffff - val_1) + val_2;
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <HAL_TIM_IC_CaptureCallback+0x158>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80006a4:	33ff      	adds	r3, #255	; 0xff
 80006a6:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x160>)
 80006a8:	6013      	str	r3, [r2, #0]
  			distance = difference/58;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <HAL_TIM_IC_CaptureCallback+0x160>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <HAL_TIM_IC_CaptureCallback+0x164>)
 80006b0:	fba2 2303 	umull	r2, r3, r2, r3
 80006b4:	095b      	lsrs	r3, r3, #5
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_TIM_IC_CaptureCallback+0x168>)
 80006ba:	801a      	strh	r2, [r3, #0]
  			sprintf(message, "Distancia: %d cm \r\n",distance);
 80006bc:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <HAL_TIM_IC_CaptureCallback+0x168>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4929      	ldr	r1, [pc, #164]	; (800076c <HAL_TIM_IC_CaptureCallback+0x16c>)
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fefb 	bl	80054c4 <siprintf>
  			HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fd84 	bl	80001e0 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f107 010c 	add.w	r1, r7, #12
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	4822      	ldr	r0, [pc, #136]	; (8000770 <HAL_TIM_IC_CaptureCallback+0x170>)
 80006e6:	f003 fd38 	bl	800415a <HAL_UART_Transmit>
  			if(distance > 15){
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_TIM_IC_CaptureCallback+0x168>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	2b0f      	cmp	r3, #15
 80006f0:	d909      	bls.n	8000706 <HAL_TIM_IC_CaptureCallback+0x106>
  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0); //vermelho
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <HAL_TIM_IC_CaptureCallback+0x174>)
 80006fa:	f001 fda7 	bl	800224c <HAL_GPIO_WritePin>
  				stop_flag = 0;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000700:	2200      	movs	r2, #0
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	e008      	b.n	8000718 <HAL_TIM_IC_CaptureCallback+0x118>
  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); //vermelho
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4819      	ldr	r0, [pc, #100]	; (8000774 <HAL_TIM_IC_CaptureCallback+0x174>)
 800070e:	f001 fd9d 	bl	800224c <HAL_GPIO_WritePin>
  				stop_flag = 1;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000714:	2201      	movs	r2, #1
 8000716:	801a      	strh	r2, [r3, #0]
			flag_raise = 0;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_TIM_IC_CaptureCallback+0x154>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6a1a      	ldr	r2, [r3, #32]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f022 020a 	bic.w	r2, r2, #10
 800072c:	621a      	str	r2, [r3, #32]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6a12      	ldr	r2, [r2, #32]
 8000738:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_TIM_IC_CaptureCallback+0x17c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f022 0202 	bic.w	r2, r2, #2
 8000748:	60da      	str	r2, [r3, #12]
}
 800074a:	bf00      	nop
 800074c:	3740      	adds	r7, #64	; 0x40
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000200 	.word	0x20000200
 8000758:	200001f4 	.word	0x200001f4
 800075c:	200001f8 	.word	0x200001f8
 8000760:	200001fc 	.word	0x200001fc
 8000764:	8d3dcb09 	.word	0x8d3dcb09
 8000768:	20000202 	.word	0x20000202
 800076c:	08006798 	.word	0x08006798
 8000770:	20000150 	.word	0x20000150
 8000774:	40020400 	.word	0x40020400
 8000778:	20000204 	.word	0x20000204
 800077c:	20000078 	.word	0x20000078

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fe34 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f82e 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 fa20 	bl	8000bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000790:	f000 f9fe 	bl	8000b90 <MX_DMA_Init>
  MX_TIM2_Init();
 8000794:	f000 f906 	bl	80009a4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000798:	f000 f978 	bl	8000a8c <MX_TIM5_Init>
  MX_TIM1_Init();
 800079c:	f000 f88e 	bl	80008bc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007a0:	f000 f9cc 	bl	8000b3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007a4:	2104      	movs	r1, #4
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <main+0x54>)
 80007a8:	f002 fa60 	bl	8002c6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80007ac:	2100      	movs	r1, #0
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <main+0x58>)
 80007b0:	f002 fa5c 	bl	8002c6c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80007b4:	2100      	movs	r1, #0
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <main+0x5c>)
 80007b8:	f002 fb62 	bl	8002e80 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_DMA(&huart1, RxCoord, SIZE_RX_COORD) ;
 80007bc:	220a      	movs	r2, #10
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <main+0x60>)
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <main+0x64>)
 80007c2:	f003 fd5c 	bl	800427e <HAL_UART_Receive_DMA>
//	  HAL_Delay(5000);
//	  motor_backwards();
//	  HAL_Delay(5000);
//	  motor_stop();
//	  HAL_Delay(5000);
	  Read_HCSR04();
 80007c6:	f7ff fefb 	bl	80005c0 <Read_HCSR04>
	  HAL_Delay(200);
 80007ca:	20c8      	movs	r0, #200	; 0xc8
 80007cc:	f000 fe82 	bl	80014d4 <HAL_Delay>
	  Read_HCSR04();
 80007d0:	e7f9      	b.n	80007c6 <main+0x46>
 80007d2:	bf00      	nop
 80007d4:	200000c0 	.word	0x200000c0
 80007d8:	20000108 	.word	0x20000108
 80007dc:	20000078 	.word	0x20000078
 80007e0:	2000020c 	.word	0x2000020c
 80007e4:	20000150 	.word	0x20000150

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 feb2 	bl	8005560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <SystemClock_Config+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <SystemClock_Config+0xcc>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <SystemClock_Config+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <SystemClock_Config+0xd0>)
 8000832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	2302      	movs	r3, #2
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000854:	2300      	movs	r3, #0
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000858:	2308      	movs	r3, #8
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800085c:	2350      	movs	r3, #80	; 0x50
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000864:	2304      	movs	r3, #4
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fd07 	bl	8002280 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000878:	f000 faa4 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2302      	movs	r3, #2
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000888:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800088e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2102      	movs	r1, #2
 800089a:	4618      	mov	r0, r3
 800089c:	f001 ff68 	bl	8002770 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008a6:	f000 fa8d 	bl	8000dc4 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_TIM1_Init+0xe0>)
 80008e8:	4a2d      	ldr	r2, [pc, #180]	; (80009a0 <MX_TIM1_Init+0xe4>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_TIM1_Init+0xe0>)
 80008ee:	2213      	movs	r2, #19
 80008f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_TIM1_Init+0xe0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_TIM1_Init+0xe0>)
 80008fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_TIM1_Init+0xe0>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_TIM1_Init+0xe0>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_TIM1_Init+0xe0>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_TIM1_Init+0xe0>)
 8000914:	f002 f90c 	bl	8002b30 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800091e:	f000 fa51 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4619      	mov	r1, r3
 800092e:	481b      	ldr	r0, [pc, #108]	; (800099c <MX_TIM1_Init+0xe0>)
 8000930:	f002 fe26 	bl	8003580 <HAL_TIM_ConfigClockSource>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800093a:	f000 fa43 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800093e:	4817      	ldr	r0, [pc, #92]	; (800099c <MX_TIM1_Init+0xe0>)
 8000940:	f002 fa44 	bl	8002dcc <HAL_TIM_IC_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800094a:	f000 fa3b 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	480f      	ldr	r0, [pc, #60]	; (800099c <MX_TIM1_Init+0xe0>)
 800095e:	f003 fb2d 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000968:	f000 fa2c 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000970:	2301      	movs	r3, #1
 8000972:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM1_Init+0xe0>)
 8000984:	f002 fc9e 	bl	80032c4 <HAL_TIM_IC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800098e:	f000 fa19 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000078 	.word	0x20000078
 80009a0:	40010000 	.word	0x40010000

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009de:	2213      	movs	r2, #19
 80009e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009ea:	2231      	movs	r2, #49	; 0x31
 80009ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fa:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_TIM2_Init+0xe4>)
 80009fc:	f002 f898 	bl	8002b30 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a06:	f000 f9dd 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a14:	4619      	mov	r1, r3
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a18:	f002 fdb2 	bl	8003580 <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a22:	f000 f9cf 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a28:	f002 f8d1 	bl	8002bce <HAL_TIM_PWM_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a32:	f000 f9c7 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	4619      	mov	r1, r3
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a46:	f003 fab9 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a50:	f000 f9b8 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a54:	2360      	movs	r3, #96	; 0x60
 8000a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2204      	movs	r2, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a6c:	f002 fcc6 	bl	80033fc <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a76:	f000 f9a5 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM2_Init+0xe4>)
 8000a7c:	f000 fb1e 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000a80:	bf00      	nop
 8000a82:	3738      	adds	r7, #56	; 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000c0 	.word	0x200000c0

08000a8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <MX_TIM5_Init+0xac>)
 8000ab2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 20-1;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000ab6:	2213      	movs	r2, #19
 8000ab8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50-1;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000ac2:	2231      	movs	r2, #49	; 0x31
 8000ac4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ad2:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000ad4:	f002 f87b 	bl	8002bce <HAL_TIM_PWM_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000ade:	f000 f971 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4619      	mov	r1, r3
 8000af0:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000af2:	f003 fa63 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000afc:	f000 f962 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000b18:	f002 fc70 	bl	80033fc <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000b22:	f000 f94f 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_TIM5_Init+0xa8>)
 8000b28:	f000 fac8 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000108 	.word	0x20000108
 8000b38:	40000c00 	.word	0x40000c00

08000b3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_USART1_UART_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART1_UART_Init+0x4c>)
 8000b74:	f003 faa4 	bl	80040c0 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b7e:	f000 f921 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000150 	.word	0x20000150
 8000b8c:	40011000 	.word	0x40011000

08000b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_DMA_Init+0x3c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	203a      	movs	r0, #58	; 0x3a
 8000bb8:	f000 fd8b 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bbc:	203a      	movs	r0, #58	; 0x3a
 8000bbe:	f000 fda4 	bl	800170a <HAL_NVIC_EnableIRQ>

}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a26      	ldr	r2, [pc, #152]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_GPIO_Init+0xf0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000c40:	4820      	ldr	r0, [pc, #128]	; (8000cc4 <MX_GPIO_Init+0xf4>)
 8000c42:	f001 fb03 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GREEN_LED_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f242 0103 	movw	r1, #8195	; 0x2003
 8000c4c:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <MX_GPIO_Init+0xf8>)
 8000c4e:	f001 fafd 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c58:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <MX_GPIO_Init+0xf8>)
 8000c5a:	f001 faf7 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000c5e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_GPIO_Init+0xf4>)
 8000c78:	f001 f964 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GREEN_LED_Pin;
 8000c7c:	f242 0303 	movw	r3, #8195	; 0x2003
 8000c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_GPIO_Init+0xf8>)
 8000c96:	f001 f955 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_GPIO_Init+0xf8>)
 8000cb4:	f001 f946 	bl	8001f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020400 	.word	0x40020400

08000ccc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]
	countfull++;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_UART_RxCpltCallback+0x5c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <HAL_UART_RxCpltCallback+0x5c>)
 8000cdc:	6013      	str	r3, [r2, #0]
	sscanf(RxCoord, "(%d,%d,%d)", &received_x, &received_y, &area);
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_UART_RxCpltCallback+0x60>)
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_UART_RxCpltCallback+0x64>)
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_UART_RxCpltCallback+0x68>)
 8000ce6:	4914      	ldr	r1, [pc, #80]	; (8000d38 <HAL_UART_RxCpltCallback+0x6c>)
 8000ce8:	4814      	ldr	r0, [pc, #80]	; (8000d3c <HAL_UART_RxCpltCallback+0x70>)
 8000cea:	f004 fc0b 	bl	8005504 <siscanf>
	if (received_x == 0 && area == 0){
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_RxCpltCallback+0x68>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d106      	bne.n	8000d04 <HAL_UART_RxCpltCallback+0x38>
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_UART_RxCpltCallback+0x60>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <HAL_UART_RxCpltCallback+0x38>
		motor_stop();
 8000cfe:	f000 f907 	bl	8000f10 <motor_stop>
 8000d02:	e008      	b.n	8000d16 <HAL_UART_RxCpltCallback+0x4a>
	}
	else{
	motor_handle(received_x, area, stop_flag);
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_UART_RxCpltCallback+0x68>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_UART_RxCpltCallback+0x60>)
 8000d0a:	6811      	ldr	r1, [r2, #0]
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <HAL_UART_RxCpltCallback+0x74>)
 8000d0e:	8812      	ldrh	r2, [r2, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f819 	bl	8000d48 <motor_handle>
	//motor_right();
	}
	HAL_UART_Receive_DMA(&huart1, RxCoord, SIZE_RX_COORD);
 8000d16:	220a      	movs	r2, #10
 8000d18:	4908      	ldr	r1, [pc, #32]	; (8000d3c <HAL_UART_RxCpltCallback+0x70>)
 8000d1a:	480a      	ldr	r0, [pc, #40]	; (8000d44 <HAL_UART_RxCpltCallback+0x78>)
 8000d1c:	f003 faaf 	bl	800427e <HAL_UART_Receive_DMA>

}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000208 	.word	0x20000208
 8000d2c:	20000220 	.word	0x20000220
 8000d30:	2000021c 	.word	0x2000021c
 8000d34:	20000218 	.word	0x20000218
 8000d38:	080067ac 	.word	0x080067ac
 8000d3c:	2000020c 	.word	0x2000020c
 8000d40:	20000204 	.word	0x20000204
 8000d44:	20000150 	.word	0x20000150

08000d48 <motor_handle>:

void motor_handle(int x, int area, uint16_t stop_flag){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4613      	mov	r3, r2
 8000d54:	80fb      	strh	r3, [r7, #6]

	if (stop_flag == 0){
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d12a      	bne.n	8000db2 <motor_handle+0x6a>
		if(x < 46){
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b2d      	cmp	r3, #45	; 0x2d
 8000d60:	dc04      	bgt.n	8000d6c <motor_handle+0x24>
			motor_right();
 8000d62:	f000 f85d 	bl	8000e20 <motor_right>
			status = 1;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <motor_handle+0x78>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
		}
		if (x > 66){
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b42      	cmp	r3, #66	; 0x42
 8000d70:	dd04      	ble.n	8000d7c <motor_handle+0x34>
			motor_left();
 8000d72:	f000 f87d 	bl	8000e70 <motor_left>
			status = 2;
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <motor_handle+0x78>)
 8000d78:	2202      	movs	r2, #2
 8000d7a:	601a      	str	r2, [r3, #0]
		}
		if (x >= 46 && x <= 66){
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b2d      	cmp	r3, #45	; 0x2d
 8000d80:	dd07      	ble.n	8000d92 <motor_handle+0x4a>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2b42      	cmp	r3, #66	; 0x42
 8000d86:	dc04      	bgt.n	8000d92 <motor_handle+0x4a>
			motor_stop();
 8000d88:	f000 f8c2 	bl	8000f10 <motor_stop>
			status = 3;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <motor_handle+0x78>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
		}
		if (x==0){
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <motor_handle+0x54>
			motor_stop();
 8000d98:	f000 f8ba 	bl	8000f10 <motor_stop>
		}

		if (area < 12){
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b0b      	cmp	r3, #11
 8000da0:	dc01      	bgt.n	8000da6 <motor_handle+0x5e>
			motor_stright();
 8000da2:	f000 f88d 	bl	8000ec0 <motor_stright>
		}

		if (area > 20){
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b14      	cmp	r3, #20
 8000daa:	dd04      	ble.n	8000db6 <motor_handle+0x6e>
			motor_backwards();
 8000dac:	f000 f810 	bl	8000dd0 <motor_backwards>
		}
	else{
		motor_stop();
	}

}
 8000db0:	e001      	b.n	8000db6 <motor_handle+0x6e>
		motor_stop();
 8000db2:	f000 f8ad 	bl	8000f10 <motor_stop>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000224 	.word	0x20000224

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <motor_backwards>:
	PID = P + I + D;
	return PID;
}


void motor_backwards(void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN1, 1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <motor_backwards+0x40>)
 8000dda:	f001 fa37 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <motor_backwards+0x40>)
 8000de4:	f001 fa32 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2101      	movs	r1, #1
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <motor_backwards+0x44>)
 8000dee:	f001 fa2d 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2102      	movs	r1, #2
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <motor_backwards+0x44>)
 8000df8:	f001 fa28 	bl	800224c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,25);
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <motor_backwards+0x48>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2219      	movs	r2, #25
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,25);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <motor_backwards+0x4c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2219      	movs	r2, #25
 8000e0a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020400 	.word	0x40020400
 8000e18:	20000108 	.word	0x20000108
 8000e1c:	200000c0 	.word	0x200000c0

08000e20 <motor_right>:

void motor_right(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN1, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <motor_right+0x40>)
 8000e2a:	f001 fa0f 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2, 1);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <motor_right+0x40>)
 8000e34:	f001 fa0a 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <motor_right+0x44>)
 8000e3e:	f001 fa05 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4, 1);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2102      	movs	r1, #2
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <motor_right+0x44>)
 8000e48:	f001 fa00 	bl	800224c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,0);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <motor_right+0x48>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,15);
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <motor_right+0x4c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	220f      	movs	r2, #15
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38

// 5 seconds turn the robot in aprox 240 degrees
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400
 8000e68:	20000108 	.word	0x20000108
 8000e6c:	200000c0 	.word	0x200000c0

08000e70 <motor_left>:

void motor_left(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN1, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <motor_left+0x40>)
 8000e7a:	f001 f9e7 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <motor_left+0x40>)
 8000e84:	f001 f9e2 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <motor_left+0x44>)
 8000e8e:	f001 f9dd 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4, 1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2102      	movs	r1, #2
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <motor_left+0x44>)
 8000e98:	f001 f9d8 	bl	800224c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,15);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <motor_left+0x48>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,0);
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <motor_left+0x4c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	20000108 	.word	0x20000108
 8000ebc:	200000c0 	.word	0x200000c0

08000ec0 <motor_stright>:

void motor_stright(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN1, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <motor_stright+0x40>)
 8000eca:	f001 f9bf 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2, 1);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <motor_stright+0x40>)
 8000ed4:	f001 f9ba 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2101      	movs	r1, #1
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <motor_stright+0x44>)
 8000ede:	f001 f9b5 	bl	800224c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <motor_stright+0x44>)
 8000ee8:	f001 f9b0 	bl	800224c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,20);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <motor_stright+0x48>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2214      	movs	r2, #20
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,25);
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <motor_stright+0x4c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2219      	movs	r2, #25
 8000efa:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020400 	.word	0x40020400
 8000f08:	20000108 	.word	0x20000108
 8000f0c:	200000c0 	.word	0x200000c0

08000f10 <motor_stop>:

void motor_stop(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, IN1, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <motor_stop+0x40>)
 8000f1a:	f001 f997 	bl	800224c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, IN2, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <motor_stop+0x40>)
 8000f24:	f001 f992 	bl	800224c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <motor_stop+0x44>)
 8000f2e:	f001 f98d 	bl	800224c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, IN4, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2102      	movs	r1, #2
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <motor_stop+0x44>)
 8000f38:	f001 f988 	bl	800224c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,0);
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <motor_stop+0x48>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,0);
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <motor_stop+0x4c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	20000108 	.word	0x20000108
 8000f5c:	200000c0 	.word	0x200000c0

08000f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d135      	bne.n	800103e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a25      	ldr	r2, [pc, #148]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4813      	ldr	r0, [pc, #76]	; (8001074 <HAL_TIM_Base_MspInit+0xc4>)
 8001028:	f000 ff8c 	bl	8001f44 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	201b      	movs	r0, #27
 8001032:	f000 fb4e 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001036:	201b      	movs	r0, #27
 8001038:	f000 fb67 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800103c:	e012      	b.n	8001064 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001046:	d10d      	bne.n	8001064 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010000 	.word	0x40010000
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10d      	bne.n	80010a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_TIM_PWM_MspInit+0x40>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40000c00 	.word	0x40000c00
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d11e      	bne.n	800111c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_TIM_MspPostInit+0xb0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_TIM_MspPostInit+0xb0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_TIM_MspPostInit+0xb0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fa:	2302      	movs	r3, #2
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800110a:	2301      	movs	r3, #1
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4816      	ldr	r0, [pc, #88]	; (8001170 <HAL_TIM_MspPostInit+0xb4>)
 8001116:	f000 ff15 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800111a:	e022      	b.n	8001162 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_TIM_MspPostInit+0xb8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d11d      	bne.n	8001162 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_TIM_MspPostInit+0xb0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_TIM_MspPostInit+0xb0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_TIM_MspPostInit+0xb0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM5_CH1_Pin;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001152:	2302      	movs	r3, #2
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM5_CH1_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <HAL_TIM_MspPostInit+0xb4>)
 800115e:	f000 fef1 	bl	8001f44 <HAL_GPIO_Init>
}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000
 8001174:	40000c00 	.word	0x40000c00

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a34      	ldr	r2, [pc, #208]	; (8001268 <HAL_UART_MspInit+0xf0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d162      	bne.n	8001260 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b33      	ldr	r3, [pc, #204]	; (800126c <HAL_UART_MspInit+0xf4>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a32      	ldr	r2, [pc, #200]	; (800126c <HAL_UART_MspInit+0xf4>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <HAL_UART_MspInit+0xf4>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <HAL_UART_MspInit+0xf4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a2b      	ldr	r2, [pc, #172]	; (800126c <HAL_UART_MspInit+0xf4>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_UART_MspInit+0xf4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80011d2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e4:	2307      	movs	r3, #7
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <HAL_UART_MspInit+0xf8>)
 80011f0:	f000 fea8 	bl	8001f44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_UART_MspInit+0xfc>)
 80011f6:	4a20      	ldr	r2, [pc, #128]	; (8001278 <HAL_UART_MspInit+0x100>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_UART_MspInit+0xfc>)
 80011fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001200:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_UART_MspInit+0xfc>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_UART_MspInit+0xfc>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_UART_MspInit+0xfc>)
 8001210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001214:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_UART_MspInit+0xfc>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_UART_MspInit+0xfc>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_UART_MspInit+0xfc>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_UART_MspInit+0xfc>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_MspInit+0xfc>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001234:	480f      	ldr	r0, [pc, #60]	; (8001274 <HAL_UART_MspInit+0xfc>)
 8001236:	f000 fa83 	bl	8001740 <HAL_DMA_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001240:	f7ff fdc0 	bl	8000dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_UART_MspInit+0xfc>)
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_UART_MspInit+0xfc>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2107      	movs	r1, #7
 8001254:	2025      	movs	r0, #37	; 0x25
 8001256:	f000 fa3c 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800125a:	2025      	movs	r0, #37	; 0x25
 800125c:	f000 fa55 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40011000 	.word	0x40011000
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000
 8001274:	20000194 	.word	0x20000194
 8001278:	40026440 	.word	0x40026440

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f8e4 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM1_CC_IRQHandler+0x10>)
 80012d6:	f001 feed 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
 }
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000078 	.word	0x20000078

080012e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <USART1_IRQHandler+0x10>)
 80012ea:	f002 fff9 	bl	80042e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000150 	.word	0x20000150

080012f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <DMA2_Stream2_IRQHandler+0x10>)
 80012fe:	f000 fbb7 	bl	8001a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000194 	.word	0x20000194

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f004 f918 	bl	8005570 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20020000 	.word	0x20020000
 800136c:	00000400 	.word	0x00000400
 8001370:	20000228 	.word	0x20000228
 8001374:	20000378 	.word	0x20000378

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013a2:	490e      	ldr	r1, [pc, #56]	; (80013dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b8:	4c0b      	ldr	r4, [pc, #44]	; (80013e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ffd7 	bl	8001378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f004 f8d7 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff f9d7 	bl	8000780 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013e0:	08006944 	.word	0x08006944
  ldr r2, =_sbss
 80013e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013e8:	20000378 	.word	0x20000378

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f94f 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	200f      	movs	r0, #15
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fd9c 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
   if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f967 	bl	8001726 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f92f 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	2000022c 	.word	0x2000022c

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000022c 	.word	0x2000022c

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff feb6 	bl	80014bc <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e099      	b.n	8001890 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177c:	e00f      	b.n	800179e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177e:	f7ff fe9d 	bl	80014bc <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b05      	cmp	r3, #5
 800178a:	d908      	bls.n	800179e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e078      	b.n	8001890 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e8      	bne.n	800177e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_DMA_Init+0x158>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d107      	bne.n	8001808 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4313      	orrs	r3, r2
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f023 0307 	bic.w	r3, r3, #7
 800181e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2b04      	cmp	r3, #4
 8001830:	d117      	bne.n	8001862 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fb01 	bl	8001e4c <DMA_CheckFifoParam>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800185e:	2301      	movs	r3, #1
 8001860:	e016      	b.n	8001890 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fab8 	bl	8001de0 <DMA_CalcBaseAndBitshift>
 8001870:	4603      	mov	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	223f      	movs	r2, #63	; 0x3f
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	f010803f 	.word	0xf010803f

0800189c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA_Start_IT+0x26>
 80018be:	2302      	movs	r3, #2
 80018c0:	e040      	b.n	8001944 <HAL_DMA_Start_IT+0xa8>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d12f      	bne.n	8001936 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2202      	movs	r2, #2
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fa4a 	bl	8001d84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	223f      	movs	r2, #63	; 0x3f
 80018f6:	409a      	lsls	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0216 	orr.w	r2, r2, #22
 800190a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e005      	b.n	8001942 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800193e:	2302      	movs	r3, #2
 8001940:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800195a:	f7ff fdaf 	bl	80014bc <HAL_GetTick>
 800195e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d008      	beq.n	800197e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e052      	b.n	8001a24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0216 	bic.w	r2, r2, #22
 800198c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <HAL_DMA_Abort+0x62>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0208 	bic.w	r2, r2, #8
 80019bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ce:	e013      	b.n	80019f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d0:	f7ff fd74 	bl	80014bc <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d90c      	bls.n	80019f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2203      	movs	r2, #3
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e015      	b.n	8001a24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e4      	bne.n	80019d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	223f      	movs	r2, #63	; 0x3f
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d004      	beq.n	8001a4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00c      	b.n	8001a64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a7c:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <HAL_DMA_IRQHandler+0x248>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a8e      	ldr	r2, [pc, #568]	; (8001cbc <HAL_DMA_IRQHandler+0x24c>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0a9b      	lsrs	r3, r3, #10
 8001a88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d01a      	beq.n	8001adc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	2208      	movs	r2, #8
 8001aca:	409a      	lsls	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d012      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b16:	2204      	movs	r2, #4
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d012      	beq.n	8001b48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00b      	beq.n	8001b48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	2204      	movs	r2, #4
 8001b36:	409a      	lsls	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	f043 0204 	orr.w	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d043      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d03c      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d024      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
 8001b9e:	e01f      	b.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01b      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e016      	b.n	8001be0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d107      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0208 	bic.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	2220      	movs	r2, #32
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 808f 	beq.w	8001d10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8087 	beq.w	8001d10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2220      	movs	r2, #32
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d136      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0216 	bic.w	r2, r2, #22
 8001c28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x1da>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0208 	bic.w	r2, r2, #8
 8001c58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	223f      	movs	r2, #63	; 0x3f
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d07e      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
        }
        return;
 8001c86:	e079      	b.n	8001d7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01d      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d031      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
 8001cb4:	e02c      	b.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d023      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e01e      	b.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10f      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0210 	bic.w	r2, r2, #16
 8001cee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d032      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2205      	movs	r2, #5
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d307      	bcc.n	8001d58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f2      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x2cc>
 8001d56:	e000      	b.n	8001d5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
 8001d7a:	e000      	b.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d7c:	bf00      	nop
    }
  }
}
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001da0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	d108      	bne.n	8001dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dc2:	e007      	b.n	8001dd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3b10      	subs	r3, #16
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <DMA_CalcBaseAndBitshift+0x64>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <DMA_CalcBaseAndBitshift+0x68>)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d909      	bls.n	8001e22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e16:	f023 0303 	bic.w	r3, r3, #3
 8001e1a:	1d1a      	adds	r2, r3, #4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e20:	e007      	b.n	8001e32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	aaaaaaab 	.word	0xaaaaaaab
 8001e48:	080067dc 	.word	0x080067dc

08001e4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d11f      	bne.n	8001ea6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d856      	bhi.n	8001f1a <DMA_CheckFifoParam+0xce>
 8001e6c:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <DMA_CheckFifoParam+0x28>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e97 	.word	0x08001e97
 8001e7c:	08001e85 	.word	0x08001e85
 8001e80:	08001f1b 	.word	0x08001f1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d046      	beq.n	8001f1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e94:	e043      	b.n	8001f1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e9e:	d140      	bne.n	8001f22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea4:	e03d      	b.n	8001f22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eae:	d121      	bne.n	8001ef4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d837      	bhi.n	8001f26 <DMA_CheckFifoParam+0xda>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <DMA_CheckFifoParam+0x70>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001ed3 	.word	0x08001ed3
 8001ec4:	08001ecd 	.word	0x08001ecd
 8001ec8:	08001ee5 	.word	0x08001ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed0:	e030      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d025      	beq.n	8001f2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee2:	e022      	b.n	8001f2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eec:	d11f      	bne.n	8001f2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ef2:	e01c      	b.n	8001f2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d903      	bls.n	8001f02 <DMA_CheckFifoParam+0xb6>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f00:	e018      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
      break;
 8001f06:	e015      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e00b      	b.n	8001f32 <DMA_CheckFifoParam+0xe6>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e00a      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e008      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f22:	bf00      	nop
 8001f24:	e006      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f26:	bf00      	nop
 8001f28:	e004      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f2a:	bf00      	nop
 8001f2c:	e002      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f2e:	bf00      	nop
 8001f30:	e000      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f32:	bf00      	nop
    }
  } 
  
  return status; 
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e159      	b.n	8002214 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 8148 	bne.w	800220e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d005      	beq.n	8001f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d130      	bne.n	8001ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0201 	and.w	r2, r3, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b03      	cmp	r3, #3
 8002002:	d017      	beq.n	8002034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d123      	bne.n	8002088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a2 	beq.w	800220e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b57      	ldr	r3, [pc, #348]	; (800222c <HAL_GPIO_Init+0x2e8>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_GPIO_Init+0x2e8>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b54      	ldr	r3, [pc, #336]	; (800222c <HAL_GPIO_Init+0x2e8>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e6:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_GPIO_Init+0x2ec>)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_GPIO_Init+0x2f0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x202>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x2f4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x1fe>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a47      	ldr	r2, [pc, #284]	; (800223c <HAL_GPIO_Init+0x2f8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x1fa>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_GPIO_Init+0x2fc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x1f6>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a45      	ldr	r2, [pc, #276]	; (8002244 <HAL_GPIO_Init+0x300>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x1f2>
 8002132:	2304      	movs	r3, #4
 8002134:	e008      	b.n	8002148 <HAL_GPIO_Init+0x204>
 8002136:	2307      	movs	r3, #7
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x204>
 800213a:	2303      	movs	r3, #3
 800213c:	e004      	b.n	8002148 <HAL_GPIO_Init+0x204>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_Init+0x204>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x204>
 8002146:	2300      	movs	r3, #0
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	f002 0203 	and.w	r2, r2, #3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002158:	4935      	ldr	r1, [pc, #212]	; (8002230 <HAL_GPIO_Init+0x2ec>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <HAL_GPIO_Init+0x304>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <HAL_GPIO_Init+0x304>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_GPIO_Init+0x304>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_GPIO_Init+0x304>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_GPIO_Init+0x304>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021de:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <HAL_GPIO_Init+0x304>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_GPIO_Init+0x304>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002208:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <HAL_GPIO_Init+0x304>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	f67f aea2 	bls.w	8001f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40013800 	.word	0x40013800
 8002234:	40020000 	.word	0x40020000
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40021000 	.word	0x40021000
 8002248:	40013c00 	.word	0x40013c00

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002268:	e003      	b.n	8002272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	041a      	lsls	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	619a      	str	r2, [r3, #24]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e267      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d075      	beq.n	800238a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229e:	4b88      	ldr	r3, [pc, #544]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d00c      	beq.n	80022c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022aa:	4b85      	ldr	r3, [pc, #532]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d112      	bne.n	80022dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b6:	4b82      	ldr	r3, [pc, #520]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c2:	d10b      	bne.n	80022dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	4b7e      	ldr	r3, [pc, #504]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d05b      	beq.n	8002388 <HAL_RCC_OscConfig+0x108>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d157      	bne.n	8002388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e242      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_OscConfig+0x74>
 80022e6:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a75      	ldr	r2, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e01d      	b.n	8002330 <HAL_RCC_OscConfig+0xb0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x98>
 80022fe:	4b70      	ldr	r3, [pc, #448]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6f      	ldr	r2, [pc, #444]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a6c      	ldr	r2, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0xb0>
 8002318:	4b69      	ldr	r3, [pc, #420]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a68      	ldr	r2, [pc, #416]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 800231e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b66      	ldr	r3, [pc, #408]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a65      	ldr	r2, [pc, #404]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 800232a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff f8c0 	bl	80014bc <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff f8bc 	bl	80014bc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e207      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b5b      	ldr	r3, [pc, #364]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0xc0>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff f8ac 	bl	80014bc <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff f8a8 	bl	80014bc <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1f3      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0xe8>
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d063      	beq.n	800245e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002396:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d11c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ae:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d116      	bne.n	80023e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_RCC_OscConfig+0x152>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e1c7      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4937      	ldr	r1, [pc, #220]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	e03a      	b.n	800245e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f0:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_RCC_OscConfig+0x244>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7ff f861 	bl	80014bc <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fe:	f7ff f85d 	bl	80014bc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1a8      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4925      	ldr	r1, [pc, #148]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
 8002430:	e015      	b.n	800245e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_OscConfig+0x244>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7ff f840 	bl	80014bc <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002440:	f7ff f83c 	bl	80014bc <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e187      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d036      	beq.n	80024d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d016      	beq.n	80024a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_RCC_OscConfig+0x248>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7ff f820 	bl	80014bc <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff f81c 	bl	80014bc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e167      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_OscConfig+0x240>)
 8002494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x200>
 800249e:	e01b      	b.n	80024d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_OscConfig+0x248>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7ff f809 	bl	80014bc <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	e00e      	b.n	80024cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ae:	f7ff f805 	bl	80014bc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d907      	bls.n	80024cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e150      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	42470000 	.word	0x42470000
 80024c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ea      	bne.n	80024ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8097 	beq.w	8002614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ea:	4b81      	ldr	r3, [pc, #516]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	4b7d      	ldr	r3, [pc, #500]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a7c      	ldr	r2, [pc, #496]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b7a      	ldr	r3, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b77      	ldr	r3, [pc, #476]	; (80026f4 <HAL_RCC_OscConfig+0x474>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b74      	ldr	r3, [pc, #464]	; (80026f4 <HAL_RCC_OscConfig+0x474>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a73      	ldr	r2, [pc, #460]	; (80026f4 <HAL_RCC_OscConfig+0x474>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7fe ffc5 	bl	80014bc <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe ffc1 	bl	80014bc <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e10c      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x474>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x2ea>
 800255c:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a63      	ldr	r2, [pc, #396]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	e01c      	b.n	80025a4 <HAL_RCC_OscConfig+0x324>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x30c>
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a5e      	ldr	r2, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
 800257e:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a5b      	ldr	r2, [pc, #364]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0x324>
 800258c:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	4b55      	ldr	r3, [pc, #340]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a54      	ldr	r2, [pc, #336]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 800259e:	f023 0304 	bic.w	r3, r3, #4
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d015      	beq.n	80025d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe ff86 	bl	80014bc <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe ff82 	bl	80014bc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0cb      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ca:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ee      	beq.n	80025b4 <HAL_RCC_OscConfig+0x334>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7fe ff70 	bl	80014bc <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe ff6c 	bl	80014bc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0b5      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ee      	bne.n	80025e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002608:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a38      	ldr	r2, [pc, #224]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a1 	beq.w	8002760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b08      	cmp	r3, #8
 8002628:	d05c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d141      	bne.n	80026b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_RCC_OscConfig+0x478>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe ff40 	bl	80014bc <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe ff3c 	bl	80014bc <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e087      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	019b      	lsls	r3, r3, #6
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	3b01      	subs	r3, #1
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	491b      	ldr	r1, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x478>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe ff15 	bl	80014bc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe ff11 	bl	80014bc <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e05c      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x416>
 80026b4:	e054      	b.n	8002760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x478>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fefe 	bl	80014bc <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fefa 	bl	80014bc <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e045      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x470>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x444>
 80026e2:	e03d      	b.n	8002760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e038      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4ec>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d028      	beq.n	800275c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d121      	bne.n	800275c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d11a      	bne.n	800275c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800272c:	4013      	ands	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002734:	4293      	cmp	r3, r2
 8002736:	d111      	bne.n	800275c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0cc      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b68      	ldr	r3, [pc, #416]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d90c      	bls.n	80027ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b8      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b50      	ldr	r3, [pc, #320]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494d      	ldr	r1, [pc, #308]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d044      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d119      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d003      	beq.n	800282e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282a:	2b03      	cmp	r3, #3
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b3f      	ldr	r3, [pc, #252]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e067      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b37      	ldr	r3, [pc, #220]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4934      	ldr	r1, [pc, #208]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe fe2c 	bl	80014bc <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fe28 	bl	80014bc <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e04f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d20c      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e032      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4916      	ldr	r1, [pc, #88]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f821 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	490a      	ldr	r1, [pc, #40]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	5ccb      	ldrb	r3, [r1, r3]
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fd8c 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00
 800292c:	40023800 	.word	0x40023800
 8002930:	080067c4 	.word	0x080067c4
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002940:	b090      	sub	sp, #64	; 0x40
 8002942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
 8002948:	2300      	movs	r3, #0
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294c:	2300      	movs	r3, #0
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002954:	4b59      	ldr	r3, [pc, #356]	; (8002abc <HAL_RCC_GetSysClockFreq+0x180>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d00d      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x40>
 8002960:	2b08      	cmp	r3, #8
 8002962:	f200 80a1 	bhi.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x34>
 800296a:	2b04      	cmp	r3, #4
 800296c:	d003      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x3a>
 800296e:	e09b      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002974:	e09b      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002976:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800297a:	e098      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800297c:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <HAL_RCC_GetSysClockFreq+0x180>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002986:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_RCC_GetSysClockFreq+0x180>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d028      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCC_GetSysClockFreq+0x180>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	2200      	movs	r2, #0
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	627a      	str	r2, [r7, #36]	; 0x24
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029a4:	2100      	movs	r1, #0
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80029a8:	fb03 f201 	mul.w	r2, r3, r1
 80029ac:	2300      	movs	r3, #0
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	4a43      	ldr	r2, [pc, #268]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80029b6:	fba0 1202 	umull	r1, r2, r0, r2
 80029ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029bc:	460a      	mov	r2, r1
 80029be:	62ba      	str	r2, [r7, #40]	; 0x28
 80029c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c2:	4413      	add	r3, r2
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	2200      	movs	r2, #0
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	61fa      	str	r2, [r7, #28]
 80029ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029d6:	f7fd fc5b 	bl	8000290 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4613      	mov	r3, r2
 80029e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e2:	e053      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4b35      	ldr	r3, [pc, #212]	; (8002abc <HAL_RCC_GetSysClockFreq+0x180>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	2200      	movs	r2, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	617a      	str	r2, [r7, #20]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029f6:	f04f 0b00 	mov.w	fp, #0
 80029fa:	4652      	mov	r2, sl
 80029fc:	465b      	mov	r3, fp
 80029fe:	f04f 0000 	mov.w	r0, #0
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	0159      	lsls	r1, r3, #5
 8002a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0c:	0150      	lsls	r0, r2, #5
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	ebb2 080a 	subs.w	r8, r2, sl
 8002a16:	eb63 090b 	sbc.w	r9, r3, fp
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a2e:	ebb2 0408 	subs.w	r4, r2, r8
 8002a32:	eb63 0509 	sbc.w	r5, r3, r9
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	00eb      	lsls	r3, r5, #3
 8002a40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a44:	00e2      	lsls	r2, r4, #3
 8002a46:	4614      	mov	r4, r2
 8002a48:	461d      	mov	r5, r3
 8002a4a:	eb14 030a 	adds.w	r3, r4, sl
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	eb45 030b 	adc.w	r3, r5, fp
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a62:	4629      	mov	r1, r5
 8002a64:	028b      	lsls	r3, r1, #10
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	028a      	lsls	r2, r1, #10
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	2200      	movs	r2, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	60fa      	str	r2, [r7, #12]
 8002a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a80:	f7fd fc06 	bl	8000290 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3740      	adds	r7, #64	; 0x40
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	017d7840 	.word	0x017d7840

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	080067d4 	.word	0x080067d4

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b0c:	f7ff ffdc 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0b5b      	lsrs	r3, r3, #13
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	080067d4 	.word	0x080067d4

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e041      	b.n	8002bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fa2a 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fe3a 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e041      	b.n	8002c64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fe fa3f 	bl	8001078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f000 fdeb 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start+0x24>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e022      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x6a>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d109      	bne.n	8002caa <HAL_TIM_PWM_Start+0x3e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e015      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x6a>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d109      	bne.n	8002cc4 <HAL_TIM_PWM_Start+0x58>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e008      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x6a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e068      	b.n	8002db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_PWM_Start+0x82>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	e013      	b.n	8002d16 <HAL_TIM_PWM_Start+0xaa>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d104      	bne.n	8002cfe <HAL_TIM_PWM_Start+0x92>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cfc:	e00b      	b.n	8002d16 <HAL_TIM_PWM_Start+0xaa>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_PWM_Start+0xa2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d0c:	e003      	b.n	8002d16 <HAL_TIM_PWM_Start+0xaa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f926 	bl	8003f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <HAL_TIM_PWM_Start+0x14c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_TIM_PWM_Start+0x14c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d013      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <HAL_TIM_PWM_Start+0x150>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <HAL_TIM_PWM_Start+0x154>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <HAL_TIM_PWM_Start+0x158>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_TIM_PWM_Start+0x15c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d111      	bne.n	8002d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	d010      	beq.n	8002dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9c:	e007      	b.n	8002dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40014000 	.word	0x40014000

08002dcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e041      	b.n	8002e62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f839 	bl	8002e6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 fcec 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_IC_Start_IT+0x1e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e013      	b.n	8002ec6 <HAL_TIM_IC_Start_IT+0x46>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_IC_Start_IT+0x2e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e00b      	b.n	8002ec6 <HAL_TIM_IC_Start_IT+0x46>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_IC_Start_IT+0x3e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e003      	b.n	8002ec6 <HAL_TIM_IC_Start_IT+0x46>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d104      	bne.n	8002ed8 <HAL_TIM_IC_Start_IT+0x58>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e013      	b.n	8002f00 <HAL_TIM_IC_Start_IT+0x80>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d104      	bne.n	8002ee8 <HAL_TIM_IC_Start_IT+0x68>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e00b      	b.n	8002f00 <HAL_TIM_IC_Start_IT+0x80>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d104      	bne.n	8002ef8 <HAL_TIM_IC_Start_IT+0x78>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e003      	b.n	8002f00 <HAL_TIM_IC_Start_IT+0x80>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	7bbb      	ldrb	r3, [r7, #14]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f08:	7b7b      	ldrb	r3, [r7, #13]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d001      	beq.n	8002f12 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0c2      	b.n	8003098 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_IC_Start_IT+0xa2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f20:	e013      	b.n	8002f4a <HAL_TIM_IC_Start_IT+0xca>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_IC_Start_IT+0xb2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f30:	e00b      	b.n	8002f4a <HAL_TIM_IC_Start_IT+0xca>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_IC_Start_IT+0xc2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f40:	e003      	b.n	8002f4a <HAL_TIM_IC_Start_IT+0xca>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_IC_Start_IT+0xda>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x102>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_IC_Start_IT+0xea>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x102>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_IC_Start_IT+0xfa>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x102>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d841      	bhi.n	800300c <HAL_TIM_IC_Start_IT+0x18c>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_TIM_IC_Start_IT+0x110>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	0800300d 	.word	0x0800300d
 8002f98:	0800300d 	.word	0x0800300d
 8002f9c:	0800300d 	.word	0x0800300d
 8002fa0:	08002fd7 	.word	0x08002fd7
 8002fa4:	0800300d 	.word	0x0800300d
 8002fa8:	0800300d 	.word	0x0800300d
 8002fac:	0800300d 	.word	0x0800300d
 8002fb0:	08002fe9 	.word	0x08002fe9
 8002fb4:	0800300d 	.word	0x0800300d
 8002fb8:	0800300d 	.word	0x0800300d
 8002fbc:	0800300d 	.word	0x0800300d
 8002fc0:	08002ffb 	.word	0x08002ffb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0202 	orr.w	r2, r2, #2
 8002fd2:	60da      	str	r2, [r3, #12]
      break;
 8002fd4:	e01d      	b.n	8003012 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0204 	orr.w	r2, r2, #4
 8002fe4:	60da      	str	r2, [r3, #12]
      break;
 8002fe6:	e014      	b.n	8003012 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	60da      	str	r2, [r3, #12]
      break;
 8002ff8:	e00b      	b.n	8003012 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0210 	orr.w	r2, r2, #16
 8003008:	60da      	str	r2, [r3, #12]
      break;
 800300a:	e002      	b.n	8003012 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      break;
 8003010:	bf00      	nop
  }

  if (status == HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d13e      	bne.n	8003096 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2201      	movs	r2, #1
 800301e:	6839      	ldr	r1, [r7, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 ffa5 	bl	8003f70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_TIM_IC_Start_IT+0x220>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d018      	beq.n	8003062 <HAL_TIM_IC_Start_IT+0x1e2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d013      	beq.n	8003062 <HAL_TIM_IC_Start_IT+0x1e2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_TIM_IC_Start_IT+0x224>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_TIM_IC_Start_IT+0x1e2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_TIM_IC_Start_IT+0x228>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_TIM_IC_Start_IT+0x1e2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <HAL_TIM_IC_Start_IT+0x22c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_TIM_IC_Start_IT+0x1e2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <HAL_TIM_IC_Start_IT+0x230>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d111      	bne.n	8003086 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b06      	cmp	r3, #6
 8003072:	d010      	beq.n	8003096 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	e007      	b.n	8003096 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40010000 	.word	0x40010000
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40014000 	.word	0x40014000

080030b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0202 	mvn.w	r2, #2
 80030e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fa82 	bl	8000600 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb54 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb5b 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b04      	cmp	r3, #4
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0204 	mvn.w	r2, #4
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fa58 	bl	8000600 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb2a 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb31 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b08      	cmp	r3, #8
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b08      	cmp	r3, #8
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0208 	mvn.w	r2, #8
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2204      	movs	r2, #4
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fa2e 	bl	8000600 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fb00 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fb07 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d122      	bne.n	800320c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d11b      	bne.n	800320c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0210 	mvn.w	r2, #16
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2208      	movs	r2, #8
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd fa04 	bl	8000600 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fad6 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fadd 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0201 	mvn.w	r2, #1
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fab0 	bl	8003798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d107      	bne.n	8003264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 ff24 	bl	80040ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d10e      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d107      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 faa2 	bl	80037d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d10e      	bne.n	80032bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0220 	mvn.w	r2, #32
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 feee 	bl	8004098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e088      	b.n	80033f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11b      	bne.n	8003328 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f000 fc7e 	bl	8003c00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 020c 	bic.w	r2, r2, #12
 8003312:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	619a      	str	r2, [r3, #24]
 8003326:	e060      	b.n	80033ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d11c      	bne.n	8003368 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f000 fcf6 	bl	8003d2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003350:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6999      	ldr	r1, [r3, #24]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	021a      	lsls	r2, r3, #8
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	619a      	str	r2, [r3, #24]
 8003366:	e040      	b.n	80033ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d11b      	bne.n	80033a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f000 fd43 	bl	8003e08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 020c 	bic.w	r2, r2, #12
 8003390:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69d9      	ldr	r1, [r3, #28]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
 80033a4:	e021      	b.n	80033ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d11c      	bne.n	80033e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f000 fd60 	bl	8003e80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69d9      	ldr	r1, [r3, #28]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	021a      	lsls	r2, r3, #8
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	61da      	str	r2, [r3, #28]
 80033e4:	e001      	b.n	80033ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003416:	2302      	movs	r3, #2
 8003418:	e0ae      	b.n	8003578 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b0c      	cmp	r3, #12
 8003426:	f200 809f 	bhi.w	8003568 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800342a:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003465 	.word	0x08003465
 8003434:	08003569 	.word	0x08003569
 8003438:	08003569 	.word	0x08003569
 800343c:	08003569 	.word	0x08003569
 8003440:	080034a5 	.word	0x080034a5
 8003444:	08003569 	.word	0x08003569
 8003448:	08003569 	.word	0x08003569
 800344c:	08003569 	.word	0x08003569
 8003450:	080034e7 	.word	0x080034e7
 8003454:	08003569 	.word	0x08003569
 8003458:	08003569 	.word	0x08003569
 800345c:	08003569 	.word	0x08003569
 8003460:	08003527 	.word	0x08003527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa3c 	bl	80038e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0204 	bic.w	r2, r2, #4
 800348e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	619a      	str	r2, [r3, #24]
      break;
 80034a2:	e064      	b.n	800356e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa82 	bl	80039b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	021a      	lsls	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      break;
 80034e4:	e043      	b.n	800356e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 facd 	bl	8003a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0208 	orr.w	r2, r2, #8
 8003500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0204 	bic.w	r2, r2, #4
 8003510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
      break;
 8003524:	e023      	b.n	800356e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fb17 	bl	8003b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	61da      	str	r2, [r3, #28]
      break;
 8003566:	e002      	b.n	800356e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
      break;
 800356c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_TIM_ConfigClockSource+0x1c>
 8003598:	2302      	movs	r3, #2
 800359a:	e0b4      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x186>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d4:	d03e      	beq.n	8003654 <HAL_TIM_ConfigClockSource+0xd4>
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035da:	f200 8087 	bhi.w	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	f000 8086 	beq.w	80036f2 <HAL_TIM_ConfigClockSource+0x172>
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d87f      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 80035ec:	2b70      	cmp	r3, #112	; 0x70
 80035ee:	d01a      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xa6>
 80035f0:	2b70      	cmp	r3, #112	; 0x70
 80035f2:	d87b      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b60      	cmp	r3, #96	; 0x60
 80035f6:	d050      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x11a>
 80035f8:	2b60      	cmp	r3, #96	; 0x60
 80035fa:	d877      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b50      	cmp	r3, #80	; 0x50
 80035fe:	d03c      	beq.n	800367a <HAL_TIM_ConfigClockSource+0xfa>
 8003600:	2b50      	cmp	r3, #80	; 0x50
 8003602:	d873      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d058      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x13a>
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d86f      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b30      	cmp	r3, #48	; 0x30
 800360e:	d064      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15a>
 8003610:	2b30      	cmp	r3, #48	; 0x30
 8003612:	d86b      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b20      	cmp	r3, #32
 8003616:	d060      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15a>
 8003618:	2b20      	cmp	r3, #32
 800361a:	d867      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05c      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b10      	cmp	r3, #16
 8003622:	d05a      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15a>
 8003624:	e062      	b.n	80036ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f000 fc7b 	bl	8003f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	609a      	str	r2, [r3, #8]
      break;
 8003652:	e04f      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6899      	ldr	r1, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f000 fc64 	bl	8003f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003676:	609a      	str	r2, [r3, #8]
      break;
 8003678:	e03c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	461a      	mov	r2, r3
 8003688:	f000 fb22 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2150      	movs	r1, #80	; 0x50
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fc31 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 8003698:	e02c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 fb7e 	bl	8003da8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2160      	movs	r1, #96	; 0x60
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc21 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80036b8:	e01c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 fb02 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2140      	movs	r1, #64	; 0x40
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fc11 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80036d8:	e00c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f000 fc08 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80036ea:	e003      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e000      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d831      	bhi.n	8003788 <HAL_TIM_ReadCapturedValue+0x78>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003761 	.word	0x08003761
 8003730:	08003789 	.word	0x08003789
 8003734:	08003789 	.word	0x08003789
 8003738:	08003789 	.word	0x08003789
 800373c:	0800376b 	.word	0x0800376b
 8003740:	08003789 	.word	0x08003789
 8003744:	08003789 	.word	0x08003789
 8003748:	08003789 	.word	0x08003789
 800374c:	08003775 	.word	0x08003775
 8003750:	08003789 	.word	0x08003789
 8003754:	08003789 	.word	0x08003789
 8003758:	08003789 	.word	0x08003789
 800375c:	0800377f 	.word	0x0800377f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	60fb      	str	r3, [r7, #12]

      break;
 8003768:	e00f      	b.n	800378a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	60fb      	str	r3, [r7, #12]

      break;
 8003772:	e00a      	b.n	800378a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	60fb      	str	r3, [r7, #12]

      break;
 800377c:	e005      	b.n	800378a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	60fb      	str	r3, [r7, #12]

      break;
 8003786:	e000      	b.n	800378a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003788:	bf00      	nop
  }

  return tmpreg;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a34      	ldr	r2, [pc, #208]	; (80038cc <TIM_Base_SetConfig+0xe4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <TIM_Base_SetConfig+0xe8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <TIM_Base_SetConfig+0xec>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x38>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <TIM_Base_SetConfig+0xf0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a25      	ldr	r2, [pc, #148]	; (80038cc <TIM_Base_SetConfig+0xe4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01b      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d017      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <TIM_Base_SetConfig+0xe8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <TIM_Base_SetConfig+0xec>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00f      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a20      	ldr	r2, [pc, #128]	; (80038d8 <TIM_Base_SetConfig+0xf0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00b      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <TIM_Base_SetConfig+0xf4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <TIM_Base_SetConfig+0xf8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <TIM_Base_SetConfig+0xfc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <TIM_Base_SetConfig+0xe4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d103      	bne.n	80038b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	615a      	str	r2, [r3, #20]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40000c00 	.word	0x40000c00
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f023 0302 	bic.w	r3, r3, #2
 8003930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <TIM_OC1_SetConfig+0xc8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10c      	bne.n	800395e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0308 	bic.w	r3, r3, #8
 800394a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <TIM_OC1_SetConfig+0xc8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d111      	bne.n	800398a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	621a      	str	r2, [r3, #32]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40010000 	.word	0x40010000

080039b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f023 0210 	bic.w	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0320 	bic.w	r3, r3, #32
 80039fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <TIM_OC2_SetConfig+0xd4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10d      	bne.n	8003a30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <TIM_OC2_SetConfig+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d113      	bne.n	8003a60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000

08003a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <TIM_OC3_SetConfig+0xd0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <TIM_OC3_SetConfig+0xd0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d113      	bne.n	8003b36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40010000 	.word	0x40010000

08003b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <TIM_OC4_SetConfig+0x9c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d109      	bne.n	8003bd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000

08003c00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <TIM_TI1_SetConfig+0xbc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <TIM_TI1_SetConfig+0x56>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d00f      	beq.n	8003c56 <TIM_TI1_SetConfig+0x56>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <TIM_TI1_SetConfig+0xc0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_TI1_SetConfig+0x56>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <TIM_TI1_SetConfig+0xc4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_TI1_SetConfig+0x56>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <TIM_TI1_SetConfig+0xc8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_TI1_SetConfig+0x56>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <TIM_TI1_SetConfig+0xcc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <TIM_TI1_SetConfig+0x5a>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <TIM_TI1_SetConfig+0x5c>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e003      	b.n	8003c7a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f023 030a 	bic.w	r3, r3, #10
 8003c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 030a 	and.w	r3, r3, #10
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40014000 	.word	0x40014000

08003cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f023 0201 	bic.w	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 030a 	bic.w	r3, r3, #10
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 0210 	bic.w	r2, r3, #16
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	031b      	lsls	r3, r3, #12
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 0210 	bic.w	r2, r3, #16
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	031b      	lsls	r3, r3, #12
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	621a      	str	r2, [r3, #32]
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f023 0303 	bic.w	r3, r3, #3
 8003e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003e58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ebe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	031b      	lsls	r3, r3, #12
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	031b      	lsls	r3, r3, #12
 8003ed8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f043 0307 	orr.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	021a      	lsls	r2, r3, #8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	609a      	str	r2, [r3, #8]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1a      	ldr	r2, [r3, #32]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e050      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d013      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40014000 	.word	0x40014000

08004098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e03f      	b.n	8004152 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd f846 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	; 0x24
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 ff69 	bl	8004fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08a      	sub	sp, #40	; 0x28
 800415e:	af02      	add	r7, sp, #8
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d17c      	bne.n	8004274 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_UART_Transmit+0x2c>
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e075      	b.n	8004276 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_UART_Transmit+0x3e>
 8004194:	2302      	movs	r3, #2
 8004196:	e06e      	b.n	8004276 <HAL_UART_Transmit+0x11c>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	; 0x21
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ae:	f7fd f985 	bl	80014bc <HAL_GetTick>
 80041b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d108      	bne.n	80041dc <HAL_UART_Transmit+0x82>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e003      	b.n	80041e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041ec:	e02a      	b.n	8004244 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fc21 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e036      	b.n	8004276 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e007      	b.n	8004236 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1cf      	bne.n	80041ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2140      	movs	r1, #64	; 0x40
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fbf1 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e006      	b.n	8004276 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	4613      	mov	r3, r2
 800428a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	d11d      	bne.n	80042d4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Receive_DMA+0x26>
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e016      	b.n	80042d6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Receive_DMA+0x38>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e00f      	b.n	80042d6 <HAL_UART_Receive_DMA+0x58>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fc26 	bl	8004b1c <UART_Start_Receive_DMA>
 80042d0:	4603      	mov	r3, r0
 80042d2:	e000      	b.n	80042d6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b0ba      	sub	sp, #232	; 0xe8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800431e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_UART_IRQHandler+0x66>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fd91 	bl	8004e66 <UART_Receive_IT>
      return;
 8004344:	e256      	b.n	80047f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80de 	beq.w	800450c <HAL_UART_IRQHandler+0x22c>
 8004350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004360:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80d1 	beq.w	800450c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_UART_IRQHandler+0xae>
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f043 0201 	orr.w	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <HAL_UART_IRQHandler+0xd2>
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_UART_IRQHandler+0xf6>
 80043be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f043 0204 	orr.w	r2, r3, #4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d011      	beq.n	8004406 <HAL_UART_IRQHandler+0x126>
 80043e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d105      	bne.n	80043fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0208 	orr.w	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 81ed 	beq.w	80047ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_UART_IRQHandler+0x14e>
 800441c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fd1c 	bl	8004e66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <HAL_UART_IRQHandler+0x17a>
 8004452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d04f      	beq.n	80044fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fc24 	bl	8004ca8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d141      	bne.n	80044f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800449a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800449e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1d9      	bne.n	800446e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d013      	beq.n	80044ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	4a7d      	ldr	r2, [pc, #500]	; (80046bc <HAL_UART_IRQHandler+0x3dc>)
 80044c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd faac 	bl	8001a2c <HAL_DMA_Abort_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e4:	4610      	mov	r0, r2
 80044e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	e00e      	b.n	8004508 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f99a 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e00a      	b.n	8004508 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f996 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e006      	b.n	8004508 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f992 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004506:	e170      	b.n	80047ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	bf00      	nop
    return;
 800450a:	e16e      	b.n	80047ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 814a 	bne.w	80047aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8143 	beq.w	80047aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 813c 	beq.w	80047aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	f040 80b4 	bne.w	80046c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004564:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8140 	beq.w	80047ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004576:	429a      	cmp	r2, r3
 8004578:	f080 8139 	bcs.w	80047ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004582:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	f000 8088 	beq.w	80046a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	330c      	adds	r3, #12
 80045ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1d9      	bne.n	8004592 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004602:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004606:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800460a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e1      	bne.n	80045de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800462a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800463e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004640:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004644:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800464c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e3      	bne.n	800461a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004684:	65ba      	str	r2, [r7, #88]	; 0x58
 8004686:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800468a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e3      	bne.n	8004660 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd f955 	bl	800194c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8c0 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046b8:	e099      	b.n	80047ee <HAL_UART_IRQHandler+0x50e>
 80046ba:	bf00      	nop
 80046bc:	08004d6f 	.word	0x08004d6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 808b 	beq.w	80047f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8086 	beq.w	80047f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800470a:	647a      	str	r2, [r7, #68]	; 0x44
 800470c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3314      	adds	r3, #20
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	623b      	str	r3, [r7, #32]
   return(result);
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3314      	adds	r3, #20
 800473e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004742:	633a      	str	r2, [r7, #48]	; 0x30
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e3      	bne.n	800471e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	60fb      	str	r3, [r7, #12]
   return(result);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0310 	bic.w	r3, r3, #16
 800477a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004788:	61fa      	str	r2, [r7, #28]
 800478a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69b9      	ldr	r1, [r7, #24]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	617b      	str	r3, [r7, #20]
   return(result);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e3      	bne.n	8004764 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800479c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f848 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a8:	e023      	b.n	80047f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_UART_IRQHandler+0x4ea>
 80047b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fae7 	bl	8004d96 <UART_Transmit_IT>
    return;
 80047c8:	e014      	b.n	80047f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <HAL_UART_IRQHandler+0x514>
 80047d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fb27 	bl	8004e36 <UART_EndTransmit_IT>
    return;
 80047e8:	e004      	b.n	80047f4 <HAL_UART_IRQHandler+0x514>
    return;
 80047ea:	bf00      	nop
 80047ec:	e002      	b.n	80047f4 <HAL_UART_IRQHandler+0x514>
      return;
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <HAL_UART_IRQHandler+0x514>
      return;
 80047f2:	bf00      	nop
  }
}
 80047f4:	37e8      	adds	r7, #232	; 0xe8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop

080047fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b09c      	sub	sp, #112	; 0x70
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d172      	bne.n	8004952 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800486c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486e:	2200      	movs	r2, #0
 8004870:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004888:	66bb      	str	r3, [r7, #104]	; 0x68
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004892:	65ba      	str	r2, [r7, #88]	; 0x58
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	667b      	str	r3, [r7, #100]	; 0x64
 80048be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3314      	adds	r3, #20
 80048c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048c6:	647a      	str	r2, [r7, #68]	; 0x44
 80048c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e5      	bne.n	80048a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	623b      	str	r3, [r7, #32]
   return(result);
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	663b      	str	r3, [r7, #96]	; 0x60
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048fa:	633a      	str	r2, [r7, #48]	; 0x30
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	2b01      	cmp	r3, #1
 800491c:	d119      	bne.n	8004952 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	60fb      	str	r3, [r7, #12]
   return(result);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f023 0310 	bic.w	r3, r3, #16
 8004934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800493e:	61fa      	str	r2, [r7, #28]
 8004940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	617b      	str	r3, [r7, #20]
   return(result);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e5      	bne.n	800491e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	2b01      	cmp	r3, #1
 8004958:	d106      	bne.n	8004968 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800495e:	4619      	mov	r1, r3
 8004960:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004962:	f7ff ff69 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004966:	e002      	b.n	800496e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004968:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800496a:	f7fc f9af 	bl	8000ccc <HAL_UART_RxCpltCallback>
}
 800496e:	bf00      	nop
 8004970:	3770      	adds	r7, #112	; 0x70
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	d108      	bne.n	800499e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	b29b      	uxth	r3, r3
 8004994:	4619      	mov	r1, r3
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff ff4e 	bl	8004838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800499c:	e002      	b.n	80049a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff ff36 	bl	8004810 <HAL_UART_RxHalfCpltCallback>
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b21      	cmp	r3, #33	; 0x21
 80049de:	d108      	bne.n	80049f2 <UART_DMAError+0x46>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2200      	movs	r2, #0
 80049ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049ec:	68b8      	ldr	r0, [r7, #8]
 80049ee:	f000 f933 	bl	8004c58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b22      	cmp	r3, #34	; 0x22
 8004a12:	d108      	bne.n	8004a26 <UART_DMAError+0x7a>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f000 f941 	bl	8004ca8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f043 0210 	orr.w	r2, r3, #16
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a32:	68b8      	ldr	r0, [r7, #8]
 8004a34:	f7ff fef6 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b090      	sub	sp, #64	; 0x40
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	e050      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d04c      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a60:	f7fc fd2c 	bl	80014bc <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d241      	bcs.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a90:	637a      	str	r2, [r7, #52]	; 0x34
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac4:	623a      	str	r2, [r7, #32]
 8004ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69f9      	ldr	r1, [r7, #28]
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e00f      	b.n	8004b14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d09f      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3740      	adds	r7, #64	; 0x40
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b098      	sub	sp, #96	; 0x60
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2222      	movs	r2, #34	; 0x22
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	4a40      	ldr	r2, [pc, #256]	; (8004c4c <UART_Start_Receive_DMA+0x130>)
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	4a3f      	ldr	r2, [pc, #252]	; (8004c50 <UART_Start_Receive_DMA+0x134>)
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	4a3e      	ldr	r2, [pc, #248]	; (8004c54 <UART_Start_Receive_DMA+0x138>)
 8004b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	2200      	movs	r2, #0
 8004b62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	f7fc fe8e 	bl	800189c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d019      	beq.n	8004bda <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004bc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e5      	bne.n	8004ba6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3314      	adds	r3, #20
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3314      	adds	r3, #20
 8004bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bfa:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3314      	adds	r3, #20
 8004c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c24:	653b      	str	r3, [r7, #80]	; 0x50
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3314      	adds	r3, #20
 8004c2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6a39      	ldr	r1, [r7, #32]
 8004c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3760      	adds	r7, #96	; 0x60
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08004851 	.word	0x08004851
 8004c50:	08004977 	.word	0x08004977
 8004c54:	080049ad 	.word	0x080049ad

08004c58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	61ba      	str	r2, [r7, #24]
 8004c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6979      	ldr	r1, [r7, #20]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004c9c:	bf00      	nop
 8004c9e:	3724      	adds	r7, #36	; 0x24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b095      	sub	sp, #84	; 0x54
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd0:	643a      	str	r2, [r7, #64]	; 0x40
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3314      	adds	r3, #20
 8004d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e5      	bne.n	8004ce4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d119      	bne.n	8004d54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0310 	bic.w	r3, r3, #16
 8004d36:	647b      	str	r3, [r7, #68]	; 0x44
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d40:	61ba      	str	r2, [r7, #24]
 8004d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6979      	ldr	r1, [r7, #20]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e5      	bne.n	8004d20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d62:	bf00      	nop
 8004d64:	3754      	adds	r7, #84	; 0x54
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff fd4b 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b21      	cmp	r3, #33	; 0x21
 8004da8:	d13e      	bne.n	8004e28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	d114      	bne.n	8004dde <UART_Transmit_IT+0x48>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	1c9a      	adds	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]
 8004ddc:	e008      	b.n	8004df0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	1c59      	adds	r1, r3, #1
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6211      	str	r1, [r2, #32]
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10f      	bne.n	8004e24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fcd0 	bl	80047fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b08c      	sub	sp, #48	; 0x30
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b22      	cmp	r3, #34	; 0x22
 8004e78:	f040 80ab 	bne.w	8004fd2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e84:	d117      	bne.n	8004eb6 <UART_Receive_IT+0x50>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d113      	bne.n	8004eb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	1c9a      	adds	r2, r3, #2
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb4:	e026      	b.n	8004f04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d007      	beq.n	8004eda <UART_Receive_IT+0x74>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <UART_Receive_IT+0x82>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e008      	b.n	8004efa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4619      	mov	r1, r3
 8004f12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d15a      	bne.n	8004fce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0220 	bic.w	r2, r2, #32
 8004f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d135      	bne.n	8004fc4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f023 0310 	bic.w	r3, r3, #16
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	623a      	str	r2, [r7, #32]
 8004f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d10a      	bne.n	8004fb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fc3b 	bl	8004838 <HAL_UARTEx_RxEventCallback>
 8004fc2:	e002      	b.n	8004fca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fb fe81 	bl	8000ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e002      	b.n	8004fd4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3730      	adds	r7, #48	; 0x30
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe0:	b0c0      	sub	sp, #256	; 0x100
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	68d9      	ldr	r1, [r3, #12]
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	ea40 0301 	orr.w	r3, r0, r1
 8005004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	431a      	orrs	r2, r3
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	431a      	orrs	r2, r3
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005034:	f021 010c 	bic.w	r1, r1, #12
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005042:	430b      	orrs	r3, r1
 8005044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	6999      	ldr	r1, [r3, #24]
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	ea40 0301 	orr.w	r3, r0, r1
 8005062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b8f      	ldr	r3, [pc, #572]	; (80052a8 <UART_SetConfig+0x2cc>)
 800506c:	429a      	cmp	r2, r3
 800506e:	d005      	beq.n	800507c <UART_SetConfig+0xa0>
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b8d      	ldr	r3, [pc, #564]	; (80052ac <UART_SetConfig+0x2d0>)
 8005078:	429a      	cmp	r2, r3
 800507a:	d104      	bne.n	8005086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800507c:	f7fd fd44 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8005080:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005084:	e003      	b.n	800508e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005086:	f7fd fd2b 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 800508a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005098:	f040 810c 	bne.w	80052b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800509c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050ae:	4622      	mov	r2, r4
 80050b0:	462b      	mov	r3, r5
 80050b2:	1891      	adds	r1, r2, r2
 80050b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80050b6:	415b      	adcs	r3, r3
 80050b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050be:	4621      	mov	r1, r4
 80050c0:	eb12 0801 	adds.w	r8, r2, r1
 80050c4:	4629      	mov	r1, r5
 80050c6:	eb43 0901 	adc.w	r9, r3, r1
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050de:	4690      	mov	r8, r2
 80050e0:	4699      	mov	r9, r3
 80050e2:	4623      	mov	r3, r4
 80050e4:	eb18 0303 	adds.w	r3, r8, r3
 80050e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050ec:	462b      	mov	r3, r5
 80050ee:	eb49 0303 	adc.w	r3, r9, r3
 80050f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005102:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800510a:	460b      	mov	r3, r1
 800510c:	18db      	adds	r3, r3, r3
 800510e:	653b      	str	r3, [r7, #80]	; 0x50
 8005110:	4613      	mov	r3, r2
 8005112:	eb42 0303 	adc.w	r3, r2, r3
 8005116:	657b      	str	r3, [r7, #84]	; 0x54
 8005118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800511c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005120:	f7fb f8b6 	bl	8000290 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <UART_SetConfig+0x2d4>)
 800512a:	fba3 2302 	umull	r2, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	011c      	lsls	r4, r3, #4
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800513c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	64b9      	str	r1, [r7, #72]	; 0x48
 800514c:	415b      	adcs	r3, r3
 800514e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005154:	4641      	mov	r1, r8
 8005156:	eb12 0a01 	adds.w	sl, r2, r1
 800515a:	4649      	mov	r1, r9
 800515c:	eb43 0b01 	adc.w	fp, r3, r1
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800516c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005174:	4692      	mov	sl, r2
 8005176:	469b      	mov	fp, r3
 8005178:	4643      	mov	r3, r8
 800517a:	eb1a 0303 	adds.w	r3, sl, r3
 800517e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005182:	464b      	mov	r3, r9
 8005184:	eb4b 0303 	adc.w	r3, fp, r3
 8005188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005198:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800519c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051a0:	460b      	mov	r3, r1
 80051a2:	18db      	adds	r3, r3, r3
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
 80051a6:	4613      	mov	r3, r2
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	647b      	str	r3, [r7, #68]	; 0x44
 80051ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051b6:	f7fb f86b 	bl	8000290 <__aeabi_uldivmod>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4611      	mov	r1, r2
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <UART_SetConfig+0x2d4>)
 80051c2:	fba3 2301 	umull	r2, r3, r3, r1
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2264      	movs	r2, #100	; 0x64
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	1acb      	subs	r3, r1, r3
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051d6:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <UART_SetConfig+0x2d4>)
 80051d8:	fba3 2302 	umull	r2, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e4:	441c      	add	r4, r3
 80051e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005200:	415b      	adcs	r3, r3
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005208:	4641      	mov	r1, r8
 800520a:	1851      	adds	r1, r2, r1
 800520c:	6339      	str	r1, [r7, #48]	; 0x30
 800520e:	4649      	mov	r1, r9
 8005210:	414b      	adcs	r3, r1
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005220:	4659      	mov	r1, fp
 8005222:	00cb      	lsls	r3, r1, #3
 8005224:	4651      	mov	r1, sl
 8005226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522a:	4651      	mov	r1, sl
 800522c:	00ca      	lsls	r2, r1, #3
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	4603      	mov	r3, r0
 8005234:	4642      	mov	r2, r8
 8005236:	189b      	adds	r3, r3, r2
 8005238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800523c:	464b      	mov	r3, r9
 800523e:	460a      	mov	r2, r1
 8005240:	eb42 0303 	adc.w	r3, r2, r3
 8005244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005254:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800525c:	460b      	mov	r3, r1
 800525e:	18db      	adds	r3, r3, r3
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
 8005262:	4613      	mov	r3, r2
 8005264:	eb42 0303 	adc.w	r3, r2, r3
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800526e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005272:	f7fb f80d 	bl	8000290 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4b0d      	ldr	r3, [pc, #52]	; (80052b0 <UART_SetConfig+0x2d4>)
 800527c:	fba3 1302 	umull	r1, r3, r3, r2
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <UART_SetConfig+0x2d4>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	f003 0207 	and.w	r2, r3, #7
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4422      	add	r2, r4
 80052a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a4:	e106      	b.n	80054b4 <UART_SetConfig+0x4d8>
 80052a6:	bf00      	nop
 80052a8:	40011000 	.word	0x40011000
 80052ac:	40011400 	.word	0x40011400
 80052b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052c6:	4642      	mov	r2, r8
 80052c8:	464b      	mov	r3, r9
 80052ca:	1891      	adds	r1, r2, r2
 80052cc:	6239      	str	r1, [r7, #32]
 80052ce:	415b      	adcs	r3, r3
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
 80052d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052d6:	4641      	mov	r1, r8
 80052d8:	1854      	adds	r4, r2, r1
 80052da:	4649      	mov	r1, r9
 80052dc:	eb43 0501 	adc.w	r5, r3, r1
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	00eb      	lsls	r3, r5, #3
 80052ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ee:	00e2      	lsls	r2, r4, #3
 80052f0:	4614      	mov	r4, r2
 80052f2:	461d      	mov	r5, r3
 80052f4:	4643      	mov	r3, r8
 80052f6:	18e3      	adds	r3, r4, r3
 80052f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052fc:	464b      	mov	r3, r9
 80052fe:	eb45 0303 	adc.w	r3, r5, r3
 8005302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005322:	4629      	mov	r1, r5
 8005324:	008b      	lsls	r3, r1, #2
 8005326:	4621      	mov	r1, r4
 8005328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532c:	4621      	mov	r1, r4
 800532e:	008a      	lsls	r2, r1, #2
 8005330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005334:	f7fa ffac 	bl	8000290 <__aeabi_uldivmod>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4b60      	ldr	r3, [pc, #384]	; (80054c0 <UART_SetConfig+0x4e4>)
 800533e:	fba3 2302 	umull	r2, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	011c      	lsls	r4, r3, #4
 8005346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005350:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	1891      	adds	r1, r2, r2
 800535e:	61b9      	str	r1, [r7, #24]
 8005360:	415b      	adcs	r3, r3
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005368:	4641      	mov	r1, r8
 800536a:	1851      	adds	r1, r2, r1
 800536c:	6139      	str	r1, [r7, #16]
 800536e:	4649      	mov	r1, r9
 8005370:	414b      	adcs	r3, r1
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005380:	4659      	mov	r1, fp
 8005382:	00cb      	lsls	r3, r1, #3
 8005384:	4651      	mov	r1, sl
 8005386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538a:	4651      	mov	r1, sl
 800538c:	00ca      	lsls	r2, r1, #3
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	4603      	mov	r3, r0
 8005394:	4642      	mov	r2, r8
 8005396:	189b      	adds	r3, r3, r2
 8005398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800539c:	464b      	mov	r3, r9
 800539e:	460a      	mov	r2, r1
 80053a0:	eb42 0303 	adc.w	r3, r2, r3
 80053a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053c0:	4649      	mov	r1, r9
 80053c2:	008b      	lsls	r3, r1, #2
 80053c4:	4641      	mov	r1, r8
 80053c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ca:	4641      	mov	r1, r8
 80053cc:	008a      	lsls	r2, r1, #2
 80053ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053d2:	f7fa ff5d 	bl	8000290 <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4611      	mov	r1, r2
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <UART_SetConfig+0x4e4>)
 80053de:	fba3 2301 	umull	r2, r3, r3, r1
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2264      	movs	r2, #100	; 0x64
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	1acb      	subs	r3, r1, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a33      	ldr	r2, [pc, #204]	; (80054c0 <UART_SetConfig+0x4e4>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053fc:	441c      	add	r4, r3
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	673b      	str	r3, [r7, #112]	; 0x70
 8005406:	677a      	str	r2, [r7, #116]	; 0x74
 8005408:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800540c:	4642      	mov	r2, r8
 800540e:	464b      	mov	r3, r9
 8005410:	1891      	adds	r1, r2, r2
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	415b      	adcs	r3, r3
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800541c:	4641      	mov	r1, r8
 800541e:	1851      	adds	r1, r2, r1
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	4649      	mov	r1, r9
 8005424:	414b      	adcs	r3, r1
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005434:	4659      	mov	r1, fp
 8005436:	00cb      	lsls	r3, r1, #3
 8005438:	4651      	mov	r1, sl
 800543a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800543e:	4651      	mov	r1, sl
 8005440:	00ca      	lsls	r2, r1, #3
 8005442:	4610      	mov	r0, r2
 8005444:	4619      	mov	r1, r3
 8005446:	4603      	mov	r3, r0
 8005448:	4642      	mov	r2, r8
 800544a:	189b      	adds	r3, r3, r2
 800544c:	66bb      	str	r3, [r7, #104]	; 0x68
 800544e:	464b      	mov	r3, r9
 8005450:	460a      	mov	r2, r1
 8005452:	eb42 0303 	adc.w	r3, r2, r3
 8005456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	663b      	str	r3, [r7, #96]	; 0x60
 8005462:	667a      	str	r2, [r7, #100]	; 0x64
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005470:	4649      	mov	r1, r9
 8005472:	008b      	lsls	r3, r1, #2
 8005474:	4641      	mov	r1, r8
 8005476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800547a:	4641      	mov	r1, r8
 800547c:	008a      	lsls	r2, r1, #2
 800547e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005482:	f7fa ff05 	bl	8000290 <__aeabi_uldivmod>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <UART_SetConfig+0x4e4>)
 800548c:	fba3 1302 	umull	r1, r3, r3, r2
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	2164      	movs	r1, #100	; 0x64
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	3332      	adds	r3, #50	; 0x32
 800549e:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <UART_SetConfig+0x4e4>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f003 020f 	and.w	r2, r3, #15
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4422      	add	r2, r4
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054ba:	46bd      	mov	sp, r7
 80054bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c0:	51eb851f 	.word	0x51eb851f

080054c4 <siprintf>:
 80054c4:	b40e      	push	{r1, r2, r3}
 80054c6:	b500      	push	{lr}
 80054c8:	b09c      	sub	sp, #112	; 0x70
 80054ca:	ab1d      	add	r3, sp, #116	; 0x74
 80054cc:	9002      	str	r0, [sp, #8]
 80054ce:	9006      	str	r0, [sp, #24]
 80054d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d4:	4809      	ldr	r0, [pc, #36]	; (80054fc <siprintf+0x38>)
 80054d6:	9107      	str	r1, [sp, #28]
 80054d8:	9104      	str	r1, [sp, #16]
 80054da:	4909      	ldr	r1, [pc, #36]	; (8005500 <siprintf+0x3c>)
 80054dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e0:	9105      	str	r1, [sp, #20]
 80054e2:	6800      	ldr	r0, [r0, #0]
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	a902      	add	r1, sp, #8
 80054e8:	f000 f9c0 	bl	800586c <_svfiprintf_r>
 80054ec:	9b02      	ldr	r3, [sp, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	b01c      	add	sp, #112	; 0x70
 80054f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f8:	b003      	add	sp, #12
 80054fa:	4770      	bx	lr
 80054fc:	20000058 	.word	0x20000058
 8005500:	ffff0208 	.word	0xffff0208

08005504 <siscanf>:
 8005504:	b40e      	push	{r1, r2, r3}
 8005506:	b510      	push	{r4, lr}
 8005508:	b09f      	sub	sp, #124	; 0x7c
 800550a:	ac21      	add	r4, sp, #132	; 0x84
 800550c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005510:	f854 2b04 	ldr.w	r2, [r4], #4
 8005514:	9201      	str	r2, [sp, #4]
 8005516:	f8ad 101c 	strh.w	r1, [sp, #28]
 800551a:	9004      	str	r0, [sp, #16]
 800551c:	9008      	str	r0, [sp, #32]
 800551e:	f7fa fe5f 	bl	80001e0 <strlen>
 8005522:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <siscanf+0x50>)
 8005524:	9005      	str	r0, [sp, #20]
 8005526:	9009      	str	r0, [sp, #36]	; 0x24
 8005528:	930d      	str	r3, [sp, #52]	; 0x34
 800552a:	480b      	ldr	r0, [pc, #44]	; (8005558 <siscanf+0x54>)
 800552c:	9a01      	ldr	r2, [sp, #4]
 800552e:	6800      	ldr	r0, [r0, #0]
 8005530:	9403      	str	r4, [sp, #12]
 8005532:	2300      	movs	r3, #0
 8005534:	9311      	str	r3, [sp, #68]	; 0x44
 8005536:	9316      	str	r3, [sp, #88]	; 0x58
 8005538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800553c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005540:	a904      	add	r1, sp, #16
 8005542:	4623      	mov	r3, r4
 8005544:	f000 faea 	bl	8005b1c <__ssvfiscanf_r>
 8005548:	b01f      	add	sp, #124	; 0x7c
 800554a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800554e:	b003      	add	sp, #12
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	0800555d 	.word	0x0800555d
 8005558:	20000058 	.word	0x20000058

0800555c <__seofread>:
 800555c:	2000      	movs	r0, #0
 800555e:	4770      	bx	lr

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000058 	.word	0x20000058

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	; (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	; (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	; (80055c0 <__libc_init_array+0x44>)
 8005590:	f001 f8f6 	bl	8006780 <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	0800693c 	.word	0x0800693c
 80055b8:	0800693c 	.word	0x0800693c
 80055bc:	0800693c 	.word	0x0800693c
 80055c0:	08006940 	.word	0x08006940

080055c4 <__retarget_lock_acquire_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <__retarget_lock_release_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <_free_r>:
 80055c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ca:	2900      	cmp	r1, #0
 80055cc:	d044      	beq.n	8005658 <_free_r+0x90>
 80055ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f1a1 0404 	sub.w	r4, r1, #4
 80055da:	bfb8      	it	lt
 80055dc:	18e4      	addlt	r4, r4, r3
 80055de:	f000 f8df 	bl	80057a0 <__malloc_lock>
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <_free_r+0x94>)
 80055e4:	9801      	ldr	r0, [sp, #4]
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	b933      	cbnz	r3, 80055f8 <_free_r+0x30>
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	b003      	add	sp, #12
 80055f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f4:	f000 b8da 	b.w	80057ac <__malloc_unlock>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d908      	bls.n	800560e <_free_r+0x46>
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	1961      	adds	r1, r4, r5
 8005600:	428b      	cmp	r3, r1
 8005602:	bf01      	itttt	eq
 8005604:	6819      	ldreq	r1, [r3, #0]
 8005606:	685b      	ldreq	r3, [r3, #4]
 8005608:	1949      	addeq	r1, r1, r5
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	e7ed      	b.n	80055ea <_free_r+0x22>
 800560e:	461a      	mov	r2, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b10b      	cbz	r3, 8005618 <_free_r+0x50>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d9fa      	bls.n	800560e <_free_r+0x46>
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	1855      	adds	r5, r2, r1
 800561c:	42a5      	cmp	r5, r4
 800561e:	d10b      	bne.n	8005638 <_free_r+0x70>
 8005620:	6824      	ldr	r4, [r4, #0]
 8005622:	4421      	add	r1, r4
 8005624:	1854      	adds	r4, r2, r1
 8005626:	42a3      	cmp	r3, r4
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	d1e0      	bne.n	80055ee <_free_r+0x26>
 800562c:	681c      	ldr	r4, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	6053      	str	r3, [r2, #4]
 8005632:	440c      	add	r4, r1
 8005634:	6014      	str	r4, [r2, #0]
 8005636:	e7da      	b.n	80055ee <_free_r+0x26>
 8005638:	d902      	bls.n	8005640 <_free_r+0x78>
 800563a:	230c      	movs	r3, #12
 800563c:	6003      	str	r3, [r0, #0]
 800563e:	e7d6      	b.n	80055ee <_free_r+0x26>
 8005640:	6825      	ldr	r5, [r4, #0]
 8005642:	1961      	adds	r1, r4, r5
 8005644:	428b      	cmp	r3, r1
 8005646:	bf04      	itt	eq
 8005648:	6819      	ldreq	r1, [r3, #0]
 800564a:	685b      	ldreq	r3, [r3, #4]
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	bf04      	itt	eq
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	6054      	str	r4, [r2, #4]
 8005656:	e7ca      	b.n	80055ee <_free_r+0x26>
 8005658:	b003      	add	sp, #12
 800565a:	bd30      	pop	{r4, r5, pc}
 800565c:	20000370 	.word	0x20000370

08005660 <sbrk_aligned>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4e0e      	ldr	r6, [pc, #56]	; (800569c <sbrk_aligned+0x3c>)
 8005664:	460c      	mov	r4, r1
 8005666:	6831      	ldr	r1, [r6, #0]
 8005668:	4605      	mov	r5, r0
 800566a:	b911      	cbnz	r1, 8005672 <sbrk_aligned+0x12>
 800566c:	f000 ff3a 	bl	80064e4 <_sbrk_r>
 8005670:	6030      	str	r0, [r6, #0]
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 ff35 	bl	80064e4 <_sbrk_r>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d00a      	beq.n	8005694 <sbrk_aligned+0x34>
 800567e:	1cc4      	adds	r4, r0, #3
 8005680:	f024 0403 	bic.w	r4, r4, #3
 8005684:	42a0      	cmp	r0, r4
 8005686:	d007      	beq.n	8005698 <sbrk_aligned+0x38>
 8005688:	1a21      	subs	r1, r4, r0
 800568a:	4628      	mov	r0, r5
 800568c:	f000 ff2a 	bl	80064e4 <_sbrk_r>
 8005690:	3001      	adds	r0, #1
 8005692:	d101      	bne.n	8005698 <sbrk_aligned+0x38>
 8005694:	f04f 34ff 	mov.w	r4, #4294967295
 8005698:	4620      	mov	r0, r4
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	20000374 	.word	0x20000374

080056a0 <_malloc_r>:
 80056a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a4:	1ccd      	adds	r5, r1, #3
 80056a6:	f025 0503 	bic.w	r5, r5, #3
 80056aa:	3508      	adds	r5, #8
 80056ac:	2d0c      	cmp	r5, #12
 80056ae:	bf38      	it	cc
 80056b0:	250c      	movcc	r5, #12
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	4607      	mov	r7, r0
 80056b6:	db01      	blt.n	80056bc <_malloc_r+0x1c>
 80056b8:	42a9      	cmp	r1, r5
 80056ba:	d905      	bls.n	80056c8 <_malloc_r+0x28>
 80056bc:	230c      	movs	r3, #12
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	2600      	movs	r6, #0
 80056c2:	4630      	mov	r0, r6
 80056c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800579c <_malloc_r+0xfc>
 80056cc:	f000 f868 	bl	80057a0 <__malloc_lock>
 80056d0:	f8d8 3000 	ldr.w	r3, [r8]
 80056d4:	461c      	mov	r4, r3
 80056d6:	bb5c      	cbnz	r4, 8005730 <_malloc_r+0x90>
 80056d8:	4629      	mov	r1, r5
 80056da:	4638      	mov	r0, r7
 80056dc:	f7ff ffc0 	bl	8005660 <sbrk_aligned>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	4604      	mov	r4, r0
 80056e4:	d155      	bne.n	8005792 <_malloc_r+0xf2>
 80056e6:	f8d8 4000 	ldr.w	r4, [r8]
 80056ea:	4626      	mov	r6, r4
 80056ec:	2e00      	cmp	r6, #0
 80056ee:	d145      	bne.n	800577c <_malloc_r+0xdc>
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d048      	beq.n	8005786 <_malloc_r+0xe6>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	4631      	mov	r1, r6
 80056f8:	4638      	mov	r0, r7
 80056fa:	eb04 0903 	add.w	r9, r4, r3
 80056fe:	f000 fef1 	bl	80064e4 <_sbrk_r>
 8005702:	4581      	cmp	r9, r0
 8005704:	d13f      	bne.n	8005786 <_malloc_r+0xe6>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	1a6d      	subs	r5, r5, r1
 800570a:	4629      	mov	r1, r5
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff ffa7 	bl	8005660 <sbrk_aligned>
 8005712:	3001      	adds	r0, #1
 8005714:	d037      	beq.n	8005786 <_malloc_r+0xe6>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	442b      	add	r3, r5
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	f8d8 3000 	ldr.w	r3, [r8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d038      	beq.n	8005796 <_malloc_r+0xf6>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	42a2      	cmp	r2, r4
 8005728:	d12b      	bne.n	8005782 <_malloc_r+0xe2>
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e00f      	b.n	8005750 <_malloc_r+0xb0>
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	1b52      	subs	r2, r2, r5
 8005734:	d41f      	bmi.n	8005776 <_malloc_r+0xd6>
 8005736:	2a0b      	cmp	r2, #11
 8005738:	d917      	bls.n	800576a <_malloc_r+0xca>
 800573a:	1961      	adds	r1, r4, r5
 800573c:	42a3      	cmp	r3, r4
 800573e:	6025      	str	r5, [r4, #0]
 8005740:	bf18      	it	ne
 8005742:	6059      	strne	r1, [r3, #4]
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	bf08      	it	eq
 8005748:	f8c8 1000 	streq.w	r1, [r8]
 800574c:	5162      	str	r2, [r4, r5]
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	4638      	mov	r0, r7
 8005752:	f104 060b 	add.w	r6, r4, #11
 8005756:	f000 f829 	bl	80057ac <__malloc_unlock>
 800575a:	f026 0607 	bic.w	r6, r6, #7
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	1af2      	subs	r2, r6, r3
 8005762:	d0ae      	beq.n	80056c2 <_malloc_r+0x22>
 8005764:	1b9b      	subs	r3, r3, r6
 8005766:	50a3      	str	r3, [r4, r2]
 8005768:	e7ab      	b.n	80056c2 <_malloc_r+0x22>
 800576a:	42a3      	cmp	r3, r4
 800576c:	6862      	ldr	r2, [r4, #4]
 800576e:	d1dd      	bne.n	800572c <_malloc_r+0x8c>
 8005770:	f8c8 2000 	str.w	r2, [r8]
 8005774:	e7ec      	b.n	8005750 <_malloc_r+0xb0>
 8005776:	4623      	mov	r3, r4
 8005778:	6864      	ldr	r4, [r4, #4]
 800577a:	e7ac      	b.n	80056d6 <_malloc_r+0x36>
 800577c:	4634      	mov	r4, r6
 800577e:	6876      	ldr	r6, [r6, #4]
 8005780:	e7b4      	b.n	80056ec <_malloc_r+0x4c>
 8005782:	4613      	mov	r3, r2
 8005784:	e7cc      	b.n	8005720 <_malloc_r+0x80>
 8005786:	230c      	movs	r3, #12
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4638      	mov	r0, r7
 800578c:	f000 f80e 	bl	80057ac <__malloc_unlock>
 8005790:	e797      	b.n	80056c2 <_malloc_r+0x22>
 8005792:	6025      	str	r5, [r4, #0]
 8005794:	e7dc      	b.n	8005750 <_malloc_r+0xb0>
 8005796:	605b      	str	r3, [r3, #4]
 8005798:	deff      	udf	#255	; 0xff
 800579a:	bf00      	nop
 800579c:	20000370 	.word	0x20000370

080057a0 <__malloc_lock>:
 80057a0:	4801      	ldr	r0, [pc, #4]	; (80057a8 <__malloc_lock+0x8>)
 80057a2:	f7ff bf0f 	b.w	80055c4 <__retarget_lock_acquire_recursive>
 80057a6:	bf00      	nop
 80057a8:	2000036c 	.word	0x2000036c

080057ac <__malloc_unlock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_unlock+0x8>)
 80057ae:	f7ff bf0a 	b.w	80055c6 <__retarget_lock_release_recursive>
 80057b2:	bf00      	nop
 80057b4:	2000036c 	.word	0x2000036c

080057b8 <__ssputs_r>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	688e      	ldr	r6, [r1, #8]
 80057be:	461f      	mov	r7, r3
 80057c0:	42be      	cmp	r6, r7
 80057c2:	680b      	ldr	r3, [r1, #0]
 80057c4:	4682      	mov	sl, r0
 80057c6:	460c      	mov	r4, r1
 80057c8:	4690      	mov	r8, r2
 80057ca:	d82c      	bhi.n	8005826 <__ssputs_r+0x6e>
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057d2:	d026      	beq.n	8005822 <__ssputs_r+0x6a>
 80057d4:	6965      	ldr	r5, [r4, #20]
 80057d6:	6909      	ldr	r1, [r1, #16]
 80057d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057dc:	eba3 0901 	sub.w	r9, r3, r1
 80057e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057e4:	1c7b      	adds	r3, r7, #1
 80057e6:	444b      	add	r3, r9
 80057e8:	106d      	asrs	r5, r5, #1
 80057ea:	429d      	cmp	r5, r3
 80057ec:	bf38      	it	cc
 80057ee:	461d      	movcc	r5, r3
 80057f0:	0553      	lsls	r3, r2, #21
 80057f2:	d527      	bpl.n	8005844 <__ssputs_r+0x8c>
 80057f4:	4629      	mov	r1, r5
 80057f6:	f7ff ff53 	bl	80056a0 <_malloc_r>
 80057fa:	4606      	mov	r6, r0
 80057fc:	b360      	cbz	r0, 8005858 <__ssputs_r+0xa0>
 80057fe:	6921      	ldr	r1, [r4, #16]
 8005800:	464a      	mov	r2, r9
 8005802:	f000 fe7f 	bl	8006504 <memcpy>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	6126      	str	r6, [r4, #16]
 8005814:	6165      	str	r5, [r4, #20]
 8005816:	444e      	add	r6, r9
 8005818:	eba5 0509 	sub.w	r5, r5, r9
 800581c:	6026      	str	r6, [r4, #0]
 800581e:	60a5      	str	r5, [r4, #8]
 8005820:	463e      	mov	r6, r7
 8005822:	42be      	cmp	r6, r7
 8005824:	d900      	bls.n	8005828 <__ssputs_r+0x70>
 8005826:	463e      	mov	r6, r7
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	4632      	mov	r2, r6
 800582c:	4641      	mov	r1, r8
 800582e:	f000 fe3e 	bl	80064ae <memmove>
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	1b9b      	subs	r3, r3, r6
 8005836:	60a3      	str	r3, [r4, #8]
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	4433      	add	r3, r6
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	2000      	movs	r0, #0
 8005840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005844:	462a      	mov	r2, r5
 8005846:	f000 fe6b 	bl	8006520 <_realloc_r>
 800584a:	4606      	mov	r6, r0
 800584c:	2800      	cmp	r0, #0
 800584e:	d1e0      	bne.n	8005812 <__ssputs_r+0x5a>
 8005850:	6921      	ldr	r1, [r4, #16]
 8005852:	4650      	mov	r0, sl
 8005854:	f7ff feb8 	bl	80055c8 <_free_r>
 8005858:	230c      	movs	r3, #12
 800585a:	f8ca 3000 	str.w	r3, [sl]
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	f04f 30ff 	mov.w	r0, #4294967295
 800586a:	e7e9      	b.n	8005840 <__ssputs_r+0x88>

0800586c <_svfiprintf_r>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	4698      	mov	r8, r3
 8005872:	898b      	ldrh	r3, [r1, #12]
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	b09d      	sub	sp, #116	; 0x74
 8005878:	4607      	mov	r7, r0
 800587a:	460d      	mov	r5, r1
 800587c:	4614      	mov	r4, r2
 800587e:	d50e      	bpl.n	800589e <_svfiprintf_r+0x32>
 8005880:	690b      	ldr	r3, [r1, #16]
 8005882:	b963      	cbnz	r3, 800589e <_svfiprintf_r+0x32>
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	f7ff ff0b 	bl	80056a0 <_malloc_r>
 800588a:	6028      	str	r0, [r5, #0]
 800588c:	6128      	str	r0, [r5, #16]
 800588e:	b920      	cbnz	r0, 800589a <_svfiprintf_r+0x2e>
 8005890:	230c      	movs	r3, #12
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e0d0      	b.n	8005a3c <_svfiprintf_r+0x1d0>
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	616b      	str	r3, [r5, #20]
 800589e:	2300      	movs	r3, #0
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	2320      	movs	r3, #32
 80058a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ac:	2330      	movs	r3, #48	; 0x30
 80058ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a54 <_svfiprintf_r+0x1e8>
 80058b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058b6:	f04f 0901 	mov.w	r9, #1
 80058ba:	4623      	mov	r3, r4
 80058bc:	469a      	mov	sl, r3
 80058be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c2:	b10a      	cbz	r2, 80058c8 <_svfiprintf_r+0x5c>
 80058c4:	2a25      	cmp	r2, #37	; 0x25
 80058c6:	d1f9      	bne.n	80058bc <_svfiprintf_r+0x50>
 80058c8:	ebba 0b04 	subs.w	fp, sl, r4
 80058cc:	d00b      	beq.n	80058e6 <_svfiprintf_r+0x7a>
 80058ce:	465b      	mov	r3, fp
 80058d0:	4622      	mov	r2, r4
 80058d2:	4629      	mov	r1, r5
 80058d4:	4638      	mov	r0, r7
 80058d6:	f7ff ff6f 	bl	80057b8 <__ssputs_r>
 80058da:	3001      	adds	r0, #1
 80058dc:	f000 80a9 	beq.w	8005a32 <_svfiprintf_r+0x1c6>
 80058e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e2:	445a      	add	r2, fp
 80058e4:	9209      	str	r2, [sp, #36]	; 0x24
 80058e6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80a1 	beq.w	8005a32 <_svfiprintf_r+0x1c6>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058fa:	f10a 0a01 	add.w	sl, sl, #1
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	9307      	str	r3, [sp, #28]
 8005902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005906:	931a      	str	r3, [sp, #104]	; 0x68
 8005908:	4654      	mov	r4, sl
 800590a:	2205      	movs	r2, #5
 800590c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005910:	4850      	ldr	r0, [pc, #320]	; (8005a54 <_svfiprintf_r+0x1e8>)
 8005912:	f7fa fc6d 	bl	80001f0 <memchr>
 8005916:	9a04      	ldr	r2, [sp, #16]
 8005918:	b9d8      	cbnz	r0, 8005952 <_svfiprintf_r+0xe6>
 800591a:	06d0      	lsls	r0, r2, #27
 800591c:	bf44      	itt	mi
 800591e:	2320      	movmi	r3, #32
 8005920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005924:	0711      	lsls	r1, r2, #28
 8005926:	bf44      	itt	mi
 8005928:	232b      	movmi	r3, #43	; 0x2b
 800592a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b2a      	cmp	r3, #42	; 0x2a
 8005934:	d015      	beq.n	8005962 <_svfiprintf_r+0xf6>
 8005936:	9a07      	ldr	r2, [sp, #28]
 8005938:	4654      	mov	r4, sl
 800593a:	2000      	movs	r0, #0
 800593c:	f04f 0c0a 	mov.w	ip, #10
 8005940:	4621      	mov	r1, r4
 8005942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005946:	3b30      	subs	r3, #48	; 0x30
 8005948:	2b09      	cmp	r3, #9
 800594a:	d94d      	bls.n	80059e8 <_svfiprintf_r+0x17c>
 800594c:	b1b0      	cbz	r0, 800597c <_svfiprintf_r+0x110>
 800594e:	9207      	str	r2, [sp, #28]
 8005950:	e014      	b.n	800597c <_svfiprintf_r+0x110>
 8005952:	eba0 0308 	sub.w	r3, r0, r8
 8005956:	fa09 f303 	lsl.w	r3, r9, r3
 800595a:	4313      	orrs	r3, r2
 800595c:	9304      	str	r3, [sp, #16]
 800595e:	46a2      	mov	sl, r4
 8005960:	e7d2      	b.n	8005908 <_svfiprintf_r+0x9c>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	1d19      	adds	r1, r3, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	9103      	str	r1, [sp, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	bfbb      	ittet	lt
 800596e:	425b      	neglt	r3, r3
 8005970:	f042 0202 	orrlt.w	r2, r2, #2
 8005974:	9307      	strge	r3, [sp, #28]
 8005976:	9307      	strlt	r3, [sp, #28]
 8005978:	bfb8      	it	lt
 800597a:	9204      	strlt	r2, [sp, #16]
 800597c:	7823      	ldrb	r3, [r4, #0]
 800597e:	2b2e      	cmp	r3, #46	; 0x2e
 8005980:	d10c      	bne.n	800599c <_svfiprintf_r+0x130>
 8005982:	7863      	ldrb	r3, [r4, #1]
 8005984:	2b2a      	cmp	r3, #42	; 0x2a
 8005986:	d134      	bne.n	80059f2 <_svfiprintf_r+0x186>
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	1d1a      	adds	r2, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	9203      	str	r2, [sp, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfb8      	it	lt
 8005994:	f04f 33ff 	movlt.w	r3, #4294967295
 8005998:	3402      	adds	r4, #2
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a64 <_svfiprintf_r+0x1f8>
 80059a0:	7821      	ldrb	r1, [r4, #0]
 80059a2:	2203      	movs	r2, #3
 80059a4:	4650      	mov	r0, sl
 80059a6:	f7fa fc23 	bl	80001f0 <memchr>
 80059aa:	b138      	cbz	r0, 80059bc <_svfiprintf_r+0x150>
 80059ac:	9b04      	ldr	r3, [sp, #16]
 80059ae:	eba0 000a 	sub.w	r0, r0, sl
 80059b2:	2240      	movs	r2, #64	; 0x40
 80059b4:	4082      	lsls	r2, r0
 80059b6:	4313      	orrs	r3, r2
 80059b8:	3401      	adds	r4, #1
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	4825      	ldr	r0, [pc, #148]	; (8005a58 <_svfiprintf_r+0x1ec>)
 80059c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059c6:	2206      	movs	r2, #6
 80059c8:	f7fa fc12 	bl	80001f0 <memchr>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d038      	beq.n	8005a42 <_svfiprintf_r+0x1d6>
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <_svfiprintf_r+0x1f0>)
 80059d2:	bb1b      	cbnz	r3, 8005a1c <_svfiprintf_r+0x1b0>
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	3307      	adds	r3, #7
 80059d8:	f023 0307 	bic.w	r3, r3, #7
 80059dc:	3308      	adds	r3, #8
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	4433      	add	r3, r6
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	e768      	b.n	80058ba <_svfiprintf_r+0x4e>
 80059e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ec:	460c      	mov	r4, r1
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7a6      	b.n	8005940 <_svfiprintf_r+0xd4>
 80059f2:	2300      	movs	r3, #0
 80059f4:	3401      	adds	r4, #1
 80059f6:	9305      	str	r3, [sp, #20]
 80059f8:	4619      	mov	r1, r3
 80059fa:	f04f 0c0a 	mov.w	ip, #10
 80059fe:	4620      	mov	r0, r4
 8005a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a04:	3a30      	subs	r2, #48	; 0x30
 8005a06:	2a09      	cmp	r2, #9
 8005a08:	d903      	bls.n	8005a12 <_svfiprintf_r+0x1a6>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0c6      	beq.n	800599c <_svfiprintf_r+0x130>
 8005a0e:	9105      	str	r1, [sp, #20]
 8005a10:	e7c4      	b.n	800599c <_svfiprintf_r+0x130>
 8005a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a16:	4604      	mov	r4, r0
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e7f0      	b.n	80059fe <_svfiprintf_r+0x192>
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	462a      	mov	r2, r5
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <_svfiprintf_r+0x1f4>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4638      	mov	r0, r7
 8005a28:	f3af 8000 	nop.w
 8005a2c:	1c42      	adds	r2, r0, #1
 8005a2e:	4606      	mov	r6, r0
 8005a30:	d1d6      	bne.n	80059e0 <_svfiprintf_r+0x174>
 8005a32:	89ab      	ldrh	r3, [r5, #12]
 8005a34:	065b      	lsls	r3, r3, #25
 8005a36:	f53f af2d 	bmi.w	8005894 <_svfiprintf_r+0x28>
 8005a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3c:	b01d      	add	sp, #116	; 0x74
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	ab03      	add	r3, sp, #12
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	462a      	mov	r2, r5
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <_svfiprintf_r+0x1f4>)
 8005a4a:	a904      	add	r1, sp, #16
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f000 fa4b 	bl	8005ee8 <_printf_i>
 8005a52:	e7eb      	b.n	8005a2c <_svfiprintf_r+0x1c0>
 8005a54:	080067e4 	.word	0x080067e4
 8005a58:	080067ee 	.word	0x080067ee
 8005a5c:	00000000 	.word	0x00000000
 8005a60:	080057b9 	.word	0x080057b9
 8005a64:	080067ea 	.word	0x080067ea

08005a68 <_sungetc_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	1c4b      	adds	r3, r1, #1
 8005a6c:	4614      	mov	r4, r2
 8005a6e:	d103      	bne.n	8005a78 <_sungetc_r+0x10>
 8005a70:	f04f 35ff 	mov.w	r5, #4294967295
 8005a74:	4628      	mov	r0, r5
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	8993      	ldrh	r3, [r2, #12]
 8005a7a:	f023 0320 	bic.w	r3, r3, #32
 8005a7e:	8193      	strh	r3, [r2, #12]
 8005a80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a82:	6852      	ldr	r2, [r2, #4]
 8005a84:	b2cd      	uxtb	r5, r1
 8005a86:	b18b      	cbz	r3, 8005aac <_sungetc_r+0x44>
 8005a88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	dd08      	ble.n	8005aa0 <_sungetc_r+0x38>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	1e5a      	subs	r2, r3, #1
 8005a92:	6022      	str	r2, [r4, #0]
 8005a94:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005a98:	6863      	ldr	r3, [r4, #4]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	e7e9      	b.n	8005a74 <_sungetc_r+0xc>
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	f000 fcca 	bl	800643a <__submore>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d0f1      	beq.n	8005a8e <_sungetc_r+0x26>
 8005aaa:	e7e1      	b.n	8005a70 <_sungetc_r+0x8>
 8005aac:	6921      	ldr	r1, [r4, #16]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	b151      	cbz	r1, 8005ac8 <_sungetc_r+0x60>
 8005ab2:	4299      	cmp	r1, r3
 8005ab4:	d208      	bcs.n	8005ac8 <_sungetc_r+0x60>
 8005ab6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005aba:	42a9      	cmp	r1, r5
 8005abc:	d104      	bne.n	8005ac8 <_sungetc_r+0x60>
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	3201      	adds	r2, #1
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	6062      	str	r2, [r4, #4]
 8005ac6:	e7d5      	b.n	8005a74 <_sungetc_r+0xc>
 8005ac8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ad0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e7dc      	b.n	8005a9c <_sungetc_r+0x34>

08005ae2 <__ssrefill_r>:
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ae8:	b169      	cbz	r1, 8005b06 <__ssrefill_r+0x24>
 8005aea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aee:	4299      	cmp	r1, r3
 8005af0:	d001      	beq.n	8005af6 <__ssrefill_r+0x14>
 8005af2:	f7ff fd69 	bl	80055c8 <_free_r>
 8005af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	2000      	movs	r0, #0
 8005afc:	6360      	str	r0, [r4, #52]	; 0x34
 8005afe:	b113      	cbz	r3, 8005b06 <__ssrefill_r+0x24>
 8005b00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f043 0320 	orr.w	r3, r3, #32
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1a:	e7f3      	b.n	8005b04 <__ssrefill_r+0x22>

08005b1c <__ssvfiscanf_r>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	460c      	mov	r4, r1
 8005b22:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005b26:	2100      	movs	r1, #0
 8005b28:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005b2c:	49a6      	ldr	r1, [pc, #664]	; (8005dc8 <__ssvfiscanf_r+0x2ac>)
 8005b2e:	91a0      	str	r1, [sp, #640]	; 0x280
 8005b30:	f10d 0804 	add.w	r8, sp, #4
 8005b34:	49a5      	ldr	r1, [pc, #660]	; (8005dcc <__ssvfiscanf_r+0x2b0>)
 8005b36:	4fa6      	ldr	r7, [pc, #664]	; (8005dd0 <__ssvfiscanf_r+0x2b4>)
 8005b38:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005dd4 <__ssvfiscanf_r+0x2b8>
 8005b3c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005b40:	4606      	mov	r6, r0
 8005b42:	91a1      	str	r1, [sp, #644]	; 0x284
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	7813      	ldrb	r3, [r2, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 815a 	beq.w	8005e02 <__ssvfiscanf_r+0x2e6>
 8005b4e:	5cf9      	ldrb	r1, [r7, r3]
 8005b50:	f011 0108 	ands.w	r1, r1, #8
 8005b54:	f102 0501 	add.w	r5, r2, #1
 8005b58:	d019      	beq.n	8005b8e <__ssvfiscanf_r+0x72>
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dd0f      	ble.n	8005b80 <__ssvfiscanf_r+0x64>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	5cba      	ldrb	r2, [r7, r2]
 8005b66:	0712      	lsls	r2, r2, #28
 8005b68:	d401      	bmi.n	8005b6e <__ssvfiscanf_r+0x52>
 8005b6a:	462a      	mov	r2, r5
 8005b6c:	e7eb      	b.n	8005b46 <__ssvfiscanf_r+0x2a>
 8005b6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b70:	3201      	adds	r2, #1
 8005b72:	9245      	str	r2, [sp, #276]	; 0x114
 8005b74:	6862      	ldr	r2, [r4, #4]
 8005b76:	3301      	adds	r3, #1
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	6062      	str	r2, [r4, #4]
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	e7ec      	b.n	8005b5a <__ssvfiscanf_r+0x3e>
 8005b80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b82:	4621      	mov	r1, r4
 8005b84:	4630      	mov	r0, r6
 8005b86:	4798      	blx	r3
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d0e9      	beq.n	8005b60 <__ssvfiscanf_r+0x44>
 8005b8c:	e7ed      	b.n	8005b6a <__ssvfiscanf_r+0x4e>
 8005b8e:	2b25      	cmp	r3, #37	; 0x25
 8005b90:	d012      	beq.n	8005bb8 <__ssvfiscanf_r+0x9c>
 8005b92:	469a      	mov	sl, r3
 8005b94:	6863      	ldr	r3, [r4, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f340 8091 	ble.w	8005cbe <__ssvfiscanf_r+0x1a2>
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	7813      	ldrb	r3, [r2, #0]
 8005ba0:	4553      	cmp	r3, sl
 8005ba2:	f040 812e 	bne.w	8005e02 <__ssvfiscanf_r+0x2e6>
 8005ba6:	6863      	ldr	r3, [r4, #4]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	6063      	str	r3, [r4, #4]
 8005bac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005bae:	3201      	adds	r2, #1
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	9345      	str	r3, [sp, #276]	; 0x114
 8005bb6:	e7d8      	b.n	8005b6a <__ssvfiscanf_r+0x4e>
 8005bb8:	9141      	str	r1, [sp, #260]	; 0x104
 8005bba:	9143      	str	r1, [sp, #268]	; 0x10c
 8005bbc:	7853      	ldrb	r3, [r2, #1]
 8005bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc0:	bf02      	ittt	eq
 8005bc2:	2310      	moveq	r3, #16
 8005bc4:	1c95      	addeq	r5, r2, #2
 8005bc6:	9341      	streq	r3, [sp, #260]	; 0x104
 8005bc8:	220a      	movs	r2, #10
 8005bca:	46aa      	mov	sl, r5
 8005bcc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005bd0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005bd4:	2b09      	cmp	r3, #9
 8005bd6:	d91c      	bls.n	8005c12 <__ssvfiscanf_r+0xf6>
 8005bd8:	487e      	ldr	r0, [pc, #504]	; (8005dd4 <__ssvfiscanf_r+0x2b8>)
 8005bda:	2203      	movs	r2, #3
 8005bdc:	f7fa fb08 	bl	80001f0 <memchr>
 8005be0:	b138      	cbz	r0, 8005bf2 <__ssvfiscanf_r+0xd6>
 8005be2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005be4:	eba0 0009 	sub.w	r0, r0, r9
 8005be8:	2301      	movs	r3, #1
 8005bea:	4083      	lsls	r3, r0
 8005bec:	4313      	orrs	r3, r2
 8005bee:	9341      	str	r3, [sp, #260]	; 0x104
 8005bf0:	4655      	mov	r5, sl
 8005bf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005bf6:	2b78      	cmp	r3, #120	; 0x78
 8005bf8:	d806      	bhi.n	8005c08 <__ssvfiscanf_r+0xec>
 8005bfa:	2b57      	cmp	r3, #87	; 0x57
 8005bfc:	d810      	bhi.n	8005c20 <__ssvfiscanf_r+0x104>
 8005bfe:	2b25      	cmp	r3, #37	; 0x25
 8005c00:	d0c7      	beq.n	8005b92 <__ssvfiscanf_r+0x76>
 8005c02:	d857      	bhi.n	8005cb4 <__ssvfiscanf_r+0x198>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d065      	beq.n	8005cd4 <__ssvfiscanf_r+0x1b8>
 8005c08:	2303      	movs	r3, #3
 8005c0a:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c0c:	230a      	movs	r3, #10
 8005c0e:	9342      	str	r3, [sp, #264]	; 0x108
 8005c10:	e076      	b.n	8005d00 <__ssvfiscanf_r+0x1e4>
 8005c12:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005c14:	fb02 1103 	mla	r1, r2, r3, r1
 8005c18:	3930      	subs	r1, #48	; 0x30
 8005c1a:	9143      	str	r1, [sp, #268]	; 0x10c
 8005c1c:	4655      	mov	r5, sl
 8005c1e:	e7d4      	b.n	8005bca <__ssvfiscanf_r+0xae>
 8005c20:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005c24:	2a20      	cmp	r2, #32
 8005c26:	d8ef      	bhi.n	8005c08 <__ssvfiscanf_r+0xec>
 8005c28:	a101      	add	r1, pc, #4	; (adr r1, 8005c30 <__ssvfiscanf_r+0x114>)
 8005c2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005ce3 	.word	0x08005ce3
 8005c34:	08005c09 	.word	0x08005c09
 8005c38:	08005c09 	.word	0x08005c09
 8005c3c:	08005d41 	.word	0x08005d41
 8005c40:	08005c09 	.word	0x08005c09
 8005c44:	08005c09 	.word	0x08005c09
 8005c48:	08005c09 	.word	0x08005c09
 8005c4c:	08005c09 	.word	0x08005c09
 8005c50:	08005c09 	.word	0x08005c09
 8005c54:	08005c09 	.word	0x08005c09
 8005c58:	08005c09 	.word	0x08005c09
 8005c5c:	08005d57 	.word	0x08005d57
 8005c60:	08005d3d 	.word	0x08005d3d
 8005c64:	08005cbb 	.word	0x08005cbb
 8005c68:	08005cbb 	.word	0x08005cbb
 8005c6c:	08005cbb 	.word	0x08005cbb
 8005c70:	08005c09 	.word	0x08005c09
 8005c74:	08005cf9 	.word	0x08005cf9
 8005c78:	08005c09 	.word	0x08005c09
 8005c7c:	08005c09 	.word	0x08005c09
 8005c80:	08005c09 	.word	0x08005c09
 8005c84:	08005c09 	.word	0x08005c09
 8005c88:	08005d67 	.word	0x08005d67
 8005c8c:	08005d35 	.word	0x08005d35
 8005c90:	08005cdb 	.word	0x08005cdb
 8005c94:	08005c09 	.word	0x08005c09
 8005c98:	08005c09 	.word	0x08005c09
 8005c9c:	08005d63 	.word	0x08005d63
 8005ca0:	08005c09 	.word	0x08005c09
 8005ca4:	08005d3d 	.word	0x08005d3d
 8005ca8:	08005c09 	.word	0x08005c09
 8005cac:	08005c09 	.word	0x08005c09
 8005cb0:	08005ce3 	.word	0x08005ce3
 8005cb4:	3b45      	subs	r3, #69	; 0x45
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d8a6      	bhi.n	8005c08 <__ssvfiscanf_r+0xec>
 8005cba:	2305      	movs	r3, #5
 8005cbc:	e01f      	b.n	8005cfe <__ssvfiscanf_r+0x1e2>
 8005cbe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	4798      	blx	r3
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f43f af68 	beq.w	8005b9c <__ssvfiscanf_r+0x80>
 8005ccc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	f040 808d 	bne.w	8005dee <__ssvfiscanf_r+0x2d2>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	e08f      	b.n	8005dfa <__ssvfiscanf_r+0x2de>
 8005cda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005cdc:	f042 0220 	orr.w	r2, r2, #32
 8005ce0:	9241      	str	r2, [sp, #260]	; 0x104
 8005ce2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	9241      	str	r2, [sp, #260]	; 0x104
 8005cea:	2210      	movs	r2, #16
 8005cec:	2b6f      	cmp	r3, #111	; 0x6f
 8005cee:	9242      	str	r2, [sp, #264]	; 0x108
 8005cf0:	bf34      	ite	cc
 8005cf2:	2303      	movcc	r3, #3
 8005cf4:	2304      	movcs	r3, #4
 8005cf6:	e002      	b.n	8005cfe <__ssvfiscanf_r+0x1e2>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9342      	str	r3, [sp, #264]	; 0x108
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	9347      	str	r3, [sp, #284]	; 0x11c
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	dd3d      	ble.n	8005d82 <__ssvfiscanf_r+0x266>
 8005d06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d08:	0659      	lsls	r1, r3, #25
 8005d0a:	d404      	bmi.n	8005d16 <__ssvfiscanf_r+0x1fa>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	5cba      	ldrb	r2, [r7, r2]
 8005d12:	0712      	lsls	r2, r2, #28
 8005d14:	d43c      	bmi.n	8005d90 <__ssvfiscanf_r+0x274>
 8005d16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	dc4b      	bgt.n	8005db4 <__ssvfiscanf_r+0x298>
 8005d1c:	466b      	mov	r3, sp
 8005d1e:	4622      	mov	r2, r4
 8005d20:	a941      	add	r1, sp, #260	; 0x104
 8005d22:	4630      	mov	r0, r6
 8005d24:	f000 fa02 	bl	800612c <_scanf_chars>
 8005d28:	2801      	cmp	r0, #1
 8005d2a:	d06a      	beq.n	8005e02 <__ssvfiscanf_r+0x2e6>
 8005d2c:	2802      	cmp	r0, #2
 8005d2e:	f47f af1c 	bne.w	8005b6a <__ssvfiscanf_r+0x4e>
 8005d32:	e7cb      	b.n	8005ccc <__ssvfiscanf_r+0x1b0>
 8005d34:	2308      	movs	r3, #8
 8005d36:	9342      	str	r3, [sp, #264]	; 0x108
 8005d38:	2304      	movs	r3, #4
 8005d3a:	e7e0      	b.n	8005cfe <__ssvfiscanf_r+0x1e2>
 8005d3c:	220a      	movs	r2, #10
 8005d3e:	e7d5      	b.n	8005cec <__ssvfiscanf_r+0x1d0>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4640      	mov	r0, r8
 8005d44:	f000 fb40 	bl	80063c8 <__sccl>
 8005d48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4e:	9341      	str	r3, [sp, #260]	; 0x104
 8005d50:	4605      	mov	r5, r0
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7d3      	b.n	8005cfe <__ssvfiscanf_r+0x1e2>
 8005d56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5c:	9341      	str	r3, [sp, #260]	; 0x104
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e7cd      	b.n	8005cfe <__ssvfiscanf_r+0x1e2>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e7cb      	b.n	8005cfe <__ssvfiscanf_r+0x1e2>
 8005d66:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005d68:	06c3      	lsls	r3, r0, #27
 8005d6a:	f53f aefe 	bmi.w	8005b6a <__ssvfiscanf_r+0x4e>
 8005d6e:	9b00      	ldr	r3, [sp, #0]
 8005d70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d72:	1d19      	adds	r1, r3, #4
 8005d74:	9100      	str	r1, [sp, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	07c0      	lsls	r0, r0, #31
 8005d7a:	bf4c      	ite	mi
 8005d7c:	801a      	strhmi	r2, [r3, #0]
 8005d7e:	601a      	strpl	r2, [r3, #0]
 8005d80:	e6f3      	b.n	8005b6a <__ssvfiscanf_r+0x4e>
 8005d82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d84:	4621      	mov	r1, r4
 8005d86:	4630      	mov	r0, r6
 8005d88:	4798      	blx	r3
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d0bb      	beq.n	8005d06 <__ssvfiscanf_r+0x1ea>
 8005d8e:	e79d      	b.n	8005ccc <__ssvfiscanf_r+0x1b0>
 8005d90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d92:	3201      	adds	r2, #1
 8005d94:	9245      	str	r2, [sp, #276]	; 0x114
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	3a01      	subs	r2, #1
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	6062      	str	r2, [r4, #4]
 8005d9e:	dd02      	ble.n	8005da6 <__ssvfiscanf_r+0x28a>
 8005da0:	3301      	adds	r3, #1
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	e7b2      	b.n	8005d0c <__ssvfiscanf_r+0x1f0>
 8005da6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005da8:	4621      	mov	r1, r4
 8005daa:	4630      	mov	r0, r6
 8005dac:	4798      	blx	r3
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d0ac      	beq.n	8005d0c <__ssvfiscanf_r+0x1f0>
 8005db2:	e78b      	b.n	8005ccc <__ssvfiscanf_r+0x1b0>
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	dc0f      	bgt.n	8005dd8 <__ssvfiscanf_r+0x2bc>
 8005db8:	466b      	mov	r3, sp
 8005dba:	4622      	mov	r2, r4
 8005dbc:	a941      	add	r1, sp, #260	; 0x104
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 fa0e 	bl	80061e0 <_scanf_i>
 8005dc4:	e7b0      	b.n	8005d28 <__ssvfiscanf_r+0x20c>
 8005dc6:	bf00      	nop
 8005dc8:	08005a69 	.word	0x08005a69
 8005dcc:	08005ae3 	.word	0x08005ae3
 8005dd0:	08006833 	.word	0x08006833
 8005dd4:	080067ea 	.word	0x080067ea
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <__ssvfiscanf_r+0x2ec>)
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f43f aec5 	beq.w	8005b6a <__ssvfiscanf_r+0x4e>
 8005de0:	466b      	mov	r3, sp
 8005de2:	4622      	mov	r2, r4
 8005de4:	a941      	add	r1, sp, #260	; 0x104
 8005de6:	4630      	mov	r0, r6
 8005de8:	f3af 8000 	nop.w
 8005dec:	e79c      	b.n	8005d28 <__ssvfiscanf_r+0x20c>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005df4:	bf18      	it	ne
 8005df6:	f04f 30ff 	movne.w	r0, #4294967295
 8005dfa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e02:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005e04:	e7f9      	b.n	8005dfa <__ssvfiscanf_r+0x2de>
 8005e06:	bf00      	nop
 8005e08:	00000000 	.word	0x00000000

08005e0c <_printf_common>:
 8005e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e10:	4616      	mov	r6, r2
 8005e12:	4699      	mov	r9, r3
 8005e14:	688a      	ldr	r2, [r1, #8]
 8005e16:	690b      	ldr	r3, [r1, #16]
 8005e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	bfb8      	it	lt
 8005e20:	4613      	movlt	r3, r2
 8005e22:	6033      	str	r3, [r6, #0]
 8005e24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e28:	4607      	mov	r7, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	b10a      	cbz	r2, 8005e32 <_printf_common+0x26>
 8005e2e:	3301      	adds	r3, #1
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	0699      	lsls	r1, r3, #26
 8005e36:	bf42      	ittt	mi
 8005e38:	6833      	ldrmi	r3, [r6, #0]
 8005e3a:	3302      	addmi	r3, #2
 8005e3c:	6033      	strmi	r3, [r6, #0]
 8005e3e:	6825      	ldr	r5, [r4, #0]
 8005e40:	f015 0506 	ands.w	r5, r5, #6
 8005e44:	d106      	bne.n	8005e54 <_printf_common+0x48>
 8005e46:	f104 0a19 	add.w	sl, r4, #25
 8005e4a:	68e3      	ldr	r3, [r4, #12]
 8005e4c:	6832      	ldr	r2, [r6, #0]
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	42ab      	cmp	r3, r5
 8005e52:	dc26      	bgt.n	8005ea2 <_printf_common+0x96>
 8005e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e58:	1e13      	subs	r3, r2, #0
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	bf18      	it	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	0692      	lsls	r2, r2, #26
 8005e62:	d42b      	bmi.n	8005ebc <_printf_common+0xb0>
 8005e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	47c0      	blx	r8
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d01e      	beq.n	8005eb0 <_printf_common+0xa4>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	f003 0306 	and.w	r3, r3, #6
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	bf02      	ittt	eq
 8005e7e:	68e5      	ldreq	r5, [r4, #12]
 8005e80:	6833      	ldreq	r3, [r6, #0]
 8005e82:	1aed      	subeq	r5, r5, r3
 8005e84:	68a3      	ldr	r3, [r4, #8]
 8005e86:	bf0c      	ite	eq
 8005e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e8c:	2500      	movne	r5, #0
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	bfc4      	itt	gt
 8005e92:	1a9b      	subgt	r3, r3, r2
 8005e94:	18ed      	addgt	r5, r5, r3
 8005e96:	2600      	movs	r6, #0
 8005e98:	341a      	adds	r4, #26
 8005e9a:	42b5      	cmp	r5, r6
 8005e9c:	d11a      	bne.n	8005ed4 <_printf_common+0xc8>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e008      	b.n	8005eb4 <_printf_common+0xa8>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4652      	mov	r2, sl
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	47c0      	blx	r8
 8005eac:	3001      	adds	r0, #1
 8005eae:	d103      	bne.n	8005eb8 <_printf_common+0xac>
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb8:	3501      	adds	r5, #1
 8005eba:	e7c6      	b.n	8005e4a <_printf_common+0x3e>
 8005ebc:	18e1      	adds	r1, r4, r3
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	2030      	movs	r0, #48	; 0x30
 8005ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ec6:	4422      	add	r2, r4
 8005ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	e7c7      	b.n	8005e64 <_printf_common+0x58>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	4649      	mov	r1, r9
 8005eda:	4638      	mov	r0, r7
 8005edc:	47c0      	blx	r8
 8005ede:	3001      	adds	r0, #1
 8005ee0:	d0e6      	beq.n	8005eb0 <_printf_common+0xa4>
 8005ee2:	3601      	adds	r6, #1
 8005ee4:	e7d9      	b.n	8005e9a <_printf_common+0x8e>
	...

08005ee8 <_printf_i>:
 8005ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	7e0f      	ldrb	r7, [r1, #24]
 8005eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ef0:	2f78      	cmp	r7, #120	; 0x78
 8005ef2:	4691      	mov	r9, r2
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	469a      	mov	sl, r3
 8005efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005efe:	d807      	bhi.n	8005f10 <_printf_i+0x28>
 8005f00:	2f62      	cmp	r7, #98	; 0x62
 8005f02:	d80a      	bhi.n	8005f1a <_printf_i+0x32>
 8005f04:	2f00      	cmp	r7, #0
 8005f06:	f000 80d4 	beq.w	80060b2 <_printf_i+0x1ca>
 8005f0a:	2f58      	cmp	r7, #88	; 0x58
 8005f0c:	f000 80c0 	beq.w	8006090 <_printf_i+0x1a8>
 8005f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f18:	e03a      	b.n	8005f90 <_printf_i+0xa8>
 8005f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f1e:	2b15      	cmp	r3, #21
 8005f20:	d8f6      	bhi.n	8005f10 <_printf_i+0x28>
 8005f22:	a101      	add	r1, pc, #4	; (adr r1, 8005f28 <_printf_i+0x40>)
 8005f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f28:	08005f81 	.word	0x08005f81
 8005f2c:	08005f95 	.word	0x08005f95
 8005f30:	08005f11 	.word	0x08005f11
 8005f34:	08005f11 	.word	0x08005f11
 8005f38:	08005f11 	.word	0x08005f11
 8005f3c:	08005f11 	.word	0x08005f11
 8005f40:	08005f95 	.word	0x08005f95
 8005f44:	08005f11 	.word	0x08005f11
 8005f48:	08005f11 	.word	0x08005f11
 8005f4c:	08005f11 	.word	0x08005f11
 8005f50:	08005f11 	.word	0x08005f11
 8005f54:	08006099 	.word	0x08006099
 8005f58:	08005fc1 	.word	0x08005fc1
 8005f5c:	08006053 	.word	0x08006053
 8005f60:	08005f11 	.word	0x08005f11
 8005f64:	08005f11 	.word	0x08005f11
 8005f68:	080060bb 	.word	0x080060bb
 8005f6c:	08005f11 	.word	0x08005f11
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	08005f11 	.word	0x08005f11
 8005f78:	08005f11 	.word	0x08005f11
 8005f7c:	0800605b 	.word	0x0800605b
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	1d1a      	adds	r2, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	602a      	str	r2, [r5, #0]
 8005f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f90:	2301      	movs	r3, #1
 8005f92:	e09f      	b.n	80060d4 <_printf_i+0x1ec>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	0607      	lsls	r7, r0, #24
 8005f9a:	f103 0104 	add.w	r1, r3, #4
 8005f9e:	6029      	str	r1, [r5, #0]
 8005fa0:	d501      	bpl.n	8005fa6 <_printf_i+0xbe>
 8005fa2:	681e      	ldr	r6, [r3, #0]
 8005fa4:	e003      	b.n	8005fae <_printf_i+0xc6>
 8005fa6:	0646      	lsls	r6, r0, #25
 8005fa8:	d5fb      	bpl.n	8005fa2 <_printf_i+0xba>
 8005faa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	da03      	bge.n	8005fba <_printf_i+0xd2>
 8005fb2:	232d      	movs	r3, #45	; 0x2d
 8005fb4:	4276      	negs	r6, r6
 8005fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fba:	485a      	ldr	r0, [pc, #360]	; (8006124 <_printf_i+0x23c>)
 8005fbc:	230a      	movs	r3, #10
 8005fbe:	e012      	b.n	8005fe6 <_printf_i+0xfe>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	1d19      	adds	r1, r3, #4
 8005fc6:	6029      	str	r1, [r5, #0]
 8005fc8:	0605      	lsls	r5, r0, #24
 8005fca:	d501      	bpl.n	8005fd0 <_printf_i+0xe8>
 8005fcc:	681e      	ldr	r6, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <_printf_i+0xee>
 8005fd0:	0641      	lsls	r1, r0, #25
 8005fd2:	d5fb      	bpl.n	8005fcc <_printf_i+0xe4>
 8005fd4:	881e      	ldrh	r6, [r3, #0]
 8005fd6:	4853      	ldr	r0, [pc, #332]	; (8006124 <_printf_i+0x23c>)
 8005fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fda:	bf0c      	ite	eq
 8005fdc:	2308      	moveq	r3, #8
 8005fde:	230a      	movne	r3, #10
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe6:	6865      	ldr	r5, [r4, #4]
 8005fe8:	60a5      	str	r5, [r4, #8]
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	bfa2      	ittt	ge
 8005fee:	6821      	ldrge	r1, [r4, #0]
 8005ff0:	f021 0104 	bicge.w	r1, r1, #4
 8005ff4:	6021      	strge	r1, [r4, #0]
 8005ff6:	b90e      	cbnz	r6, 8005ffc <_printf_i+0x114>
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	d04b      	beq.n	8006094 <_printf_i+0x1ac>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006002:	fb03 6711 	mls	r7, r3, r1, r6
 8006006:	5dc7      	ldrb	r7, [r0, r7]
 8006008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800600c:	4637      	mov	r7, r6
 800600e:	42bb      	cmp	r3, r7
 8006010:	460e      	mov	r6, r1
 8006012:	d9f4      	bls.n	8005ffe <_printf_i+0x116>
 8006014:	2b08      	cmp	r3, #8
 8006016:	d10b      	bne.n	8006030 <_printf_i+0x148>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07de      	lsls	r6, r3, #31
 800601c:	d508      	bpl.n	8006030 <_printf_i+0x148>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	6861      	ldr	r1, [r4, #4]
 8006022:	4299      	cmp	r1, r3
 8006024:	bfde      	ittt	le
 8006026:	2330      	movle	r3, #48	; 0x30
 8006028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800602c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006030:	1b52      	subs	r2, r2, r5
 8006032:	6122      	str	r2, [r4, #16]
 8006034:	f8cd a000 	str.w	sl, [sp]
 8006038:	464b      	mov	r3, r9
 800603a:	aa03      	add	r2, sp, #12
 800603c:	4621      	mov	r1, r4
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fee4 	bl	8005e0c <_printf_common>
 8006044:	3001      	adds	r0, #1
 8006046:	d14a      	bne.n	80060de <_printf_i+0x1f6>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	b004      	add	sp, #16
 800604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	f043 0320 	orr.w	r3, r3, #32
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	4833      	ldr	r0, [pc, #204]	; (8006128 <_printf_i+0x240>)
 800605c:	2778      	movs	r7, #120	; 0x78
 800605e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	6829      	ldr	r1, [r5, #0]
 8006066:	061f      	lsls	r7, r3, #24
 8006068:	f851 6b04 	ldr.w	r6, [r1], #4
 800606c:	d402      	bmi.n	8006074 <_printf_i+0x18c>
 800606e:	065f      	lsls	r7, r3, #25
 8006070:	bf48      	it	mi
 8006072:	b2b6      	uxthmi	r6, r6
 8006074:	07df      	lsls	r7, r3, #31
 8006076:	bf48      	it	mi
 8006078:	f043 0320 	orrmi.w	r3, r3, #32
 800607c:	6029      	str	r1, [r5, #0]
 800607e:	bf48      	it	mi
 8006080:	6023      	strmi	r3, [r4, #0]
 8006082:	b91e      	cbnz	r6, 800608c <_printf_i+0x1a4>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	f023 0320 	bic.w	r3, r3, #32
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	2310      	movs	r3, #16
 800608e:	e7a7      	b.n	8005fe0 <_printf_i+0xf8>
 8006090:	4824      	ldr	r0, [pc, #144]	; (8006124 <_printf_i+0x23c>)
 8006092:	e7e4      	b.n	800605e <_printf_i+0x176>
 8006094:	4615      	mov	r5, r2
 8006096:	e7bd      	b.n	8006014 <_printf_i+0x12c>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	6826      	ldr	r6, [r4, #0]
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6028      	str	r0, [r5, #0]
 80060a2:	0635      	lsls	r5, r6, #24
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0x1c4>
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0x1ca>
 80060ac:	0670      	lsls	r0, r6, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0x1c0>
 80060b0:	8019      	strh	r1, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	4615      	mov	r5, r2
 80060b8:	e7bc      	b.n	8006034 <_printf_i+0x14c>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	681d      	ldr	r5, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	2100      	movs	r1, #0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f7fa f892 	bl	80001f0 <memchr>
 80060cc:	b108      	cbz	r0, 80060d2 <_printf_i+0x1ea>
 80060ce:	1b40      	subs	r0, r0, r5
 80060d0:	6060      	str	r0, [r4, #4]
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	2300      	movs	r3, #0
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060dc:	e7aa      	b.n	8006034 <_printf_i+0x14c>
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	462a      	mov	r2, r5
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0ad      	beq.n	8006048 <_printf_i+0x160>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	d413      	bmi.n	800611a <_printf_i+0x232>
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bfb8      	it	lt
 80060fa:	4618      	movlt	r0, r3
 80060fc:	e7a6      	b.n	800604c <_printf_i+0x164>
 80060fe:	2301      	movs	r3, #1
 8006100:	4632      	mov	r2, r6
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d09d      	beq.n	8006048 <_printf_i+0x160>
 800610c:	3501      	adds	r5, #1
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	9903      	ldr	r1, [sp, #12]
 8006112:	1a5b      	subs	r3, r3, r1
 8006114:	42ab      	cmp	r3, r5
 8006116:	dcf2      	bgt.n	80060fe <_printf_i+0x216>
 8006118:	e7eb      	b.n	80060f2 <_printf_i+0x20a>
 800611a:	2500      	movs	r5, #0
 800611c:	f104 0619 	add.w	r6, r4, #25
 8006120:	e7f5      	b.n	800610e <_printf_i+0x226>
 8006122:	bf00      	nop
 8006124:	080067f5 	.word	0x080067f5
 8006128:	08006806 	.word	0x08006806

0800612c <_scanf_chars>:
 800612c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006130:	4615      	mov	r5, r2
 8006132:	688a      	ldr	r2, [r1, #8]
 8006134:	4680      	mov	r8, r0
 8006136:	460c      	mov	r4, r1
 8006138:	b932      	cbnz	r2, 8006148 <_scanf_chars+0x1c>
 800613a:	698a      	ldr	r2, [r1, #24]
 800613c:	2a00      	cmp	r2, #0
 800613e:	bf0c      	ite	eq
 8006140:	2201      	moveq	r2, #1
 8006142:	f04f 32ff 	movne.w	r2, #4294967295
 8006146:	608a      	str	r2, [r1, #8]
 8006148:	6822      	ldr	r2, [r4, #0]
 800614a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80061dc <_scanf_chars+0xb0>
 800614e:	06d1      	lsls	r1, r2, #27
 8006150:	bf5f      	itttt	pl
 8006152:	681a      	ldrpl	r2, [r3, #0]
 8006154:	1d11      	addpl	r1, r2, #4
 8006156:	6019      	strpl	r1, [r3, #0]
 8006158:	6816      	ldrpl	r6, [r2, #0]
 800615a:	2700      	movs	r7, #0
 800615c:	69a0      	ldr	r0, [r4, #24]
 800615e:	b188      	cbz	r0, 8006184 <_scanf_chars+0x58>
 8006160:	2801      	cmp	r0, #1
 8006162:	d107      	bne.n	8006174 <_scanf_chars+0x48>
 8006164:	682a      	ldr	r2, [r5, #0]
 8006166:	7811      	ldrb	r1, [r2, #0]
 8006168:	6962      	ldr	r2, [r4, #20]
 800616a:	5c52      	ldrb	r2, [r2, r1]
 800616c:	b952      	cbnz	r2, 8006184 <_scanf_chars+0x58>
 800616e:	2f00      	cmp	r7, #0
 8006170:	d031      	beq.n	80061d6 <_scanf_chars+0xaa>
 8006172:	e022      	b.n	80061ba <_scanf_chars+0x8e>
 8006174:	2802      	cmp	r0, #2
 8006176:	d120      	bne.n	80061ba <_scanf_chars+0x8e>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006180:	071b      	lsls	r3, r3, #28
 8006182:	d41a      	bmi.n	80061ba <_scanf_chars+0x8e>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	06da      	lsls	r2, r3, #27
 8006188:	bf5e      	ittt	pl
 800618a:	682b      	ldrpl	r3, [r5, #0]
 800618c:	781b      	ldrbpl	r3, [r3, #0]
 800618e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006192:	682a      	ldr	r2, [r5, #0]
 8006194:	686b      	ldr	r3, [r5, #4]
 8006196:	3201      	adds	r2, #1
 8006198:	602a      	str	r2, [r5, #0]
 800619a:	68a2      	ldr	r2, [r4, #8]
 800619c:	3b01      	subs	r3, #1
 800619e:	3a01      	subs	r2, #1
 80061a0:	606b      	str	r3, [r5, #4]
 80061a2:	3701      	adds	r7, #1
 80061a4:	60a2      	str	r2, [r4, #8]
 80061a6:	b142      	cbz	r2, 80061ba <_scanf_chars+0x8e>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	dcd7      	bgt.n	800615c <_scanf_chars+0x30>
 80061ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061b0:	4629      	mov	r1, r5
 80061b2:	4640      	mov	r0, r8
 80061b4:	4798      	blx	r3
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0d0      	beq.n	800615c <_scanf_chars+0x30>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	f013 0310 	ands.w	r3, r3, #16
 80061c0:	d105      	bne.n	80061ce <_scanf_chars+0xa2>
 80061c2:	68e2      	ldr	r2, [r4, #12]
 80061c4:	3201      	adds	r2, #1
 80061c6:	60e2      	str	r2, [r4, #12]
 80061c8:	69a2      	ldr	r2, [r4, #24]
 80061ca:	b102      	cbz	r2, 80061ce <_scanf_chars+0xa2>
 80061cc:	7033      	strb	r3, [r6, #0]
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	443b      	add	r3, r7
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	2000      	movs	r0, #0
 80061d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061da:	bf00      	nop
 80061dc:	08006833 	.word	0x08006833

080061e0 <_scanf_i>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	4698      	mov	r8, r3
 80061e6:	4b74      	ldr	r3, [pc, #464]	; (80063b8 <_scanf_i+0x1d8>)
 80061e8:	460c      	mov	r4, r1
 80061ea:	4682      	mov	sl, r0
 80061ec:	4616      	mov	r6, r2
 80061ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061f2:	b087      	sub	sp, #28
 80061f4:	ab03      	add	r3, sp, #12
 80061f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80061fa:	4b70      	ldr	r3, [pc, #448]	; (80063bc <_scanf_i+0x1dc>)
 80061fc:	69a1      	ldr	r1, [r4, #24]
 80061fe:	4a70      	ldr	r2, [pc, #448]	; (80063c0 <_scanf_i+0x1e0>)
 8006200:	2903      	cmp	r1, #3
 8006202:	bf18      	it	ne
 8006204:	461a      	movne	r2, r3
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	9201      	str	r2, [sp, #4]
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006210:	bf88      	it	hi
 8006212:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006216:	4627      	mov	r7, r4
 8006218:	bf82      	ittt	hi
 800621a:	eb03 0905 	addhi.w	r9, r3, r5
 800621e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006222:	60a3      	strhi	r3, [r4, #8]
 8006224:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006228:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800622c:	bf98      	it	ls
 800622e:	f04f 0900 	movls.w	r9, #0
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	463d      	mov	r5, r7
 8006236:	f04f 0b00 	mov.w	fp, #0
 800623a:	6831      	ldr	r1, [r6, #0]
 800623c:	ab03      	add	r3, sp, #12
 800623e:	7809      	ldrb	r1, [r1, #0]
 8006240:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006244:	2202      	movs	r2, #2
 8006246:	f7f9 ffd3 	bl	80001f0 <memchr>
 800624a:	b328      	cbz	r0, 8006298 <_scanf_i+0xb8>
 800624c:	f1bb 0f01 	cmp.w	fp, #1
 8006250:	d159      	bne.n	8006306 <_scanf_i+0x126>
 8006252:	6862      	ldr	r2, [r4, #4]
 8006254:	b92a      	cbnz	r2, 8006262 <_scanf_i+0x82>
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	2308      	movs	r3, #8
 800625a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625e:	6063      	str	r3, [r4, #4]
 8006260:	6022      	str	r2, [r4, #0]
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006268:	6022      	str	r2, [r4, #0]
 800626a:	68a2      	ldr	r2, [r4, #8]
 800626c:	1e51      	subs	r1, r2, #1
 800626e:	60a1      	str	r1, [r4, #8]
 8006270:	b192      	cbz	r2, 8006298 <_scanf_i+0xb8>
 8006272:	6832      	ldr	r2, [r6, #0]
 8006274:	1c51      	adds	r1, r2, #1
 8006276:	6031      	str	r1, [r6, #0]
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	f805 2b01 	strb.w	r2, [r5], #1
 800627e:	6872      	ldr	r2, [r6, #4]
 8006280:	3a01      	subs	r2, #1
 8006282:	2a00      	cmp	r2, #0
 8006284:	6072      	str	r2, [r6, #4]
 8006286:	dc07      	bgt.n	8006298 <_scanf_i+0xb8>
 8006288:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800628c:	4631      	mov	r1, r6
 800628e:	4650      	mov	r0, sl
 8006290:	4790      	blx	r2
 8006292:	2800      	cmp	r0, #0
 8006294:	f040 8085 	bne.w	80063a2 <_scanf_i+0x1c2>
 8006298:	f10b 0b01 	add.w	fp, fp, #1
 800629c:	f1bb 0f03 	cmp.w	fp, #3
 80062a0:	d1cb      	bne.n	800623a <_scanf_i+0x5a>
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	b90b      	cbnz	r3, 80062aa <_scanf_i+0xca>
 80062a6:	230a      	movs	r3, #10
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	6863      	ldr	r3, [r4, #4]
 80062ac:	4945      	ldr	r1, [pc, #276]	; (80063c4 <_scanf_i+0x1e4>)
 80062ae:	6960      	ldr	r0, [r4, #20]
 80062b0:	1ac9      	subs	r1, r1, r3
 80062b2:	f000 f889 	bl	80063c8 <__sccl>
 80062b6:	f04f 0b00 	mov.w	fp, #0
 80062ba:	68a3      	ldr	r3, [r4, #8]
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d03d      	beq.n	800633e <_scanf_i+0x15e>
 80062c2:	6831      	ldr	r1, [r6, #0]
 80062c4:	6960      	ldr	r0, [r4, #20]
 80062c6:	f891 c000 	ldrb.w	ip, [r1]
 80062ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d035      	beq.n	800633e <_scanf_i+0x15e>
 80062d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80062d6:	d124      	bne.n	8006322 <_scanf_i+0x142>
 80062d8:	0510      	lsls	r0, r2, #20
 80062da:	d522      	bpl.n	8006322 <_scanf_i+0x142>
 80062dc:	f10b 0b01 	add.w	fp, fp, #1
 80062e0:	f1b9 0f00 	cmp.w	r9, #0
 80062e4:	d003      	beq.n	80062ee <_scanf_i+0x10e>
 80062e6:	3301      	adds	r3, #1
 80062e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	6873      	ldr	r3, [r6, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	6073      	str	r3, [r6, #4]
 80062f6:	dd1b      	ble.n	8006330 <_scanf_i+0x150>
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	68a3      	ldr	r3, [r4, #8]
 8006300:	3b01      	subs	r3, #1
 8006302:	60a3      	str	r3, [r4, #8]
 8006304:	e7d9      	b.n	80062ba <_scanf_i+0xda>
 8006306:	f1bb 0f02 	cmp.w	fp, #2
 800630a:	d1ae      	bne.n	800626a <_scanf_i+0x8a>
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006312:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006316:	d1bf      	bne.n	8006298 <_scanf_i+0xb8>
 8006318:	2310      	movs	r3, #16
 800631a:	6063      	str	r3, [r4, #4]
 800631c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006320:	e7a2      	b.n	8006268 <_scanf_i+0x88>
 8006322:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	780b      	ldrb	r3, [r1, #0]
 800632a:	f805 3b01 	strb.w	r3, [r5], #1
 800632e:	e7de      	b.n	80062ee <_scanf_i+0x10e>
 8006330:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006334:	4631      	mov	r1, r6
 8006336:	4650      	mov	r0, sl
 8006338:	4798      	blx	r3
 800633a:	2800      	cmp	r0, #0
 800633c:	d0df      	beq.n	80062fe <_scanf_i+0x11e>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	05d9      	lsls	r1, r3, #23
 8006342:	d50d      	bpl.n	8006360 <_scanf_i+0x180>
 8006344:	42bd      	cmp	r5, r7
 8006346:	d909      	bls.n	800635c <_scanf_i+0x17c>
 8006348:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800634c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006350:	4632      	mov	r2, r6
 8006352:	4650      	mov	r0, sl
 8006354:	4798      	blx	r3
 8006356:	f105 39ff 	add.w	r9, r5, #4294967295
 800635a:	464d      	mov	r5, r9
 800635c:	42bd      	cmp	r5, r7
 800635e:	d028      	beq.n	80063b2 <_scanf_i+0x1d2>
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	f012 0210 	ands.w	r2, r2, #16
 8006366:	d113      	bne.n	8006390 <_scanf_i+0x1b0>
 8006368:	702a      	strb	r2, [r5, #0]
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	9e01      	ldr	r6, [sp, #4]
 800636e:	4639      	mov	r1, r7
 8006370:	4650      	mov	r0, sl
 8006372:	47b0      	blx	r6
 8006374:	f8d8 3000 	ldr.w	r3, [r8]
 8006378:	6821      	ldr	r1, [r4, #0]
 800637a:	1d1a      	adds	r2, r3, #4
 800637c:	f8c8 2000 	str.w	r2, [r8]
 8006380:	f011 0f20 	tst.w	r1, #32
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	d00f      	beq.n	80063a8 <_scanf_i+0x1c8>
 8006388:	6018      	str	r0, [r3, #0]
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	60e3      	str	r3, [r4, #12]
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	1bed      	subs	r5, r5, r7
 8006394:	445d      	add	r5, fp
 8006396:	442b      	add	r3, r5
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	2000      	movs	r0, #0
 800639c:	b007      	add	sp, #28
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a2:	f04f 0b00 	mov.w	fp, #0
 80063a6:	e7ca      	b.n	800633e <_scanf_i+0x15e>
 80063a8:	07ca      	lsls	r2, r1, #31
 80063aa:	bf4c      	ite	mi
 80063ac:	8018      	strhmi	r0, [r3, #0]
 80063ae:	6018      	strpl	r0, [r3, #0]
 80063b0:	e7eb      	b.n	800638a <_scanf_i+0x1aa>
 80063b2:	2001      	movs	r0, #1
 80063b4:	e7f2      	b.n	800639c <_scanf_i+0x1bc>
 80063b6:	bf00      	nop
 80063b8:	080067b8 	.word	0x080067b8
 80063bc:	0800676d 	.word	0x0800676d
 80063c0:	08006685 	.word	0x08006685
 80063c4:	08006827 	.word	0x08006827

080063c8 <__sccl>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	780b      	ldrb	r3, [r1, #0]
 80063cc:	4604      	mov	r4, r0
 80063ce:	2b5e      	cmp	r3, #94	; 0x5e
 80063d0:	bf0b      	itete	eq
 80063d2:	784b      	ldrbeq	r3, [r1, #1]
 80063d4:	1c4a      	addne	r2, r1, #1
 80063d6:	1c8a      	addeq	r2, r1, #2
 80063d8:	2100      	movne	r1, #0
 80063da:	bf08      	it	eq
 80063dc:	2101      	moveq	r1, #1
 80063de:	3801      	subs	r0, #1
 80063e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80063e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80063e8:	42a8      	cmp	r0, r5
 80063ea:	d1fb      	bne.n	80063e4 <__sccl+0x1c>
 80063ec:	b90b      	cbnz	r3, 80063f2 <__sccl+0x2a>
 80063ee:	1e50      	subs	r0, r2, #1
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	f081 0101 	eor.w	r1, r1, #1
 80063f6:	54e1      	strb	r1, [r4, r3]
 80063f8:	4610      	mov	r0, r2
 80063fa:	4602      	mov	r2, r0
 80063fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006400:	2d2d      	cmp	r5, #45	; 0x2d
 8006402:	d005      	beq.n	8006410 <__sccl+0x48>
 8006404:	2d5d      	cmp	r5, #93	; 0x5d
 8006406:	d016      	beq.n	8006436 <__sccl+0x6e>
 8006408:	2d00      	cmp	r5, #0
 800640a:	d0f1      	beq.n	80063f0 <__sccl+0x28>
 800640c:	462b      	mov	r3, r5
 800640e:	e7f2      	b.n	80063f6 <__sccl+0x2e>
 8006410:	7846      	ldrb	r6, [r0, #1]
 8006412:	2e5d      	cmp	r6, #93	; 0x5d
 8006414:	d0fa      	beq.n	800640c <__sccl+0x44>
 8006416:	42b3      	cmp	r3, r6
 8006418:	dcf8      	bgt.n	800640c <__sccl+0x44>
 800641a:	3002      	adds	r0, #2
 800641c:	461a      	mov	r2, r3
 800641e:	3201      	adds	r2, #1
 8006420:	4296      	cmp	r6, r2
 8006422:	54a1      	strb	r1, [r4, r2]
 8006424:	dcfb      	bgt.n	800641e <__sccl+0x56>
 8006426:	1af2      	subs	r2, r6, r3
 8006428:	3a01      	subs	r2, #1
 800642a:	1c5d      	adds	r5, r3, #1
 800642c:	42b3      	cmp	r3, r6
 800642e:	bfa8      	it	ge
 8006430:	2200      	movge	r2, #0
 8006432:	18ab      	adds	r3, r5, r2
 8006434:	e7e1      	b.n	80063fa <__sccl+0x32>
 8006436:	4610      	mov	r0, r2
 8006438:	e7da      	b.n	80063f0 <__sccl+0x28>

0800643a <__submore>:
 800643a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643e:	460c      	mov	r4, r1
 8006440:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006446:	4299      	cmp	r1, r3
 8006448:	d11d      	bne.n	8006486 <__submore+0x4c>
 800644a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800644e:	f7ff f927 	bl	80056a0 <_malloc_r>
 8006452:	b918      	cbnz	r0, 800645c <__submore+0x22>
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006460:	63a3      	str	r3, [r4, #56]	; 0x38
 8006462:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006466:	6360      	str	r0, [r4, #52]	; 0x34
 8006468:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800646c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006470:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006474:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006478:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800647c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006480:	6020      	str	r0, [r4, #0]
 8006482:	2000      	movs	r0, #0
 8006484:	e7e8      	b.n	8006458 <__submore+0x1e>
 8006486:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006488:	0077      	lsls	r7, r6, #1
 800648a:	463a      	mov	r2, r7
 800648c:	f000 f848 	bl	8006520 <_realloc_r>
 8006490:	4605      	mov	r5, r0
 8006492:	2800      	cmp	r0, #0
 8006494:	d0de      	beq.n	8006454 <__submore+0x1a>
 8006496:	eb00 0806 	add.w	r8, r0, r6
 800649a:	4601      	mov	r1, r0
 800649c:	4632      	mov	r2, r6
 800649e:	4640      	mov	r0, r8
 80064a0:	f000 f830 	bl	8006504 <memcpy>
 80064a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80064a8:	f8c4 8000 	str.w	r8, [r4]
 80064ac:	e7e9      	b.n	8006482 <__submore+0x48>

080064ae <memmove>:
 80064ae:	4288      	cmp	r0, r1
 80064b0:	b510      	push	{r4, lr}
 80064b2:	eb01 0402 	add.w	r4, r1, r2
 80064b6:	d902      	bls.n	80064be <memmove+0x10>
 80064b8:	4284      	cmp	r4, r0
 80064ba:	4623      	mov	r3, r4
 80064bc:	d807      	bhi.n	80064ce <memmove+0x20>
 80064be:	1e43      	subs	r3, r0, #1
 80064c0:	42a1      	cmp	r1, r4
 80064c2:	d008      	beq.n	80064d6 <memmove+0x28>
 80064c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064cc:	e7f8      	b.n	80064c0 <memmove+0x12>
 80064ce:	4402      	add	r2, r0
 80064d0:	4601      	mov	r1, r0
 80064d2:	428a      	cmp	r2, r1
 80064d4:	d100      	bne.n	80064d8 <memmove+0x2a>
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064e0:	e7f7      	b.n	80064d2 <memmove+0x24>
	...

080064e4 <_sbrk_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d06      	ldr	r5, [pc, #24]	; (8006500 <_sbrk_r+0x1c>)
 80064e8:	2300      	movs	r3, #0
 80064ea:	4604      	mov	r4, r0
 80064ec:	4608      	mov	r0, r1
 80064ee:	602b      	str	r3, [r5, #0]
 80064f0:	f7fa ff0c 	bl	800130c <_sbrk>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_sbrk_r+0x1a>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_sbrk_r+0x1a>
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	20000368 	.word	0x20000368

08006504 <memcpy>:
 8006504:	440a      	add	r2, r1
 8006506:	4291      	cmp	r1, r2
 8006508:	f100 33ff 	add.w	r3, r0, #4294967295
 800650c:	d100      	bne.n	8006510 <memcpy+0xc>
 800650e:	4770      	bx	lr
 8006510:	b510      	push	{r4, lr}
 8006512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800651a:	4291      	cmp	r1, r2
 800651c:	d1f9      	bne.n	8006512 <memcpy+0xe>
 800651e:	bd10      	pop	{r4, pc}

08006520 <_realloc_r>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	4680      	mov	r8, r0
 8006526:	4614      	mov	r4, r2
 8006528:	460e      	mov	r6, r1
 800652a:	b921      	cbnz	r1, 8006536 <_realloc_r+0x16>
 800652c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006530:	4611      	mov	r1, r2
 8006532:	f7ff b8b5 	b.w	80056a0 <_malloc_r>
 8006536:	b92a      	cbnz	r2, 8006544 <_realloc_r+0x24>
 8006538:	f7ff f846 	bl	80055c8 <_free_r>
 800653c:	4625      	mov	r5, r4
 800653e:	4628      	mov	r0, r5
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	f000 f914 	bl	8006770 <_malloc_usable_size_r>
 8006548:	4284      	cmp	r4, r0
 800654a:	4607      	mov	r7, r0
 800654c:	d802      	bhi.n	8006554 <_realloc_r+0x34>
 800654e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006552:	d812      	bhi.n	800657a <_realloc_r+0x5a>
 8006554:	4621      	mov	r1, r4
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff f8a2 	bl	80056a0 <_malloc_r>
 800655c:	4605      	mov	r5, r0
 800655e:	2800      	cmp	r0, #0
 8006560:	d0ed      	beq.n	800653e <_realloc_r+0x1e>
 8006562:	42bc      	cmp	r4, r7
 8006564:	4622      	mov	r2, r4
 8006566:	4631      	mov	r1, r6
 8006568:	bf28      	it	cs
 800656a:	463a      	movcs	r2, r7
 800656c:	f7ff ffca 	bl	8006504 <memcpy>
 8006570:	4631      	mov	r1, r6
 8006572:	4640      	mov	r0, r8
 8006574:	f7ff f828 	bl	80055c8 <_free_r>
 8006578:	e7e1      	b.n	800653e <_realloc_r+0x1e>
 800657a:	4635      	mov	r5, r6
 800657c:	e7df      	b.n	800653e <_realloc_r+0x1e>
	...

08006580 <_strtol_l.constprop.0>:
 8006580:	2b01      	cmp	r3, #1
 8006582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006586:	d001      	beq.n	800658c <_strtol_l.constprop.0+0xc>
 8006588:	2b24      	cmp	r3, #36	; 0x24
 800658a:	d906      	bls.n	800659a <_strtol_l.constprop.0+0x1a>
 800658c:	f7fe fff0 	bl	8005570 <__errno>
 8006590:	2316      	movs	r3, #22
 8006592:	6003      	str	r3, [r0, #0]
 8006594:	2000      	movs	r0, #0
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006680 <_strtol_l.constprop.0+0x100>
 800659e:	460d      	mov	r5, r1
 80065a0:	462e      	mov	r6, r5
 80065a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065a6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80065aa:	f017 0708 	ands.w	r7, r7, #8
 80065ae:	d1f7      	bne.n	80065a0 <_strtol_l.constprop.0+0x20>
 80065b0:	2c2d      	cmp	r4, #45	; 0x2d
 80065b2:	d132      	bne.n	800661a <_strtol_l.constprop.0+0x9a>
 80065b4:	782c      	ldrb	r4, [r5, #0]
 80065b6:	2701      	movs	r7, #1
 80065b8:	1cb5      	adds	r5, r6, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d05b      	beq.n	8006676 <_strtol_l.constprop.0+0xf6>
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d109      	bne.n	80065d6 <_strtol_l.constprop.0+0x56>
 80065c2:	2c30      	cmp	r4, #48	; 0x30
 80065c4:	d107      	bne.n	80065d6 <_strtol_l.constprop.0+0x56>
 80065c6:	782c      	ldrb	r4, [r5, #0]
 80065c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80065cc:	2c58      	cmp	r4, #88	; 0x58
 80065ce:	d14d      	bne.n	800666c <_strtol_l.constprop.0+0xec>
 80065d0:	786c      	ldrb	r4, [r5, #1]
 80065d2:	2310      	movs	r3, #16
 80065d4:	3502      	adds	r5, #2
 80065d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80065da:	f108 38ff 	add.w	r8, r8, #4294967295
 80065de:	f04f 0e00 	mov.w	lr, #0
 80065e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80065e6:	4676      	mov	r6, lr
 80065e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80065ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80065f0:	f1bc 0f09 	cmp.w	ip, #9
 80065f4:	d816      	bhi.n	8006624 <_strtol_l.constprop.0+0xa4>
 80065f6:	4664      	mov	r4, ip
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	dd24      	ble.n	8006646 <_strtol_l.constprop.0+0xc6>
 80065fc:	f1be 3fff 	cmp.w	lr, #4294967295
 8006600:	d008      	beq.n	8006614 <_strtol_l.constprop.0+0x94>
 8006602:	45b1      	cmp	r9, r6
 8006604:	d31c      	bcc.n	8006640 <_strtol_l.constprop.0+0xc0>
 8006606:	d101      	bne.n	800660c <_strtol_l.constprop.0+0x8c>
 8006608:	45a2      	cmp	sl, r4
 800660a:	db19      	blt.n	8006640 <_strtol_l.constprop.0+0xc0>
 800660c:	fb06 4603 	mla	r6, r6, r3, r4
 8006610:	f04f 0e01 	mov.w	lr, #1
 8006614:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006618:	e7e8      	b.n	80065ec <_strtol_l.constprop.0+0x6c>
 800661a:	2c2b      	cmp	r4, #43	; 0x2b
 800661c:	bf04      	itt	eq
 800661e:	782c      	ldrbeq	r4, [r5, #0]
 8006620:	1cb5      	addeq	r5, r6, #2
 8006622:	e7ca      	b.n	80065ba <_strtol_l.constprop.0+0x3a>
 8006624:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006628:	f1bc 0f19 	cmp.w	ip, #25
 800662c:	d801      	bhi.n	8006632 <_strtol_l.constprop.0+0xb2>
 800662e:	3c37      	subs	r4, #55	; 0x37
 8006630:	e7e2      	b.n	80065f8 <_strtol_l.constprop.0+0x78>
 8006632:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006636:	f1bc 0f19 	cmp.w	ip, #25
 800663a:	d804      	bhi.n	8006646 <_strtol_l.constprop.0+0xc6>
 800663c:	3c57      	subs	r4, #87	; 0x57
 800663e:	e7db      	b.n	80065f8 <_strtol_l.constprop.0+0x78>
 8006640:	f04f 3eff 	mov.w	lr, #4294967295
 8006644:	e7e6      	b.n	8006614 <_strtol_l.constprop.0+0x94>
 8006646:	f1be 3fff 	cmp.w	lr, #4294967295
 800664a:	d105      	bne.n	8006658 <_strtol_l.constprop.0+0xd8>
 800664c:	2322      	movs	r3, #34	; 0x22
 800664e:	6003      	str	r3, [r0, #0]
 8006650:	4646      	mov	r6, r8
 8006652:	b942      	cbnz	r2, 8006666 <_strtol_l.constprop.0+0xe6>
 8006654:	4630      	mov	r0, r6
 8006656:	e79e      	b.n	8006596 <_strtol_l.constprop.0+0x16>
 8006658:	b107      	cbz	r7, 800665c <_strtol_l.constprop.0+0xdc>
 800665a:	4276      	negs	r6, r6
 800665c:	2a00      	cmp	r2, #0
 800665e:	d0f9      	beq.n	8006654 <_strtol_l.constprop.0+0xd4>
 8006660:	f1be 0f00 	cmp.w	lr, #0
 8006664:	d000      	beq.n	8006668 <_strtol_l.constprop.0+0xe8>
 8006666:	1e69      	subs	r1, r5, #1
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	e7f3      	b.n	8006654 <_strtol_l.constprop.0+0xd4>
 800666c:	2430      	movs	r4, #48	; 0x30
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1b1      	bne.n	80065d6 <_strtol_l.constprop.0+0x56>
 8006672:	2308      	movs	r3, #8
 8006674:	e7af      	b.n	80065d6 <_strtol_l.constprop.0+0x56>
 8006676:	2c30      	cmp	r4, #48	; 0x30
 8006678:	d0a5      	beq.n	80065c6 <_strtol_l.constprop.0+0x46>
 800667a:	230a      	movs	r3, #10
 800667c:	e7ab      	b.n	80065d6 <_strtol_l.constprop.0+0x56>
 800667e:	bf00      	nop
 8006680:	08006833 	.word	0x08006833

08006684 <_strtol_r>:
 8006684:	f7ff bf7c 	b.w	8006580 <_strtol_l.constprop.0>

08006688 <_strtoul_l.constprop.0>:
 8006688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800668c:	4f36      	ldr	r7, [pc, #216]	; (8006768 <_strtoul_l.constprop.0+0xe0>)
 800668e:	4686      	mov	lr, r0
 8006690:	460d      	mov	r5, r1
 8006692:	4628      	mov	r0, r5
 8006694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006698:	5d3e      	ldrb	r6, [r7, r4]
 800669a:	f016 0608 	ands.w	r6, r6, #8
 800669e:	d1f8      	bne.n	8006692 <_strtoul_l.constprop.0+0xa>
 80066a0:	2c2d      	cmp	r4, #45	; 0x2d
 80066a2:	d130      	bne.n	8006706 <_strtoul_l.constprop.0+0x7e>
 80066a4:	782c      	ldrb	r4, [r5, #0]
 80066a6:	2601      	movs	r6, #1
 80066a8:	1c85      	adds	r5, r0, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d057      	beq.n	800675e <_strtoul_l.constprop.0+0xd6>
 80066ae:	2b10      	cmp	r3, #16
 80066b0:	d109      	bne.n	80066c6 <_strtoul_l.constprop.0+0x3e>
 80066b2:	2c30      	cmp	r4, #48	; 0x30
 80066b4:	d107      	bne.n	80066c6 <_strtoul_l.constprop.0+0x3e>
 80066b6:	7828      	ldrb	r0, [r5, #0]
 80066b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80066bc:	2858      	cmp	r0, #88	; 0x58
 80066be:	d149      	bne.n	8006754 <_strtoul_l.constprop.0+0xcc>
 80066c0:	786c      	ldrb	r4, [r5, #1]
 80066c2:	2310      	movs	r3, #16
 80066c4:	3502      	adds	r5, #2
 80066c6:	f04f 38ff 	mov.w	r8, #4294967295
 80066ca:	2700      	movs	r7, #0
 80066cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80066d0:	fb03 f908 	mul.w	r9, r3, r8
 80066d4:	ea6f 0909 	mvn.w	r9, r9
 80066d8:	4638      	mov	r0, r7
 80066da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80066de:	f1bc 0f09 	cmp.w	ip, #9
 80066e2:	d815      	bhi.n	8006710 <_strtoul_l.constprop.0+0x88>
 80066e4:	4664      	mov	r4, ip
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	dd23      	ble.n	8006732 <_strtoul_l.constprop.0+0xaa>
 80066ea:	f1b7 3fff 	cmp.w	r7, #4294967295
 80066ee:	d007      	beq.n	8006700 <_strtoul_l.constprop.0+0x78>
 80066f0:	4580      	cmp	r8, r0
 80066f2:	d31b      	bcc.n	800672c <_strtoul_l.constprop.0+0xa4>
 80066f4:	d101      	bne.n	80066fa <_strtoul_l.constprop.0+0x72>
 80066f6:	45a1      	cmp	r9, r4
 80066f8:	db18      	blt.n	800672c <_strtoul_l.constprop.0+0xa4>
 80066fa:	fb00 4003 	mla	r0, r0, r3, r4
 80066fe:	2701      	movs	r7, #1
 8006700:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006704:	e7e9      	b.n	80066da <_strtoul_l.constprop.0+0x52>
 8006706:	2c2b      	cmp	r4, #43	; 0x2b
 8006708:	bf04      	itt	eq
 800670a:	782c      	ldrbeq	r4, [r5, #0]
 800670c:	1c85      	addeq	r5, r0, #2
 800670e:	e7cc      	b.n	80066aa <_strtoul_l.constprop.0+0x22>
 8006710:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006714:	f1bc 0f19 	cmp.w	ip, #25
 8006718:	d801      	bhi.n	800671e <_strtoul_l.constprop.0+0x96>
 800671a:	3c37      	subs	r4, #55	; 0x37
 800671c:	e7e3      	b.n	80066e6 <_strtoul_l.constprop.0+0x5e>
 800671e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006722:	f1bc 0f19 	cmp.w	ip, #25
 8006726:	d804      	bhi.n	8006732 <_strtoul_l.constprop.0+0xaa>
 8006728:	3c57      	subs	r4, #87	; 0x57
 800672a:	e7dc      	b.n	80066e6 <_strtoul_l.constprop.0+0x5e>
 800672c:	f04f 37ff 	mov.w	r7, #4294967295
 8006730:	e7e6      	b.n	8006700 <_strtoul_l.constprop.0+0x78>
 8006732:	1c7b      	adds	r3, r7, #1
 8006734:	d106      	bne.n	8006744 <_strtoul_l.constprop.0+0xbc>
 8006736:	2322      	movs	r3, #34	; 0x22
 8006738:	f8ce 3000 	str.w	r3, [lr]
 800673c:	4638      	mov	r0, r7
 800673e:	b932      	cbnz	r2, 800674e <_strtoul_l.constprop.0+0xc6>
 8006740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006744:	b106      	cbz	r6, 8006748 <_strtoul_l.constprop.0+0xc0>
 8006746:	4240      	negs	r0, r0
 8006748:	2a00      	cmp	r2, #0
 800674a:	d0f9      	beq.n	8006740 <_strtoul_l.constprop.0+0xb8>
 800674c:	b107      	cbz	r7, 8006750 <_strtoul_l.constprop.0+0xc8>
 800674e:	1e69      	subs	r1, r5, #1
 8006750:	6011      	str	r1, [r2, #0]
 8006752:	e7f5      	b.n	8006740 <_strtoul_l.constprop.0+0xb8>
 8006754:	2430      	movs	r4, #48	; 0x30
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1b5      	bne.n	80066c6 <_strtoul_l.constprop.0+0x3e>
 800675a:	2308      	movs	r3, #8
 800675c:	e7b3      	b.n	80066c6 <_strtoul_l.constprop.0+0x3e>
 800675e:	2c30      	cmp	r4, #48	; 0x30
 8006760:	d0a9      	beq.n	80066b6 <_strtoul_l.constprop.0+0x2e>
 8006762:	230a      	movs	r3, #10
 8006764:	e7af      	b.n	80066c6 <_strtoul_l.constprop.0+0x3e>
 8006766:	bf00      	nop
 8006768:	08006833 	.word	0x08006833

0800676c <_strtoul_r>:
 800676c:	f7ff bf8c 	b.w	8006688 <_strtoul_l.constprop.0>

08006770 <_malloc_usable_size_r>:
 8006770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006774:	1f18      	subs	r0, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	bfbc      	itt	lt
 800677a:	580b      	ldrlt	r3, [r1, r0]
 800677c:	18c0      	addlt	r0, r0, r3
 800677e:	4770      	bx	lr

08006780 <_init>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr

0800678c <_fini>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr
