
drive-motor-hcsr04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006644  08006644  00016644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e0  080067e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e8  080067e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080067f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000005c  0800684c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  0800684c  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db87  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f66  00000000  00000000  0002dc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f6  00000000  00000000  00030878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000218a  00000000  00000000  0003126e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed1c  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e0b5  00000000  00000000  00042114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d68  00000000  00000000  000d01cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000d3f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800662c 	.word	0x0800662c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800662c 	.word	0x0800662c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800058c:	b580      	push	{r7, lr}
 800058e:	b090      	sub	sp, #64	; 0x40
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7f1b      	ldrb	r3, [r3, #28]
 8000598:	2b01      	cmp	r3, #1
 800059a:	f040 80a9 	bne.w	80006f0 <HAL_TIM_IC_CaptureCallback+0x164>
  		if (flag_raise==0){
 800059e:	4b56      	ldr	r3, [pc, #344]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d11a      	bne.n	80005dc <HAL_TIM_IC_CaptureCallback+0x50>
  			val_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80005a6:	2100      	movs	r1, #0
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 f807 	bl	80035bc <HAL_TIM_ReadCapturedValue>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a52      	ldr	r2, [pc, #328]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x170>)
 80005b2:	6013      	str	r3, [r2, #0]
  			flag_raise=1;
 80005b4:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6a1a      	ldr	r2, [r3, #32]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f022 020a 	bic.w	r2, r2, #10
 80005c8:	621a      	str	r2, [r3, #32]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6a1a      	ldr	r2, [r3, #32]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f042 0202 	orr.w	r2, r2, #2
 80005d8:	621a      	str	r2, [r3, #32]
			flag_raise = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
  		}
  	}
}
 80005da:	e089      	b.n	80006f0 <HAL_TIM_IC_CaptureCallback+0x164>
  		else if (flag_raise == 1){
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	f040 8085 	bne.w	80006f0 <HAL_TIM_IC_CaptureCallback+0x164>
  			val_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f002 ffe7 	bl	80035bc <HAL_TIM_ReadCapturedValue>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a43      	ldr	r2, [pc, #268]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x174>)
 80005f2:	6013      	str	r3, [r2, #0]
  			__HAL_TIM_SET_COUNTER(htim,0);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	; 0x24
  			if (val_2 > val_1){
 80005fc:	4b40      	ldr	r3, [pc, #256]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x174>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x170>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d907      	bls.n	8000618 <HAL_TIM_IC_CaptureCallback+0x8c>
  				difference = val_2 - val_1;
 8000608:	4b3d      	ldr	r3, [pc, #244]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x174>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x170>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	4a3c      	ldr	r2, [pc, #240]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	e00f      	b.n	8000638 <HAL_TIM_IC_CaptureCallback+0xac>
  			else if (val_1 > val_2){
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x170>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b38      	ldr	r3, [pc, #224]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x174>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d909      	bls.n	8000638 <HAL_TIM_IC_CaptureCallback+0xac>
  				difference = (0xffff - val_1) + val_2;
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b34      	ldr	r3, [pc, #208]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x170>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000632:	33ff      	adds	r3, #255	; 0xff
 8000634:	4a33      	ldr	r2, [pc, #204]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000636:	6013      	str	r3, [r2, #0]
  			distance = difference/58;
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x178>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a32      	ldr	r2, [pc, #200]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <HAL_TIM_IC_CaptureCallback+0x180>)
 8000648:	801a      	strh	r2, [r3, #0]
  			sprintf(message, "Distancia: %d cm \r\n",distance);
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <HAL_TIM_IC_CaptureCallback+0x180>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	492e      	ldr	r1, [pc, #184]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fe8a 	bl	8005370 <siprintf>
  			HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fdbd 	bl	80001e0 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	f107 010c 	add.w	r1, r7, #12
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	4828      	ldr	r0, [pc, #160]	; (8000714 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000674:	f003 fcc7 	bl	8004006 <HAL_UART_Transmit>
  			if(distance > 15){
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <HAL_TIM_IC_CaptureCallback+0x180>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b0f      	cmp	r3, #15
 800067e:	d90f      	bls.n	80006a0 <HAL_TIM_IC_CaptureCallback+0x114>
  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); //verde
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4824      	ldr	r0, [pc, #144]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000688:	f001 fd36 	bl	80020f8 <HAL_GPIO_WritePin>
  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0); //vermelho
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	4821      	ldr	r0, [pc, #132]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000694:	f001 fd30 	bl	80020f8 <HAL_GPIO_WritePin>
  				stop_flag = 0;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <HAL_TIM_IC_CaptureCallback+0x190>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]
 800069e:	e00e      	b.n	80006be <HAL_TIM_IC_CaptureCallback+0x132>
  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //verde
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a6:	481c      	ldr	r0, [pc, #112]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80006a8:	f001 fd26 	bl	80020f8 <HAL_GPIO_WritePin>
  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); //vermelho
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4819      	ldr	r0, [pc, #100]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80006b4:	f001 fd20 	bl	80020f8 <HAL_GPIO_WritePin>
  				stop_flag = 1;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_TIM_IC_CaptureCallback+0x190>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	801a      	strh	r2, [r3, #0]
			flag_raise = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6a1a      	ldr	r2, [r3, #32]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 020a 	bic.w	r2, r2, #10
 80006d2:	621a      	str	r2, [r3, #32]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a12      	ldr	r2, [r2, #32]
 80006de:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_TIM_IC_CaptureCallback+0x194>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68da      	ldr	r2, [r3, #12]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <HAL_TIM_IC_CaptureCallback+0x194>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f022 0202 	bic.w	r2, r2, #2
 80006ee:	60da      	str	r2, [r3, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3740      	adds	r7, #64	; 0x40
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000200 	.word	0x20000200
 80006fc:	200001f4 	.word	0x200001f4
 8000700:	200001f8 	.word	0x200001f8
 8000704:	200001fc 	.word	0x200001fc
 8000708:	8d3dcb09 	.word	0x8d3dcb09
 800070c:	20000202 	.word	0x20000202
 8000710:	08006644 	.word	0x08006644
 8000714:	20000150 	.word	0x20000150
 8000718:	40020400 	.word	0x40020400
 800071c:	20000204 	.word	0x20000204
 8000720:	20000078 	.word	0x20000078

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fddc 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f82a 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 fa1c 	bl	8000b6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000734:	f000 f9fa 	bl	8000b2c <MX_DMA_Init>
  MX_TIM2_Init();
 8000738:	f000 f902 	bl	8000940 <MX_TIM2_Init>
  MX_TIM5_Init();
 800073c:	f000 f974 	bl	8000a28 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000740:	f000 f88a 	bl	8000858 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000744:	f000 f9c8 	bl	8000ad8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000748:	2104      	movs	r1, #4
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <main+0x4c>)
 800074c:	f002 f9e4 	bl	8002b18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000750:	2100      	movs	r1, #0
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <main+0x50>)
 8000754:	f002 f9e0 	bl	8002b18 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000758:	2100      	movs	r1, #0
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <main+0x54>)
 800075c:	f002 fae6 	bl	8002d2c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_DMA(&huart1, RxCoord, SIZE_RX_COORD) ;
 8000760:	220a      	movs	r2, #10
 8000762:	4906      	ldr	r1, [pc, #24]	; (800077c <main+0x58>)
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <main+0x5c>)
 8000766:	f003 fce0 	bl	800412a <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  motor_stright();
 800076a:	f000 fb23 	bl	8000db4 <motor_stright>
 800076e:	e7fc      	b.n	800076a <main+0x46>
 8000770:	200000c0 	.word	0x200000c0
 8000774:	20000108 	.word	0x20000108
 8000778:	20000078 	.word	0x20000078
 800077c:	2000020c 	.word	0x2000020c
 8000780:	20000150 	.word	0x20000150

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fe3a 	bl	800540c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a27      	ldr	r2, [pc, #156]	; (8000850 <SystemClock_Config+0xcc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemClock_Config+0xd0>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007f8:	2350      	movs	r3, #80	; 0x50
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fc8f 	bl	800212c <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000814:	f000 fa78 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000824:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800082a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fef0 	bl	800261c <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000842:	f000 fa61 	bl	8000d08 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_TIM1_Init+0xe0>)
 8000884:	4a2d      	ldr	r2, [pc, #180]	; (800093c <MX_TIM1_Init+0xe4>)
 8000886:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8000888:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_TIM1_Init+0xe0>)
 800088a:	2213      	movs	r2, #19
 800088c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_TIM1_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_TIM1_Init+0xe0>)
 8000896:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800089a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_TIM1_Init+0xe0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_TIM1_Init+0xe0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_TIM1_Init+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ae:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_TIM1_Init+0xe0>)
 80008b0:	f002 f894 	bl	80029dc <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80008ba:	f000 fa25 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_TIM1_Init+0xe0>)
 80008cc:	f002 fdae 	bl	800342c <HAL_TIM_ConfigClockSource>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80008d6:	f000 fa17 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80008da:	4817      	ldr	r0, [pc, #92]	; (8000938 <MX_TIM1_Init+0xe0>)
 80008dc:	f002 f9cc 	bl	8002c78 <HAL_TIM_IC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80008e6:	f000 fa0f 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_TIM1_Init+0xe0>)
 80008fa:	f003 fab5 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000904:	f000 fa00 	bl	8000d08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800090c:	2301      	movs	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_TIM1_Init+0xe0>)
 8000920:	f002 fc26 	bl	8003170 <HAL_TIM_IC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800092a:	f000 f9ed 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000078 	.word	0x20000078
 800093c:	40010000 	.word	0x40010000

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	; 0x38
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_TIM2_Init+0xe4>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_TIM2_Init+0xe4>)
 800097a:	2213      	movs	r2, #19
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <MX_TIM2_Init+0xe4>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_TIM2_Init+0xe4>)
 8000986:	2231      	movs	r2, #49	; 0x31
 8000988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_TIM2_Init+0xe4>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_TIM2_Init+0xe4>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000996:	4823      	ldr	r0, [pc, #140]	; (8000a24 <MX_TIM2_Init+0xe4>)
 8000998:	f002 f820 	bl	80029dc <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009a2:	f000 f9b1 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_TIM2_Init+0xe4>)
 80009b4:	f002 fd3a 	bl	800342c <HAL_TIM_ConfigClockSource>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009be:	f000 f9a3 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009c2:	4818      	ldr	r0, [pc, #96]	; (8000a24 <MX_TIM2_Init+0xe4>)
 80009c4:	f002 f859 	bl	8002a7a <HAL_TIM_PWM_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009ce:	f000 f99b 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	4619      	mov	r1, r3
 80009e0:	4810      	ldr	r0, [pc, #64]	; (8000a24 <MX_TIM2_Init+0xe4>)
 80009e2:	f003 fa41 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80009ec:	f000 f98c 	bl	8000d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f0:	2360      	movs	r3, #96	; 0x60
 80009f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2204      	movs	r2, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <MX_TIM2_Init+0xe4>)
 8000a08:	f002 fc4e 	bl	80032a8 <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a12:	f000 f979 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <MX_TIM2_Init+0xe4>)
 8000a18:	f000 faca 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000a1c:	bf00      	nop
 8000a1e:	3738      	adds	r7, #56	; 0x38
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000c0 	.word	0x200000c0

08000a28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <MX_TIM5_Init+0xac>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 20-1;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a52:	2213      	movs	r2, #19
 8000a54:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50-1;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a5e:	2231      	movs	r2, #49	; 0x31
 8000a60:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a6e:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a70:	f002 f803 	bl	8002a7a <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000a7a:	f000 f945 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000a8e:	f003 f9eb 	bl	8003e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a98:	f000 f936 	bl	8000d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	; 0x60
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000ab4:	f002 fbf8 	bl	80032a8 <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000abe:	f000 f923 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <MX_TIM5_Init+0xa8>)
 8000ac4:	f000 fa74 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000108 	.word	0x20000108
 8000ad4:	40000c00 	.word	0x40000c00

08000ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART1_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f003 fa2c 	bl	8003f6c <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f8f5 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000150 	.word	0x20000150
 8000b28:	40011000 	.word	0x40011000

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_DMA_Init+0x3c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <MX_DMA_Init+0x3c>)
 8000b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_DMA_Init+0x3c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	203a      	movs	r0, #58	; 0x3a
 8000b54:	f000 fd13 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b58:	203a      	movs	r0, #58	; 0x3a
 8000b5a:	f000 fd2c 	bl	80015b6 <HAL_NVIC_EnableIRQ>

}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a23      	ldr	r2, [pc, #140]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_GPIO_Init+0xc8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000bdc:	4816      	ldr	r0, [pc, #88]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000bde:	f001 fa8b 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f246 0103 	movw	r1, #24579	; 0x6003
 8000be8:	4814      	ldr	r0, [pc, #80]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000bea:	f001 fa85 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000bee:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_GPIO_Init+0xcc>)
 8000c08:	f001 f8f2 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GREEN_LED_Pin|RED_LED_Pin;
 8000c0c:	f246 0303 	movw	r3, #24579	; 0x6003
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_GPIO_Init+0xd0>)
 8000c26:	f001 f8e3 	bl	8001df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020400 	.word	0x40020400

08000c40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
	countfull++;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_UART_RxCpltCallback+0x44>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_UART_RxCpltCallback+0x44>)
 8000c50:	6013      	str	r3, [r2, #0]
	sscanf(RxCoord, "(%d,%d,%d)", &received_x, &received_y, &area);
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_UART_RxCpltCallback+0x48>)
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_UART_RxCpltCallback+0x4c>)
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_UART_RxCpltCallback+0x50>)
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <HAL_UART_RxCpltCallback+0x54>)
 8000c5c:	480e      	ldr	r0, [pc, #56]	; (8000c98 <HAL_UART_RxCpltCallback+0x58>)
 8000c5e:	f004 fba7 	bl	80053b0 <siscanf>
	motor_handle(received_x, stop_flag);
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_UART_RxCpltCallback+0x50>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_UART_RxCpltCallback+0x5c>)
 8000c68:	8812      	ldrh	r2, [r2, #0]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f819 	bl	8000ca4 <motor_handle>
	//motor_right();
	HAL_UART_Receive_DMA(&huart1, RxCoord, SIZE_RX_COORD);
 8000c72:	220a      	movs	r2, #10
 8000c74:	4908      	ldr	r1, [pc, #32]	; (8000c98 <HAL_UART_RxCpltCallback+0x58>)
 8000c76:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <HAL_UART_RxCpltCallback+0x60>)
 8000c78:	f003 fa57 	bl	800412a <HAL_UART_Receive_DMA>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000208 	.word	0x20000208
 8000c88:	20000220 	.word	0x20000220
 8000c8c:	2000021c 	.word	0x2000021c
 8000c90:	20000218 	.word	0x20000218
 8000c94:	08006658 	.word	0x08006658
 8000c98:	2000020c 	.word	0x2000020c
 8000c9c:	20000204 	.word	0x20000204
 8000ca0:	20000150 	.word	0x20000150

08000ca4 <motor_handle>:

void motor_handle(int x, uint16_t stop_flag){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
	if (stop_flag == 0){
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d120      	bne.n	8000cf8 <motor_handle+0x54>
		if(x < 42){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b29      	cmp	r3, #41	; 0x29
 8000cba:	dc04      	bgt.n	8000cc6 <motor_handle+0x22>
			motor_right();
 8000cbc:	f000 f82a 	bl	8000d14 <motor_right>
			status = 1;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <motor_handle+0x60>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
		}
		if (x > 46){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cca:	dd04      	ble.n	8000cd6 <motor_handle+0x32>
			motor_left();
 8000ccc:	f000 f84a 	bl	8000d64 <motor_left>
			status = 2;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <motor_handle+0x60>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
		}
		if (x >= 42 && x <= 46){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b29      	cmp	r3, #41	; 0x29
 8000cda:	dd07      	ble.n	8000cec <motor_handle+0x48>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b2e      	cmp	r3, #46	; 0x2e
 8000ce0:	dc04      	bgt.n	8000cec <motor_handle+0x48>
			motor_stop();
 8000ce2:	f000 f88f 	bl	8000e04 <motor_stop>
			status = 3;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <motor_handle+0x60>)
 8000ce8:	2203      	movs	r2, #3
 8000cea:	601a      	str	r2, [r3, #0]
		}
		if (x==0){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d104      	bne.n	8000cfc <motor_handle+0x58>
			motor_stop();
 8000cf2:	f000 f887 	bl	8000e04 <motor_stop>
	}
	else{
		motor_stop();
	}

}
 8000cf6:	e001      	b.n	8000cfc <motor_handle+0x58>
		motor_stop();
 8000cf8:	f000 f884 	bl	8000e04 <motor_stop>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000224 	.word	0x20000224

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <motor_right>:

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,42);
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,45);
}

void motor_right(void){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN1, 1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <motor_right+0x40>)
 8000d1e:	f001 f9eb 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <motor_right+0x40>)
 8000d28:	f001 f9e6 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <motor_right+0x44>)
 8000d32:	f001 f9e1 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <motor_right+0x44>)
 8000d3c:	f001 f9dc 	bl	80020f8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,30);
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <motor_right+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	221e      	movs	r2, #30
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,42);
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <motor_right+0x4c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	222a      	movs	r2, #42	; 0x2a
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	20000108 	.word	0x20000108
 8000d60:	200000c0 	.word	0x200000c0

08000d64 <motor_left>:

void motor_left(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN1, 1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <motor_left+0x40>)
 8000d6e:	f001 f9c3 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <motor_left+0x40>)
 8000d78:	f001 f9be 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <motor_left+0x44>)
 8000d82:	f001 f9b9 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <motor_left+0x44>)
 8000d8c:	f001 f9b4 	bl	80020f8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,42);
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <motor_left+0x48>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	222a      	movs	r2, #42	; 0x2a
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,30);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <motor_left+0x4c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	221e      	movs	r2, #30
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	20000108 	.word	0x20000108
 8000db0:	200000c0 	.word	0x200000c0

08000db4 <motor_stright>:

void motor_stright(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN1, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <motor_stright+0x40>)
 8000dbe:	f001 f99b 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN2, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <motor_stright+0x40>)
 8000dc8:	f001 f996 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <motor_stright+0x44>)
 8000dd2:	f001 f991 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, IN4, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <motor_stright+0x44>)
 8000ddc:	f001 f98c 	bl	80020f8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,42);
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <motor_stright+0x48>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	222a      	movs	r2, #42	; 0x2a
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,45);
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <motor_stright+0x4c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	222d      	movs	r2, #45	; 0x2d
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	20000108 	.word	0x20000108
 8000e00:	200000c0 	.word	0x200000c0

08000e04 <motor_stop>:

void motor_stop(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, IN1, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <motor_stop+0x40>)
 8000e0e:	f001 f973 	bl	80020f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, IN2, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	480b      	ldr	r0, [pc, #44]	; (8000e44 <motor_stop+0x40>)
 8000e18:	f001 f96e 	bl	80020f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, IN3, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <motor_stop+0x44>)
 8000e22:	f001 f969 	bl	80020f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, IN4, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <motor_stop+0x44>)
 8000e2c:	f001 f964 	bl	80020f8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&MOTOR_EN_A_RIGHT,CH_MOTOR_EN_A,0);
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <motor_stop+0x48>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&MOTOR_EN_B_LEFT,CH_MOTOR_EN_B,0);
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <motor_stop+0x4c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	20000108 	.word	0x20000108
 8000e50:	200000c0 	.word	0x200000c0

08000e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <HAL_TIM_Base_MspInit+0xbc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d135      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a25      	ldr	r2, [pc, #148]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <HAL_TIM_Base_MspInit+0xc4>)
 8000f1c:	f000 ff68 	bl	8001df0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	201b      	movs	r0, #27
 8000f26:	f000 fb2a 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f2a:	201b      	movs	r0, #27
 8000f2c:	f000 fb43 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f30:	e012      	b.n	8000f58 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f3a:	d10d      	bne.n	8000f58 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_TIM_Base_MspInit+0xc0>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40010000 	.word	0x40010000
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10d      	bne.n	8000f9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_TIM_PWM_MspInit+0x40>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <HAL_TIM_PWM_MspInit+0x40>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HAL_TIM_PWM_MspInit+0x40>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40000c00 	.word	0x40000c00
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd0:	d11e      	bne.n	8001010 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_TIM_MspPostInit+0xb0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_TIM_MspPostInit+0xb0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_TIM_MspPostInit+0xb0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ffe:	2301      	movs	r3, #1
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4816      	ldr	r0, [pc, #88]	; (8001064 <HAL_TIM_MspPostInit+0xb4>)
 800100a:	f000 fef1 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800100e:	e022      	b.n	8001056 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_TIM_MspPostInit+0xb8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d11d      	bne.n	8001056 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_TIM_MspPostInit+0xb0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_TIM_MspPostInit+0xb0>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_TIM_MspPostInit+0xb0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM5_CH1_Pin;
 8001036:	2301      	movs	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001046:	2302      	movs	r3, #2
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM5_CH1_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <HAL_TIM_MspPostInit+0xb4>)
 8001052:	f000 fecd 	bl	8001df0 <HAL_GPIO_Init>
}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40000c00 	.word	0x40000c00

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a34      	ldr	r2, [pc, #208]	; (800115c <HAL_UART_MspInit+0xf0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d162      	bne.n	8001154 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_UART_MspInit+0xf4>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a32      	ldr	r2, [pc, #200]	; (8001160 <HAL_UART_MspInit+0xf4>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_UART_MspInit+0xf4>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <HAL_UART_MspInit+0xf4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a2b      	ldr	r2, [pc, #172]	; (8001160 <HAL_UART_MspInit+0xf4>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <HAL_UART_MspInit+0xf4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80010c6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d8:	2307      	movs	r3, #7
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4820      	ldr	r0, [pc, #128]	; (8001164 <HAL_UART_MspInit+0xf8>)
 80010e4:	f000 fe84 	bl	8001df0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_UART_MspInit+0xfc>)
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_UART_MspInit+0x100>)
 80010ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <HAL_UART_MspInit+0xfc>)
 80010f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_UART_MspInit+0xfc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_UART_MspInit+0xfc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_UART_MspInit+0xfc>)
 8001104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001108:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0xfc>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_UART_MspInit+0xfc>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0xfc>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_UART_MspInit+0xfc>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0xfc>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <HAL_UART_MspInit+0xfc>)
 800112a:	f000 fa5f 	bl	80015ec <HAL_DMA_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001134:	f7ff fde8 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <HAL_UART_MspInit+0xfc>)
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_UART_MspInit+0xfc>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2107      	movs	r1, #7
 8001148:	2025      	movs	r0, #37	; 0x25
 800114a:	f000 fa18 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800114e:	2025      	movs	r0, #37	; 0x25
 8001150:	f000 fa31 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40011000 	.word	0x40011000
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000
 8001168:	20000194 	.word	0x20000194
 800116c:	40026440 	.word	0x40026440

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f8e4 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM1_CC_IRQHandler+0x10>)
 80011ca:	f001 fec9 	bl	8002f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000078 	.word	0x20000078

080011d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <USART1_IRQHandler+0x10>)
 80011de:	f002 ffd5 	bl	800418c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000150 	.word	0x20000150

080011ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA2_Stream2_IRQHandler+0x10>)
 80011f2:	f000 fb93 	bl	800191c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000194 	.word	0x20000194

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f004 f8f4 	bl	800541c <__errno>
 8001234:	4603      	mov	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <_sbrk+0x64>)
 8001250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20020000 	.word	0x20020000
 8001260:	00000400 	.word	0x00000400
 8001264:	20000228 	.word	0x20000228
 8001268:	20000378 	.word	0x20000378

0800126c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001296:	490e      	ldr	r1, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ac:	4c0b      	ldr	r4, [pc, #44]	; (80012dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ba:	f7ff ffd7 	bl	800126c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f004 f8b3 	bl	8005428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff fa2f 	bl	8000724 <main>
  bx  lr    
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012d4:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 80012d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012dc:	20000378 	.word	0x20000378

080012e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_Init+0x40>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_Init+0x40>)
 80012fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x40>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f92b 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	200f      	movs	r0, #15
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fd9c 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f943 	bl	80015d2 <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f90b 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	2000022c 	.word	0x2000022c

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	2000022c 	.word	0x2000022c

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff29 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff3e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff feda 	bl	80013b0 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e099      	b.n	800173c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	e00f      	b.n	800164a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff fec1 	bl	80013b0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d908      	bls.n	800164a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e078      	b.n	800173c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e8      	bne.n	800162a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_DMA_Init+0x158>)
 8001664:	4013      	ands	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4313      	orrs	r3, r2
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d117      	bne.n	800170e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00e      	beq.n	800170e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fb01 	bl	8001cf8 <DMA_CheckFifoParam>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800170a:	2301      	movs	r3, #1
 800170c:	e016      	b.n	800173c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fab8 	bl	8001c8c <DMA_CalcBaseAndBitshift>
 800171c:	4603      	mov	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	223f      	movs	r2, #63	; 0x3f
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f010803f 	.word	0xf010803f

08001748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_DMA_Start_IT+0x26>
 800176a:	2302      	movs	r3, #2
 800176c:	e040      	b.n	80017f0 <HAL_DMA_Start_IT+0xa8>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12f      	bne.n	80017e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fa4a 	bl	8001c30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	223f      	movs	r2, #63	; 0x3f
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0216 	orr.w	r2, r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0208 	orr.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e005      	b.n	80017ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
 80017ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001806:	f7ff fdd3 	bl	80013b0 <HAL_GetTick>
 800180a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d008      	beq.n	800182a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e052      	b.n	80018d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0216 	bic.w	r2, r2, #22
 8001838:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001848:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_DMA_Abort+0x62>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0208 	bic.w	r2, r2, #8
 8001868:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187a:	e013      	b.n	80018a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800187c:	f7ff fd98 	bl	80013b0 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b05      	cmp	r3, #5
 8001888:	d90c      	bls.n	80018a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2203      	movs	r2, #3
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e015      	b.n	80018d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1e4      	bne.n	800187c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	223f      	movs	r2, #63	; 0x3f
 80018b8:	409a      	lsls	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d004      	beq.n	80018f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00c      	b.n	8001910 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2205      	movs	r2, #5
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0201 	bic.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001928:	4b8e      	ldr	r3, [pc, #568]	; (8001b64 <HAL_DMA_IRQHandler+0x248>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a8e      	ldr	r2, [pc, #568]	; (8001b68 <HAL_DMA_IRQHandler+0x24c>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	2208      	movs	r2, #8
 8001948:	409a      	lsls	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01a      	beq.n	8001988 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0204 	bic.w	r2, r2, #4
 800196e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	2208      	movs	r2, #8
 8001976:	409a      	lsls	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	2201      	movs	r2, #1
 800198e:	409a      	lsls	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d012      	beq.n	80019be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	2201      	movs	r2, #1
 80019ac:	409a      	lsls	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	f043 0202 	orr.w	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	2204      	movs	r2, #4
 80019c4:	409a      	lsls	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d012      	beq.n	80019f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	2204      	movs	r2, #4
 80019e2:	409a      	lsls	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	f043 0204 	orr.w	r2, r3, #4
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2210      	movs	r2, #16
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d043      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03c      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	2210      	movs	r2, #16
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d018      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d108      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d024      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
 8001a4a:	e01f      	b.n	8001a8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01b      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
 8001a5c:	e016      	b.n	8001a8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0208 	bic.w	r2, r2, #8
 8001a7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2220      	movs	r2, #32
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 808f 	beq.w	8001bbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8087 	beq.w	8001bbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d136      	bne.n	8001b34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0216 	bic.w	r2, r2, #22
 8001ad4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x1da>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0208 	bic.w	r2, r2, #8
 8001b04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	223f      	movs	r2, #63	; 0x3f
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d07e      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
        }
        return;
 8001b32:	e079      	b.n	8001c28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01d      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d031      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4798      	blx	r3
 8001b60:	e02c      	b.n	8001bbc <HAL_DMA_IRQHandler+0x2a0>
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000
 8001b68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
 8001b7c:	e01e      	b.n	8001bbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10f      	bne.n	8001bac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0210 	bic.w	r2, r2, #16
 8001b9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d032      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d022      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d307      	bcc.n	8001c04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f2      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x2cc>
 8001c02:	e000      	b.n	8001c06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
 8001c26:	e000      	b.n	8001c2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c28:	bf00      	nop
    }
  }
}
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	d108      	bne.n	8001c70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c6e:	e007      	b.n	8001c80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3b10      	subs	r3, #16
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca6:	4a13      	ldr	r2, [pc, #76]	; (8001cf4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d909      	bls.n	8001cce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	1d1a      	adds	r2, r3, #4
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58
 8001ccc:	e007      	b.n	8001cde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	aaaaaaab 	.word	0xaaaaaaab
 8001cf4:	08006688 	.word	0x08006688

08001cf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11f      	bne.n	8001d52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d856      	bhi.n	8001dc6 <DMA_CheckFifoParam+0xce>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <DMA_CheckFifoParam+0x28>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d31 	.word	0x08001d31
 8001d24:	08001d43 	.word	0x08001d43
 8001d28:	08001d31 	.word	0x08001d31
 8001d2c:	08001dc7 	.word	0x08001dc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d046      	beq.n	8001dca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d40:	e043      	b.n	8001dca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d4a:	d140      	bne.n	8001dce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d50:	e03d      	b.n	8001dce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5a:	d121      	bne.n	8001da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d837      	bhi.n	8001dd2 <DMA_CheckFifoParam+0xda>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <DMA_CheckFifoParam+0x70>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001d7f 	.word	0x08001d7f
 8001d70:	08001d79 	.word	0x08001d79
 8001d74:	08001d91 	.word	0x08001d91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7c:	e030      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d025      	beq.n	8001dd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d8e:	e022      	b.n	8001dd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d98:	d11f      	bne.n	8001dda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d9e:	e01c      	b.n	8001dda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d903      	bls.n	8001dae <DMA_CheckFifoParam+0xb6>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d003      	beq.n	8001db4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dac:	e018      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
      break;
 8001db2:	e015      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00e      	beq.n	8001dde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc4:	e00b      	b.n	8001dde <DMA_CheckFifoParam+0xe6>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e00a      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e008      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dce:	bf00      	nop
 8001dd0:	e006      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd2:	bf00      	nop
 8001dd4:	e004      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e002      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dde:	bf00      	nop
    }
  } 
  
  return status; 
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e159      	b.n	80020c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8148 	bne.w	80020ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d005      	beq.n	8001e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d130      	bne.n	8001ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0201 	and.w	r2, r3, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d017      	beq.n	8001ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a2 	beq.w	80020ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a56      	ldr	r2, [pc, #344]	; (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f92:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_GPIO_Init+0x2ec>)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a49      	ldr	r2, [pc, #292]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d019      	beq.n	8001ff2 <HAL_GPIO_Init+0x202>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a48      	ldr	r2, [pc, #288]	; (80020e4 <HAL_GPIO_Init+0x2f4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x1fe>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <HAL_GPIO_Init+0x2f8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <HAL_GPIO_Init+0x1fa>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a46      	ldr	r2, [pc, #280]	; (80020ec <HAL_GPIO_Init+0x2fc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_GPIO_Init+0x1f6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a45      	ldr	r2, [pc, #276]	; (80020f0 <HAL_GPIO_Init+0x300>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_GPIO_Init+0x1f2>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e008      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x204>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f002 0203 	and.w	r2, r2, #3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x2ec>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002036:	4a2f      	ldr	r2, [pc, #188]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_GPIO_Init+0x304>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800208a:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <HAL_GPIO_Init+0x304>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_GPIO_Init+0x304>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b4:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	f67f aea2 	bls.w	8001e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e267      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d075      	beq.n	8002236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214a:	4b88      	ldr	r3, [pc, #544]	; (800236c <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00c      	beq.n	8002170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4b85      	ldr	r3, [pc, #532]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d112      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216e:	d10b      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	4b7e      	ldr	r3, [pc, #504]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05b      	beq.n	8002234 <HAL_RCC_OscConfig+0x108>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d157      	bne.n	8002234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e242      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x74>
 8002192:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a75      	ldr	r2, [pc, #468]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b70      	ldr	r3, [pc, #448]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6f      	ldr	r2, [pc, #444]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6c      	ldr	r2, [pc, #432]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021c4:	4b69      	ldr	r3, [pc, #420]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a68      	ldr	r2, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f8e4 	bl	80013b0 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff f8e0 	bl	80013b0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e207      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b5b      	ldr	r3, [pc, #364]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xc0>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff f8d0 	bl	80013b0 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff f8cc 	bl	80013b0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1f3      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0xe8>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002242:	4b4a      	ldr	r3, [pc, #296]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_RCC_OscConfig+0x240>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1c7      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4937      	ldr	r1, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x240>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_OscConfig+0x244>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff f885 	bl	80013b0 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7ff f881 	bl	80013b0 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1a8      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4925      	ldr	r1, [pc, #148]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_OscConfig+0x244>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff f864 	bl	80013b0 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ec:	f7ff f860 	bl	80013b0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e187      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d036      	beq.n	8002384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_RCC_OscConfig+0x248>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7ff f844 	bl	80013b0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232c:	f7ff f840 	bl	80013b0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e167      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x200>
 800234a:	e01b      	b.n	8002384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_OscConfig+0x248>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff f82d 	bl	80013b0 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	e00e      	b.n	8002378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235a:	f7ff f829 	bl	80013b0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d907      	bls.n	8002378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e150      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
 800236c:	40023800 	.word	0x40023800
 8002370:	42470000 	.word	0x42470000
 8002374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x470>)
 800237a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ea      	bne.n	800235a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8097 	beq.w	80024c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b81      	ldr	r3, [pc, #516]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b7d      	ldr	r3, [pc, #500]	; (800259c <HAL_RCC_OscConfig+0x470>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a7c      	ldr	r2, [pc, #496]	; (800259c <HAL_RCC_OscConfig+0x470>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b7a      	ldr	r3, [pc, #488]	; (800259c <HAL_RCC_OscConfig+0x470>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b77      	ldr	r3, [pc, #476]	; (80025a0 <HAL_RCC_OscConfig+0x474>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b74      	ldr	r3, [pc, #464]	; (80025a0 <HAL_RCC_OscConfig+0x474>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a73      	ldr	r2, [pc, #460]	; (80025a0 <HAL_RCC_OscConfig+0x474>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7fe ffe9 	bl	80013b0 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe ffe5 	bl	80013b0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e10c      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x474>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x2ea>
 8002408:	4b64      	ldr	r3, [pc, #400]	; (800259c <HAL_RCC_OscConfig+0x470>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	4a63      	ldr	r2, [pc, #396]	; (800259c <HAL_RCC_OscConfig+0x470>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6713      	str	r3, [r2, #112]	; 0x70
 8002414:	e01c      	b.n	8002450 <HAL_RCC_OscConfig+0x324>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x30c>
 800241e:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a5e      	ldr	r2, [pc, #376]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a5b      	ldr	r2, [pc, #364]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x324>
 8002438:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_RCC_OscConfig+0x470>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a57      	ldr	r2, [pc, #348]	; (800259c <HAL_RCC_OscConfig+0x470>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_RCC_OscConfig+0x470>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d015      	beq.n	8002484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002458:	f7fe ffaa 	bl	80013b0 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe ffa6 	bl	80013b0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0cb      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0ee      	beq.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7fe ff94 	bl	80013b0 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7fe ff90 	bl	80013b0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0b5      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCC_OscConfig+0x470>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ee      	bne.n	800248c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0x470>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	4a38      	ldr	r2, [pc, #224]	; (800259c <HAL_RCC_OscConfig+0x470>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80a1 	beq.w	800260c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ca:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_RCC_OscConfig+0x470>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d05c      	beq.n	8002590 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d141      	bne.n	8002562 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe ff64 	bl	80013b0 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe ff60 	bl	80013b0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e087      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	019b      	lsls	r3, r3, #6
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	3b01      	subs	r3, #1
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	491b      	ldr	r1, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe ff39 	bl	80013b0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe ff35 	bl	80013b0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e05c      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x416>
 8002560:	e054      	b.n	800260c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe ff22 	bl	80013b0 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002570:	f7fe ff1e 	bl	80013b0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e045      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_OscConfig+0x470>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
 800258e:	e03d      	b.n	800260c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e038      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000
 80025a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d028      	beq.n	8002608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d121      	bne.n	8002608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d11a      	bne.n	8002608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d111      	bne.n	8002608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	3b01      	subs	r3, #1
 80025f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0cc      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d90c      	bls.n	8002658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d044      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e067      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4934      	ldr	r1, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fe50 	bl	80013b0 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe fe4c 	bl	80013b0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20c      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490a      	ldr	r1, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fdb0 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08006670 	.word	0x08006670
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b090      	sub	sp, #64	; 0x40
 80027ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
 80027f4:	2300      	movs	r3, #0
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d00d      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x40>
 800280c:	2b08      	cmp	r3, #8
 800280e:	f200 80a1 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x16c>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002816:	2b04      	cmp	r3, #4
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x3a>
 800281a:	e09b      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCC_GetSysClockFreq+0x184>)
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002820:	e09b      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002822:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_GetSysClockFreq+0x188>)
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002826:	e098      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002828:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002832:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	2200      	movs	r2, #0
 8002846:	623b      	str	r3, [r7, #32]
 8002848:	627a      	str	r2, [r7, #36]	; 0x24
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002850:	2100      	movs	r1, #0
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_GetSysClockFreq+0x188>)
 8002854:	fb03 f201 	mul.w	r2, r3, r1
 8002858:	2300      	movs	r3, #0
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	4413      	add	r3, r2
 8002860:	4a43      	ldr	r2, [pc, #268]	; (8002970 <HAL_RCC_GetSysClockFreq+0x188>)
 8002862:	fba0 1202 	umull	r1, r2, r0, r2
 8002866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002868:	460a      	mov	r2, r1
 800286a:	62ba      	str	r2, [r7, #40]	; 0x28
 800286c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286e:	4413      	add	r3, r2
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002874:	2200      	movs	r2, #0
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	61fa      	str	r2, [r7, #28]
 800287a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800287e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002882:	f7fd fd05 	bl	8000290 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4613      	mov	r3, r2
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288e:	e053      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	2200      	movs	r2, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	617a      	str	r2, [r7, #20]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028a2:	f04f 0b00 	mov.w	fp, #0
 80028a6:	4652      	mov	r2, sl
 80028a8:	465b      	mov	r3, fp
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	0159      	lsls	r1, r3, #5
 80028b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b8:	0150      	lsls	r0, r2, #5
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	ebb2 080a 	subs.w	r8, r2, sl
 80028c2:	eb63 090b 	sbc.w	r9, r3, fp
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028da:	ebb2 0408 	subs.w	r4, r2, r8
 80028de:	eb63 0509 	sbc.w	r5, r3, r9
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	00eb      	lsls	r3, r5, #3
 80028ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f0:	00e2      	lsls	r2, r4, #3
 80028f2:	4614      	mov	r4, r2
 80028f4:	461d      	mov	r5, r3
 80028f6:	eb14 030a 	adds.w	r3, r4, sl
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	eb45 030b 	adc.w	r3, r5, fp
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800290e:	4629      	mov	r1, r5
 8002910:	028b      	lsls	r3, r1, #10
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002918:	4621      	mov	r1, r4
 800291a:	028a      	lsls	r2, r1, #10
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	2200      	movs	r2, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	60fa      	str	r2, [r7, #12]
 8002928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800292c:	f7fd fcb0 	bl	8000290 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002948:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x184>)
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800295c:	4618      	mov	r0, r3
 800295e:	3740      	adds	r7, #64	; 0x40
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	017d7840 	.word	0x017d7840

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff0 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08006680 	.word	0x08006680

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffdc 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	08006680 	.word	0x08006680

080029dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e041      	b.n	8002a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fa4e 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 fe3a 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e041      	b.n	8002b10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fe fa63 	bl	8000f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f000 fdeb 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start+0x24>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e022      	b.n	8002b82 <HAL_TIM_PWM_Start+0x6a>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d109      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x3e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e015      	b.n	8002b82 <HAL_TIM_PWM_Start+0x6a>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d109      	bne.n	8002b70 <HAL_TIM_PWM_Start+0x58>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e008      	b.n	8002b82 <HAL_TIM_PWM_Start+0x6a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e068      	b.n	8002c5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x82>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b98:	e013      	b.n	8002bc2 <HAL_TIM_PWM_Start+0xaa>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_PWM_Start+0x92>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba8:	e00b      	b.n	8002bc2 <HAL_TIM_PWM_Start+0xaa>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d104      	bne.n	8002bba <HAL_TIM_PWM_Start+0xa2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb8:	e003      	b.n	8002bc2 <HAL_TIM_PWM_Start+0xaa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 f926 	bl	8003e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_TIM_PWM_Start+0x14c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d107      	bne.n	8002bea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_TIM_PWM_Start+0x14c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x10e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfc:	d013      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x10e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_TIM_PWM_Start+0x150>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x10e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_TIM_PWM_Start+0x154>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x10e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <HAL_TIM_PWM_Start+0x158>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x10e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <HAL_TIM_PWM_Start+0x15c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d111      	bne.n	8002c4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d010      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	e007      	b.n	8002c5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40014000 	.word	0x40014000

08002c78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e041      	b.n	8002d0e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f839 	bl	8002d16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f000 fcec 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_IC_Start_IT+0x1e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0x46>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_IC_Start_IT+0x2e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e00b      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0x46>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start_IT+0x3e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e003      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0x46>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <HAL_TIM_IC_Start_IT+0x58>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e013      	b.n	8002dac <HAL_TIM_IC_Start_IT+0x80>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d104      	bne.n	8002d94 <HAL_TIM_IC_Start_IT+0x68>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e00b      	b.n	8002dac <HAL_TIM_IC_Start_IT+0x80>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d104      	bne.n	8002da4 <HAL_TIM_IC_Start_IT+0x78>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e003      	b.n	8002dac <HAL_TIM_IC_Start_IT+0x80>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dae:	7bbb      	ldrb	r3, [r7, #14]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d102      	bne.n	8002dba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002db4:	7b7b      	ldrb	r3, [r7, #13]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0c2      	b.n	8002f44 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_IC_Start_IT+0xa2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dcc:	e013      	b.n	8002df6 <HAL_TIM_IC_Start_IT+0xca>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d104      	bne.n	8002dde <HAL_TIM_IC_Start_IT+0xb2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	e00b      	b.n	8002df6 <HAL_TIM_IC_Start_IT+0xca>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d104      	bne.n	8002dee <HAL_TIM_IC_Start_IT+0xc2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	e003      	b.n	8002df6 <HAL_TIM_IC_Start_IT+0xca>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_IC_Start_IT+0xda>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e04:	e013      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0x102>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_IC_Start_IT+0xea>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e14:	e00b      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0x102>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_IC_Start_IT+0xfa>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e24:	e003      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0x102>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d841      	bhi.n	8002eb8 <HAL_TIM_IC_Start_IT+0x18c>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_TIM_IC_Start_IT+0x110>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002eb9 	.word	0x08002eb9
 8002e44:	08002eb9 	.word	0x08002eb9
 8002e48:	08002eb9 	.word	0x08002eb9
 8002e4c:	08002e83 	.word	0x08002e83
 8002e50:	08002eb9 	.word	0x08002eb9
 8002e54:	08002eb9 	.word	0x08002eb9
 8002e58:	08002eb9 	.word	0x08002eb9
 8002e5c:	08002e95 	.word	0x08002e95
 8002e60:	08002eb9 	.word	0x08002eb9
 8002e64:	08002eb9 	.word	0x08002eb9
 8002e68:	08002eb9 	.word	0x08002eb9
 8002e6c:	08002ea7 	.word	0x08002ea7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0202 	orr.w	r2, r2, #2
 8002e7e:	60da      	str	r2, [r3, #12]
      break;
 8002e80:	e01d      	b.n	8002ebe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0204 	orr.w	r2, r2, #4
 8002e90:	60da      	str	r2, [r3, #12]
      break;
 8002e92:	e014      	b.n	8002ebe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0208 	orr.w	r2, r2, #8
 8002ea2:	60da      	str	r2, [r3, #12]
      break;
 8002ea4:	e00b      	b.n	8002ebe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0210 	orr.w	r2, r2, #16
 8002eb4:	60da      	str	r2, [r3, #12]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d13e      	bne.n	8002f42 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 ffa5 	bl	8003e1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_TIM_IC_Start_IT+0x220>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d018      	beq.n	8002f0e <HAL_TIM_IC_Start_IT+0x1e2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d013      	beq.n	8002f0e <HAL_TIM_IC_Start_IT+0x1e2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_TIM_IC_Start_IT+0x224>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_TIM_IC_Start_IT+0x1e2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_TIM_IC_Start_IT+0x228>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_TIM_IC_Start_IT+0x1e2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_TIM_IC_Start_IT+0x22c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_TIM_IC_Start_IT+0x1e2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_TIM_IC_Start_IT+0x230>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d111      	bne.n	8002f32 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d010      	beq.n	8002f42 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	e007      	b.n	8002f42 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40000c00 	.word	0x40000c00
 8002f5c:	40014000 	.word	0x40014000

08002f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0202 	mvn.w	r2, #2
 8002f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd faf2 	bl	800058c <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fb54 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fb5b 	bl	800366c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0204 	mvn.w	r2, #4
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fac8 	bl	800058c <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fb2a 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fb31 	bl	800366c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b08      	cmp	r3, #8
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b08      	cmp	r3, #8
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0208 	mvn.w	r2, #8
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd fa9e 	bl	800058c <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fb00 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fb07 	bl	800366c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b10      	cmp	r3, #16
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b10      	cmp	r3, #16
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0210 	mvn.w	r2, #16
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2208      	movs	r2, #8
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fa74 	bl	800058c <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fad6 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fadd 	bl	800366c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0201 	mvn.w	r2, #1
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fab0 	bl	8003644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 ff24 	bl	8003f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 faa2 	bl	8003680 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b20      	cmp	r3, #32
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b20      	cmp	r3, #32
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0220 	mvn.w	r2, #32
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 feee 	bl	8003f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_TIM_IC_ConfigChannel+0x1e>
 800318a:	2302      	movs	r3, #2
 800318c:	e088      	b.n	80032a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f000 fc7e 	bl	8003aac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 020c 	bic.w	r2, r2, #12
 80031be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6999      	ldr	r1, [r3, #24]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	619a      	str	r2, [r3, #24]
 80031d2:	e060      	b.n	8003296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d11c      	bne.n	8003214 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f000 fcf6 	bl	8003bda <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6999      	ldr	r1, [r3, #24]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	619a      	str	r2, [r3, #24]
 8003212:	e040      	b.n	8003296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b08      	cmp	r3, #8
 8003218:	d11b      	bne.n	8003252 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f000 fd43 	bl	8003cb4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 020c 	bic.w	r2, r2, #12
 800323c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
 8003250:	e021      	b.n	8003296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b0c      	cmp	r3, #12
 8003256:	d11c      	bne.n	8003292 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f000 fd60 	bl	8003d2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800327a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69d9      	ldr	r1, [r3, #28]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	61da      	str	r2, [r3, #28]
 8003290:	e001      	b.n	8003296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0ae      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	f200 809f 	bhi.w	8003414 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032d6:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032dc:	08003311 	.word	0x08003311
 80032e0:	08003415 	.word	0x08003415
 80032e4:	08003415 	.word	0x08003415
 80032e8:	08003415 	.word	0x08003415
 80032ec:	08003351 	.word	0x08003351
 80032f0:	08003415 	.word	0x08003415
 80032f4:	08003415 	.word	0x08003415
 80032f8:	08003415 	.word	0x08003415
 80032fc:	08003393 	.word	0x08003393
 8003300:	08003415 	.word	0x08003415
 8003304:	08003415 	.word	0x08003415
 8003308:	08003415 	.word	0x08003415
 800330c:	080033d3 	.word	0x080033d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fa3c 	bl	8003794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0208 	orr.w	r2, r2, #8
 800332a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	619a      	str	r2, [r3, #24]
      break;
 800334e:	e064      	b.n	800341a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fa82 	bl	8003860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800336a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6999      	ldr	r1, [r3, #24]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	021a      	lsls	r2, r3, #8
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	619a      	str	r2, [r3, #24]
      break;
 8003390:	e043      	b.n	800341a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 facd 	bl	8003938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0208 	orr.w	r2, r2, #8
 80033ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0204 	bic.w	r2, r2, #4
 80033bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69d9      	ldr	r1, [r3, #28]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	61da      	str	r2, [r3, #28]
      break;
 80033d0:	e023      	b.n	800341a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fb17 	bl	8003a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69d9      	ldr	r1, [r3, #28]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	021a      	lsls	r2, r3, #8
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	61da      	str	r2, [r3, #28]
      break;
 8003412:	e002      	b.n	800341a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
      break;
 8003418:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_TIM_ConfigClockSource+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e0b4      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x186>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800346e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003480:	d03e      	beq.n	8003500 <HAL_TIM_ConfigClockSource+0xd4>
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003486:	f200 8087 	bhi.w	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	f000 8086 	beq.w	800359e <HAL_TIM_ConfigClockSource+0x172>
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	d87f      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b70      	cmp	r3, #112	; 0x70
 800349a:	d01a      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0xa6>
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d87b      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b60      	cmp	r3, #96	; 0x60
 80034a2:	d050      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x11a>
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d877      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b50      	cmp	r3, #80	; 0x50
 80034aa:	d03c      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0xfa>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d873      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d058      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x13a>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d86f      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b30      	cmp	r3, #48	; 0x30
 80034ba:	d064      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d86b      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d060      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d867      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d05c      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d05a      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x15a>
 80034d0:	e062      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6899      	ldr	r1, [r3, #8]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f000 fc7b 	bl	8003ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	609a      	str	r2, [r3, #8]
      break;
 80034fe:	e04f      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6899      	ldr	r1, [r3, #8]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f000 fc64 	bl	8003ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003522:	609a      	str	r2, [r3, #8]
      break;
 8003524:	e03c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	f000 fb22 	bl	8003b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2150      	movs	r1, #80	; 0x50
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fc31 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 8003544:	e02c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f000 fb7e 	bl	8003c54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2160      	movs	r1, #96	; 0x60
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fc21 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 8003564:	e01c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	461a      	mov	r2, r3
 8003574:	f000 fb02 	bl	8003b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2140      	movs	r1, #64	; 0x40
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fc11 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 8003584:	e00c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f000 fc08 	bl	8003da6 <TIM_ITRx_SetConfig>
      break;
 8003596:	e003      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e000      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800359e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d831      	bhi.n	8003634 <HAL_TIM_ReadCapturedValue+0x78>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	08003635 	.word	0x08003635
 80035e0:	08003635 	.word	0x08003635
 80035e4:	08003635 	.word	0x08003635
 80035e8:	08003617 	.word	0x08003617
 80035ec:	08003635 	.word	0x08003635
 80035f0:	08003635 	.word	0x08003635
 80035f4:	08003635 	.word	0x08003635
 80035f8:	08003621 	.word	0x08003621
 80035fc:	08003635 	.word	0x08003635
 8003600:	08003635 	.word	0x08003635
 8003604:	08003635 	.word	0x08003635
 8003608:	0800362b 	.word	0x0800362b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	60fb      	str	r3, [r7, #12]

      break;
 8003614:	e00f      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	60fb      	str	r3, [r7, #12]

      break;
 800361e:	e00a      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	60fb      	str	r3, [r7, #12]

      break;
 8003628:	e005      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	60fb      	str	r3, [r7, #12]

      break;
 8003632:	e000      	b.n	8003636 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003634:	bf00      	nop
  }

  return tmpreg;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a34      	ldr	r2, [pc, #208]	; (8003778 <TIM_Base_SetConfig+0xe4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00f      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b2:	d00b      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a31      	ldr	r2, [pc, #196]	; (800377c <TIM_Base_SetConfig+0xe8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a30      	ldr	r2, [pc, #192]	; (8003780 <TIM_Base_SetConfig+0xec>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <TIM_Base_SetConfig+0xf0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <TIM_Base_SetConfig+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a22      	ldr	r2, [pc, #136]	; (800377c <TIM_Base_SetConfig+0xe8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a21      	ldr	r2, [pc, #132]	; (8003780 <TIM_Base_SetConfig+0xec>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a20      	ldr	r2, [pc, #128]	; (8003784 <TIM_Base_SetConfig+0xf0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <TIM_Base_SetConfig+0xf4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1e      	ldr	r2, [pc, #120]	; (800378c <TIM_Base_SetConfig+0xf8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <TIM_Base_SetConfig+0xfc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <TIM_Base_SetConfig+0xe4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	615a      	str	r2, [r3, #20]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800

08003794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10c      	bne.n	800380a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0308 	bic.w	r3, r3, #8
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a13      	ldr	r2, [pc, #76]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d111      	bne.n	8003836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40010000 	.word	0x40010000

08003860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0210 	bic.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0320 	bic.w	r3, r3, #32
 80038aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <TIM_OC2_SetConfig+0xd4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10d      	bne.n	80038dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <TIM_OC2_SetConfig+0xd4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d113      	bne.n	800390c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000

08003938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <TIM_OC3_SetConfig+0xd0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10d      	bne.n	80039b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800399c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <TIM_OC3_SetConfig+0xd0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d113      	bne.n	80039e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40010000 	.word	0x40010000

08003a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	031b      	lsls	r3, r3, #12
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <TIM_OC4_SetConfig+0x9c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d109      	bne.n	8003a80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40010000 	.word	0x40010000

08003aac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a24      	ldr	r2, [pc, #144]	; (8003b68 <TIM_TI1_SetConfig+0xbc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_TI1_SetConfig+0x56>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d00f      	beq.n	8003b02 <TIM_TI1_SetConfig+0x56>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <TIM_TI1_SetConfig+0xc0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_TI1_SetConfig+0x56>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <TIM_TI1_SetConfig+0xc4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_TI1_SetConfig+0x56>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <TIM_TI1_SetConfig+0xc8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_TI1_SetConfig+0x56>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <TIM_TI1_SetConfig+0xcc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <TIM_TI1_SetConfig+0x5a>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <TIM_TI1_SetConfig+0x5c>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e003      	b.n	8003b26 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f023 030a 	bic.w	r3, r3, #10
 8003b40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 030a 	and.w	r3, r3, #10
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40014000 	.word	0x40014000

08003b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 030a 	bic.w	r3, r3, #10
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b087      	sub	sp, #28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 0210 	bic.w	r2, r3, #16
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 0210 	bic.w	r2, r3, #16
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	031b      	lsls	r3, r3, #12
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	621a      	str	r2, [r3, #32]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 0303 	bic.w	r3, r3, #3
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	031b      	lsls	r3, r3, #12
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	031b      	lsls	r3, r3, #12
 8003d84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f043 0307 	orr.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	021a      	lsls	r2, r3, #8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	609a      	str	r2, [r3, #8]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2201      	movs	r2, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	401a      	ands	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e050      	b.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d018      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d013      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10c      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40014000 	.word	0x40014000

08003f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e03f      	b.n	8003ffe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fd f86a 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 ff69 	bl	8004e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b08a      	sub	sp, #40	; 0x28
 800400a:	af02      	add	r7, sp, #8
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b20      	cmp	r3, #32
 8004024:	d17c      	bne.n	8004120 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_UART_Transmit+0x2c>
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e075      	b.n	8004122 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_UART_Transmit+0x3e>
 8004040:	2302      	movs	r3, #2
 8004042:	e06e      	b.n	8004122 <HAL_UART_Transmit+0x11c>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2221      	movs	r2, #33	; 0x21
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405a:	f7fd f9a9 	bl	80013b0 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d108      	bne.n	8004088 <HAL_UART_Transmit+0x82>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e003      	b.n	8004090 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004098:	e02a      	b.n	80040f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2200      	movs	r2, #0
 80040a2:	2180      	movs	r1, #128	; 0x80
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fc21 	bl	80048ec <UART_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e036      	b.n	8004122 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	3302      	adds	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e007      	b.n	80040e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1cf      	bne.n	800409a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	; 0x40
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fbf1 	bl	80048ec <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e006      	b.n	8004122 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	4613      	mov	r3, r2
 8004136:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	d11d      	bne.n	8004180 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_UART_Receive_DMA+0x26>
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e016      	b.n	8004182 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_UART_Receive_DMA+0x38>
 800415e:	2302      	movs	r3, #2
 8004160:	e00f      	b.n	8004182 <HAL_UART_Receive_DMA+0x58>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	461a      	mov	r2, r3
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fc26 	bl	80049c8 <UART_Start_Receive_DMA>
 800417c:	4603      	mov	r3, r0
 800417e:	e000      	b.n	8004182 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b0ba      	sub	sp, #232	; 0xe8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
 80041de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fd91 	bl	8004d12 <UART_Receive_IT>
      return;
 80041f0:	e256      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80de 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80d1 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
 800426a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 81ed 	beq.w	8004696 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fd1c 	bl	8004d12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_UART_IRQHandler+0x17a>
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04f      	beq.n	80043a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fc24 	bl	8004b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d141      	bne.n	800439e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800434a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800435e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1d9      	bne.n	800431a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	4a7d      	ldr	r2, [pc, #500]	; (8004568 <HAL_UART_IRQHandler+0x3dc>)
 8004374:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd faac 	bl	80018d8 <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e00e      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f99a 	bl	80046d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e00a      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f996 	bl	80046d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e006      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f992 	bl	80046d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043b2:	e170      	b.n	8004696 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	bf00      	nop
    return;
 80043b6:	e16e      	b.n	8004696 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 814a 	bne.w	8004656 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8143 	beq.w	8004656 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 813c 	beq.w	8004656 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	f040 80b4 	bne.w	800456c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8140 	beq.w	800469a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004422:	429a      	cmp	r2, r3
 8004424:	f080 8139 	bcs.w	800469a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	f000 8088 	beq.w	800454e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800445c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800446a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800446e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1d9      	bne.n	800443e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800449a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e1      	bne.n	800448a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e3      	bne.n	80044c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800451c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451e:	f023 0310 	bic.w	r3, r3, #16
 8004522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004530:	65ba      	str	r2, [r7, #88]	; 0x58
 8004532:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e3      	bne.n	800450c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd f955 	bl	80017f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004556:	b29b      	uxth	r3, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	b29b      	uxth	r3, r3
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8c0 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004564:	e099      	b.n	800469a <HAL_UART_IRQHandler+0x50e>
 8004566:	bf00      	nop
 8004568:	08004c1b 	.word	0x08004c1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 808b 	beq.w	800469e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8086 	beq.w	800469e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045b6:	647a      	str	r2, [r7, #68]	; 0x44
 80045b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e3      	bne.n	8004592 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3314      	adds	r3, #20
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	623b      	str	r3, [r7, #32]
   return(result);
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045ee:	633a      	str	r2, [r7, #48]	; 0x30
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e3      	bne.n	80045ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004634:	61fa      	str	r2, [r7, #28]
 8004636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	617b      	str	r3, [r7, #20]
   return(result);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e3      	bne.n	8004610 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f848 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004654:	e023      	b.n	800469e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_UART_IRQHandler+0x4ea>
 8004662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fae7 	bl	8004c42 <UART_Transmit_IT>
    return;
 8004674:	e014      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00e      	beq.n	80046a0 <HAL_UART_IRQHandler+0x514>
 8004682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fb27 	bl	8004ce2 <UART_EndTransmit_IT>
    return;
 8004694:	e004      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
      return;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
      return;
 800469e:	bf00      	nop
  }
}
 80046a0:	37e8      	adds	r7, #232	; 0xe8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop

080046a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b09c      	sub	sp, #112	; 0x70
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d172      	bne.n	80047fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471a:	2200      	movs	r2, #0
 800471c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800472e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004734:	66bb      	str	r3, [r7, #104]	; 0x68
 8004736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800473e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004740:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800474c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	667b      	str	r3, [r7, #100]	; 0x64
 800476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3314      	adds	r3, #20
 8004770:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004772:	647a      	str	r2, [r7, #68]	; 0x44
 8004774:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	623b      	str	r3, [r7, #32]
   return(result);
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	663b      	str	r3, [r7, #96]	; 0x60
 800479e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047a6:	633a      	str	r2, [r7, #48]	; 0x30
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d119      	bne.n	80047fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 0310 	bic.w	r3, r3, #16
 80047e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047ea:	61fa      	str	r2, [r7, #28]
 80047ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	617b      	str	r3, [r7, #20]
   return(result);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	2b01      	cmp	r3, #1
 8004804:	d106      	bne.n	8004814 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480a:	4619      	mov	r1, r3
 800480c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800480e:	f7ff ff69 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004812:	e002      	b.n	800481a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004814:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004816:	f7fc fa13 	bl	8000c40 <HAL_UART_RxCpltCallback>
}
 800481a:	bf00      	nop
 800481c:	3770      	adds	r7, #112	; 0x70
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	2b01      	cmp	r3, #1
 8004836:	d108      	bne.n	800484a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	b29b      	uxth	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff ff4e 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004848:	e002      	b.n	8004850 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff ff36 	bl	80046bc <HAL_UART_RxHalfCpltCallback>
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b21      	cmp	r3, #33	; 0x21
 800488a:	d108      	bne.n	800489e <UART_DMAError+0x46>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2200      	movs	r2, #0
 8004896:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004898:	68b8      	ldr	r0, [r7, #8]
 800489a:	f000 f933 	bl	8004b04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b22      	cmp	r3, #34	; 0x22
 80048be:	d108      	bne.n	80048d2 <UART_DMAError+0x7a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2200      	movs	r2, #0
 80048ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80048cc:	68b8      	ldr	r0, [r7, #8]
 80048ce:	f000 f941 	bl	8004b54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f043 0210 	orr.w	r2, r3, #16
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048de:	68b8      	ldr	r0, [r7, #8]
 80048e0:	f7ff fef6 	bl	80046d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b090      	sub	sp, #64	; 0x40
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fc:	e050      	b.n	80049a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d04c      	beq.n	80049a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x30>
 800490c:	f7fc fd50 	bl	80013b0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004918:	429a      	cmp	r2, r3
 800491a:	d241      	bcs.n	80049a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800493c:	637a      	str	r2, [r7, #52]	; 0x34
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3314      	adds	r3, #20
 800496e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004970:	623a      	str	r2, [r7, #32]
 8004972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69f9      	ldr	r1, [r7, #28]
 8004976:	6a3a      	ldr	r2, [r7, #32]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	61bb      	str	r3, [r7, #24]
   return(result);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e00f      	b.n	80049c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d09f      	beq.n	80048fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3740      	adds	r7, #64	; 0x40
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b098      	sub	sp, #96	; 0x60
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2222      	movs	r2, #34	; 0x22
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	4a40      	ldr	r2, [pc, #256]	; (8004af8 <UART_Start_Receive_DMA+0x130>)
 80049f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <UART_Start_Receive_DMA+0x134>)
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	4a3e      	ldr	r2, [pc, #248]	; (8004b00 <UART_Start_Receive_DMA+0x138>)
 8004a06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a10:	f107 0308 	add.w	r3, r7, #8
 8004a14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	f7fc fe8e 	bl	8001748 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d019      	beq.n	8004a86 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e5      	bne.n	8004a52 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004aa6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e5      	bne.n	8004a86 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ada:	627a      	str	r2, [r7, #36]	; 0x24
 8004adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6a39      	ldr	r1, [r7, #32]
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3760      	adds	r7, #96	; 0x60
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	080046fd 	.word	0x080046fd
 8004afc:	08004823 	.word	0x08004823
 8004b00:	08004859 	.word	0x08004859

08004b04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	61ba      	str	r2, [r7, #24]
 8004b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6979      	ldr	r1, [r7, #20]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e5      	bne.n	8004b0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004b48:	bf00      	nop
 8004b4a:	3724      	adds	r7, #36	; 0x24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b095      	sub	sp, #84	; 0x54
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b7c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d119      	bne.n	8004c00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f023 0310 	bic.w	r3, r3, #16
 8004be2:	647b      	str	r3, [r7, #68]	; 0x44
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bec:	61ba      	str	r2, [r7, #24]
 8004bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6979      	ldr	r1, [r7, #20]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e5      	bne.n	8004bcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c0e:	bf00      	nop
 8004c10:	3754      	adds	r7, #84	; 0x54
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff fd4b 	bl	80046d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b21      	cmp	r3, #33	; 0x21
 8004c54:	d13e      	bne.n	8004cd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5e:	d114      	bne.n	8004c8a <UART_Transmit_IT+0x48>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d110      	bne.n	8004c8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	1c9a      	adds	r2, r3, #2
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	621a      	str	r2, [r3, #32]
 8004c88:	e008      	b.n	8004c9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6211      	str	r1, [r2, #32]
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10f      	bne.n	8004cd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fcd0 	bl	80046a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b08c      	sub	sp, #48	; 0x30
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b22      	cmp	r3, #34	; 0x22
 8004d24:	f040 80ab 	bne.w	8004e7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d117      	bne.n	8004d62 <UART_Receive_IT+0x50>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d113      	bne.n	8004d62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	1c9a      	adds	r2, r3, #2
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d60:	e026      	b.n	8004db0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d007      	beq.n	8004d86 <UART_Receive_IT+0x74>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <UART_Receive_IT+0x82>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e008      	b.n	8004da6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d15a      	bne.n	8004e7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0220 	bic.w	r2, r2, #32
 8004dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d135      	bne.n	8004e70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f023 0310 	bic.w	r3, r3, #16
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	623a      	str	r2, [r7, #32]
 8004e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	69f9      	ldr	r1, [r7, #28]
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d10a      	bne.n	8004e62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fc3b 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
 8004e6e:	e002      	b.n	8004e76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fb fee5 	bl	8000c40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e002      	b.n	8004e80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3730      	adds	r7, #48	; 0x30
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e8c:	b0c0      	sub	sp, #256	; 0x100
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	ea40 0301 	orr.w	r3, r0, r1
 8004eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ee0:	f021 010c 	bic.w	r1, r1, #12
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f02:	6999      	ldr	r1, [r3, #24]
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	ea40 0301 	orr.w	r3, r0, r1
 8004f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b8f      	ldr	r3, [pc, #572]	; (8005154 <UART_SetConfig+0x2cc>)
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d005      	beq.n	8004f28 <UART_SetConfig+0xa0>
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b8d      	ldr	r3, [pc, #564]	; (8005158 <UART_SetConfig+0x2d0>)
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d104      	bne.n	8004f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fd fd44 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f30:	e003      	b.n	8004f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f32:	f7fd fd2b 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004f36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f44:	f040 810c 	bne.w	8005160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	1891      	adds	r1, r2, r2
 8004f60:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f62:	415b      	adcs	r3, r3
 8004f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	eb12 0801 	adds.w	r8, r2, r1
 8004f70:	4629      	mov	r1, r5
 8004f72:	eb43 0901 	adc.w	r9, r3, r1
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f8a:	4690      	mov	r8, r2
 8004f8c:	4699      	mov	r9, r3
 8004f8e:	4623      	mov	r3, r4
 8004f90:	eb18 0303 	adds.w	r3, r8, r3
 8004f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f98:	462b      	mov	r3, r5
 8004f9a:	eb49 0303 	adc.w	r3, r9, r3
 8004f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	18db      	adds	r3, r3, r3
 8004fba:	653b      	str	r3, [r7, #80]	; 0x50
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	eb42 0303 	adc.w	r3, r2, r3
 8004fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fcc:	f7fb f960 	bl	8000290 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b61      	ldr	r3, [pc, #388]	; (800515c <UART_SetConfig+0x2d4>)
 8004fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	011c      	lsls	r4, r3, #4
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005000:	4641      	mov	r1, r8
 8005002:	eb12 0a01 	adds.w	sl, r2, r1
 8005006:	4649      	mov	r1, r9
 8005008:	eb43 0b01 	adc.w	fp, r3, r1
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800501c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005020:	4692      	mov	sl, r2
 8005022:	469b      	mov	fp, r3
 8005024:	4643      	mov	r3, r8
 8005026:	eb1a 0303 	adds.w	r3, sl, r3
 800502a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800502e:	464b      	mov	r3, r9
 8005030:	eb4b 0303 	adc.w	r3, fp, r3
 8005034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005044:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800504c:	460b      	mov	r3, r1
 800504e:	18db      	adds	r3, r3, r3
 8005050:	643b      	str	r3, [r7, #64]	; 0x40
 8005052:	4613      	mov	r3, r2
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	647b      	str	r3, [r7, #68]	; 0x44
 800505a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800505e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005062:	f7fb f915 	bl	8000290 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4611      	mov	r1, r2
 800506c:	4b3b      	ldr	r3, [pc, #236]	; (800515c <UART_SetConfig+0x2d4>)
 800506e:	fba3 2301 	umull	r2, r3, r3, r1
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2264      	movs	r2, #100	; 0x64
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	1acb      	subs	r3, r1, r3
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005082:	4b36      	ldr	r3, [pc, #216]	; (800515c <UART_SetConfig+0x2d4>)
 8005084:	fba3 2302 	umull	r2, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005090:	441c      	add	r4, r3
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800509c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80050ac:	415b      	adcs	r3, r3
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6339      	str	r1, [r7, #48]	; 0x30
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050e8:	464b      	mov	r3, r9
 80050ea:	460a      	mov	r2, r1
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005100:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005108:	460b      	mov	r3, r1
 800510a:	18db      	adds	r3, r3, r3
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
 800510e:	4613      	mov	r3, r2
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800511a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800511e:	f7fb f8b7 	bl	8000290 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <UART_SetConfig+0x2d4>)
 8005128:	fba3 1302 	umull	r1, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2164      	movs	r1, #100	; 0x64
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	3332      	adds	r3, #50	; 0x32
 800513a:	4a08      	ldr	r2, [pc, #32]	; (800515c <UART_SetConfig+0x2d4>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	f003 0207 	and.w	r2, r3, #7
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4422      	add	r2, r4
 800514e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005150:	e106      	b.n	8005360 <UART_SetConfig+0x4d8>
 8005152:	bf00      	nop
 8005154:	40011000 	.word	0x40011000
 8005158:	40011400 	.word	0x40011400
 800515c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005164:	2200      	movs	r2, #0
 8005166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800516a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800516e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005172:	4642      	mov	r2, r8
 8005174:	464b      	mov	r3, r9
 8005176:	1891      	adds	r1, r2, r2
 8005178:	6239      	str	r1, [r7, #32]
 800517a:	415b      	adcs	r3, r3
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005182:	4641      	mov	r1, r8
 8005184:	1854      	adds	r4, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb43 0501 	adc.w	r5, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	00eb      	lsls	r3, r5, #3
 8005196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519a:	00e2      	lsls	r2, r4, #3
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	18e3      	adds	r3, r4, r3
 80051a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051a8:	464b      	mov	r3, r9
 80051aa:	eb45 0303 	adc.w	r3, r5, r3
 80051ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051ce:	4629      	mov	r1, r5
 80051d0:	008b      	lsls	r3, r1, #2
 80051d2:	4621      	mov	r1, r4
 80051d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d8:	4621      	mov	r1, r4
 80051da:	008a      	lsls	r2, r1, #2
 80051dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051e0:	f7fb f856 	bl	8000290 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4b60      	ldr	r3, [pc, #384]	; (800536c <UART_SetConfig+0x4e4>)
 80051ea:	fba3 2302 	umull	r2, r3, r3, r2
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	011c      	lsls	r4, r3, #4
 80051f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	1891      	adds	r1, r2, r2
 800520a:	61b9      	str	r1, [r7, #24]
 800520c:	415b      	adcs	r3, r3
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005214:	4641      	mov	r1, r8
 8005216:	1851      	adds	r1, r2, r1
 8005218:	6139      	str	r1, [r7, #16]
 800521a:	4649      	mov	r1, r9
 800521c:	414b      	adcs	r3, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800522c:	4659      	mov	r1, fp
 800522e:	00cb      	lsls	r3, r1, #3
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005236:	4651      	mov	r1, sl
 8005238:	00ca      	lsls	r2, r1, #3
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	4603      	mov	r3, r0
 8005240:	4642      	mov	r2, r8
 8005242:	189b      	adds	r3, r3, r2
 8005244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005248:	464b      	mov	r3, r9
 800524a:	460a      	mov	r2, r1
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	67bb      	str	r3, [r7, #120]	; 0x78
 800525e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800526c:	4649      	mov	r1, r9
 800526e:	008b      	lsls	r3, r1, #2
 8005270:	4641      	mov	r1, r8
 8005272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005276:	4641      	mov	r1, r8
 8005278:	008a      	lsls	r2, r1, #2
 800527a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800527e:	f7fb f807 	bl	8000290 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4611      	mov	r1, r2
 8005288:	4b38      	ldr	r3, [pc, #224]	; (800536c <UART_SetConfig+0x4e4>)
 800528a:	fba3 2301 	umull	r2, r3, r3, r1
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	2264      	movs	r2, #100	; 0x64
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	1acb      	subs	r3, r1, r3
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	3332      	adds	r3, #50	; 0x32
 800529c:	4a33      	ldr	r2, [pc, #204]	; (800536c <UART_SetConfig+0x4e4>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052a8:	441c      	add	r4, r3
 80052aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ae:	2200      	movs	r2, #0
 80052b0:	673b      	str	r3, [r7, #112]	; 0x70
 80052b2:	677a      	str	r2, [r7, #116]	; 0x74
 80052b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052fa:	464b      	mov	r3, r9
 80052fc:	460a      	mov	r2, r1
 80052fe:	eb42 0303 	adc.w	r3, r2, r3
 8005302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	663b      	str	r3, [r7, #96]	; 0x60
 800530e:	667a      	str	r2, [r7, #100]	; 0x64
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800531c:	4649      	mov	r1, r9
 800531e:	008b      	lsls	r3, r1, #2
 8005320:	4641      	mov	r1, r8
 8005322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005326:	4641      	mov	r1, r8
 8005328:	008a      	lsls	r2, r1, #2
 800532a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800532e:	f7fa ffaf 	bl	8000290 <__aeabi_uldivmod>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <UART_SetConfig+0x4e4>)
 8005338:	fba3 1302 	umull	r1, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	2164      	movs	r1, #100	; 0x64
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	3332      	adds	r3, #50	; 0x32
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <UART_SetConfig+0x4e4>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4422      	add	r2, r4
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005366:	46bd      	mov	sp, r7
 8005368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536c:	51eb851f 	.word	0x51eb851f

08005370 <siprintf>:
 8005370:	b40e      	push	{r1, r2, r3}
 8005372:	b500      	push	{lr}
 8005374:	b09c      	sub	sp, #112	; 0x70
 8005376:	ab1d      	add	r3, sp, #116	; 0x74
 8005378:	9002      	str	r0, [sp, #8]
 800537a:	9006      	str	r0, [sp, #24]
 800537c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005380:	4809      	ldr	r0, [pc, #36]	; (80053a8 <siprintf+0x38>)
 8005382:	9107      	str	r1, [sp, #28]
 8005384:	9104      	str	r1, [sp, #16]
 8005386:	4909      	ldr	r1, [pc, #36]	; (80053ac <siprintf+0x3c>)
 8005388:	f853 2b04 	ldr.w	r2, [r3], #4
 800538c:	9105      	str	r1, [sp, #20]
 800538e:	6800      	ldr	r0, [r0, #0]
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	a902      	add	r1, sp, #8
 8005394:	f000 f9c0 	bl	8005718 <_svfiprintf_r>
 8005398:	9b02      	ldr	r3, [sp, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	b01c      	add	sp, #112	; 0x70
 80053a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a4:	b003      	add	sp, #12
 80053a6:	4770      	bx	lr
 80053a8:	20000058 	.word	0x20000058
 80053ac:	ffff0208 	.word	0xffff0208

080053b0 <siscanf>:
 80053b0:	b40e      	push	{r1, r2, r3}
 80053b2:	b510      	push	{r4, lr}
 80053b4:	b09f      	sub	sp, #124	; 0x7c
 80053b6:	ac21      	add	r4, sp, #132	; 0x84
 80053b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80053bc:	f854 2b04 	ldr.w	r2, [r4], #4
 80053c0:	9201      	str	r2, [sp, #4]
 80053c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80053c6:	9004      	str	r0, [sp, #16]
 80053c8:	9008      	str	r0, [sp, #32]
 80053ca:	f7fa ff09 	bl	80001e0 <strlen>
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <siscanf+0x50>)
 80053d0:	9005      	str	r0, [sp, #20]
 80053d2:	9009      	str	r0, [sp, #36]	; 0x24
 80053d4:	930d      	str	r3, [sp, #52]	; 0x34
 80053d6:	480b      	ldr	r0, [pc, #44]	; (8005404 <siscanf+0x54>)
 80053d8:	9a01      	ldr	r2, [sp, #4]
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	9403      	str	r4, [sp, #12]
 80053de:	2300      	movs	r3, #0
 80053e0:	9311      	str	r3, [sp, #68]	; 0x44
 80053e2:	9316      	str	r3, [sp, #88]	; 0x58
 80053e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80053ec:	a904      	add	r1, sp, #16
 80053ee:	4623      	mov	r3, r4
 80053f0:	f000 faea 	bl	80059c8 <__ssvfiscanf_r>
 80053f4:	b01f      	add	sp, #124	; 0x7c
 80053f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053fa:	b003      	add	sp, #12
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	08005409 	.word	0x08005409
 8005404:	20000058 	.word	0x20000058

08005408 <__seofread>:
 8005408:	2000      	movs	r0, #0
 800540a:	4770      	bx	lr

0800540c <memset>:
 800540c:	4402      	add	r2, r0
 800540e:	4603      	mov	r3, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	d100      	bne.n	8005416 <memset+0xa>
 8005414:	4770      	bx	lr
 8005416:	f803 1b01 	strb.w	r1, [r3], #1
 800541a:	e7f9      	b.n	8005410 <memset+0x4>

0800541c <__errno>:
 800541c:	4b01      	ldr	r3, [pc, #4]	; (8005424 <__errno+0x8>)
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000058 	.word	0x20000058

08005428 <__libc_init_array>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4d0d      	ldr	r5, [pc, #52]	; (8005460 <__libc_init_array+0x38>)
 800542c:	4c0d      	ldr	r4, [pc, #52]	; (8005464 <__libc_init_array+0x3c>)
 800542e:	1b64      	subs	r4, r4, r5
 8005430:	10a4      	asrs	r4, r4, #2
 8005432:	2600      	movs	r6, #0
 8005434:	42a6      	cmp	r6, r4
 8005436:	d109      	bne.n	800544c <__libc_init_array+0x24>
 8005438:	4d0b      	ldr	r5, [pc, #44]	; (8005468 <__libc_init_array+0x40>)
 800543a:	4c0c      	ldr	r4, [pc, #48]	; (800546c <__libc_init_array+0x44>)
 800543c:	f001 f8f6 	bl	800662c <_init>
 8005440:	1b64      	subs	r4, r4, r5
 8005442:	10a4      	asrs	r4, r4, #2
 8005444:	2600      	movs	r6, #0
 8005446:	42a6      	cmp	r6, r4
 8005448:	d105      	bne.n	8005456 <__libc_init_array+0x2e>
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005450:	4798      	blx	r3
 8005452:	3601      	adds	r6, #1
 8005454:	e7ee      	b.n	8005434 <__libc_init_array+0xc>
 8005456:	f855 3b04 	ldr.w	r3, [r5], #4
 800545a:	4798      	blx	r3
 800545c:	3601      	adds	r6, #1
 800545e:	e7f2      	b.n	8005446 <__libc_init_array+0x1e>
 8005460:	080067e8 	.word	0x080067e8
 8005464:	080067e8 	.word	0x080067e8
 8005468:	080067e8 	.word	0x080067e8
 800546c:	080067ec 	.word	0x080067ec

08005470 <__retarget_lock_acquire_recursive>:
 8005470:	4770      	bx	lr

08005472 <__retarget_lock_release_recursive>:
 8005472:	4770      	bx	lr

08005474 <_free_r>:
 8005474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005476:	2900      	cmp	r1, #0
 8005478:	d044      	beq.n	8005504 <_free_r+0x90>
 800547a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547e:	9001      	str	r0, [sp, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f1a1 0404 	sub.w	r4, r1, #4
 8005486:	bfb8      	it	lt
 8005488:	18e4      	addlt	r4, r4, r3
 800548a:	f000 f8df 	bl	800564c <__malloc_lock>
 800548e:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <_free_r+0x94>)
 8005490:	9801      	ldr	r0, [sp, #4]
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	b933      	cbnz	r3, 80054a4 <_free_r+0x30>
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	6014      	str	r4, [r2, #0]
 800549a:	b003      	add	sp, #12
 800549c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a0:	f000 b8da 	b.w	8005658 <__malloc_unlock>
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d908      	bls.n	80054ba <_free_r+0x46>
 80054a8:	6825      	ldr	r5, [r4, #0]
 80054aa:	1961      	adds	r1, r4, r5
 80054ac:	428b      	cmp	r3, r1
 80054ae:	bf01      	itttt	eq
 80054b0:	6819      	ldreq	r1, [r3, #0]
 80054b2:	685b      	ldreq	r3, [r3, #4]
 80054b4:	1949      	addeq	r1, r1, r5
 80054b6:	6021      	streq	r1, [r4, #0]
 80054b8:	e7ed      	b.n	8005496 <_free_r+0x22>
 80054ba:	461a      	mov	r2, r3
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b10b      	cbz	r3, 80054c4 <_free_r+0x50>
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d9fa      	bls.n	80054ba <_free_r+0x46>
 80054c4:	6811      	ldr	r1, [r2, #0]
 80054c6:	1855      	adds	r5, r2, r1
 80054c8:	42a5      	cmp	r5, r4
 80054ca:	d10b      	bne.n	80054e4 <_free_r+0x70>
 80054cc:	6824      	ldr	r4, [r4, #0]
 80054ce:	4421      	add	r1, r4
 80054d0:	1854      	adds	r4, r2, r1
 80054d2:	42a3      	cmp	r3, r4
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	d1e0      	bne.n	800549a <_free_r+0x26>
 80054d8:	681c      	ldr	r4, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	6053      	str	r3, [r2, #4]
 80054de:	440c      	add	r4, r1
 80054e0:	6014      	str	r4, [r2, #0]
 80054e2:	e7da      	b.n	800549a <_free_r+0x26>
 80054e4:	d902      	bls.n	80054ec <_free_r+0x78>
 80054e6:	230c      	movs	r3, #12
 80054e8:	6003      	str	r3, [r0, #0]
 80054ea:	e7d6      	b.n	800549a <_free_r+0x26>
 80054ec:	6825      	ldr	r5, [r4, #0]
 80054ee:	1961      	adds	r1, r4, r5
 80054f0:	428b      	cmp	r3, r1
 80054f2:	bf04      	itt	eq
 80054f4:	6819      	ldreq	r1, [r3, #0]
 80054f6:	685b      	ldreq	r3, [r3, #4]
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	bf04      	itt	eq
 80054fc:	1949      	addeq	r1, r1, r5
 80054fe:	6021      	streq	r1, [r4, #0]
 8005500:	6054      	str	r4, [r2, #4]
 8005502:	e7ca      	b.n	800549a <_free_r+0x26>
 8005504:	b003      	add	sp, #12
 8005506:	bd30      	pop	{r4, r5, pc}
 8005508:	20000370 	.word	0x20000370

0800550c <sbrk_aligned>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4e0e      	ldr	r6, [pc, #56]	; (8005548 <sbrk_aligned+0x3c>)
 8005510:	460c      	mov	r4, r1
 8005512:	6831      	ldr	r1, [r6, #0]
 8005514:	4605      	mov	r5, r0
 8005516:	b911      	cbnz	r1, 800551e <sbrk_aligned+0x12>
 8005518:	f000 ff3a 	bl	8006390 <_sbrk_r>
 800551c:	6030      	str	r0, [r6, #0]
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 ff35 	bl	8006390 <_sbrk_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d00a      	beq.n	8005540 <sbrk_aligned+0x34>
 800552a:	1cc4      	adds	r4, r0, #3
 800552c:	f024 0403 	bic.w	r4, r4, #3
 8005530:	42a0      	cmp	r0, r4
 8005532:	d007      	beq.n	8005544 <sbrk_aligned+0x38>
 8005534:	1a21      	subs	r1, r4, r0
 8005536:	4628      	mov	r0, r5
 8005538:	f000 ff2a 	bl	8006390 <_sbrk_r>
 800553c:	3001      	adds	r0, #1
 800553e:	d101      	bne.n	8005544 <sbrk_aligned+0x38>
 8005540:	f04f 34ff 	mov.w	r4, #4294967295
 8005544:	4620      	mov	r0, r4
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	20000374 	.word	0x20000374

0800554c <_malloc_r>:
 800554c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005550:	1ccd      	adds	r5, r1, #3
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	2d00      	cmp	r5, #0
 8005560:	4607      	mov	r7, r0
 8005562:	db01      	blt.n	8005568 <_malloc_r+0x1c>
 8005564:	42a9      	cmp	r1, r5
 8005566:	d905      	bls.n	8005574 <_malloc_r+0x28>
 8005568:	230c      	movs	r3, #12
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	2600      	movs	r6, #0
 800556e:	4630      	mov	r0, r6
 8005570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005574:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005648 <_malloc_r+0xfc>
 8005578:	f000 f868 	bl	800564c <__malloc_lock>
 800557c:	f8d8 3000 	ldr.w	r3, [r8]
 8005580:	461c      	mov	r4, r3
 8005582:	bb5c      	cbnz	r4, 80055dc <_malloc_r+0x90>
 8005584:	4629      	mov	r1, r5
 8005586:	4638      	mov	r0, r7
 8005588:	f7ff ffc0 	bl	800550c <sbrk_aligned>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	4604      	mov	r4, r0
 8005590:	d155      	bne.n	800563e <_malloc_r+0xf2>
 8005592:	f8d8 4000 	ldr.w	r4, [r8]
 8005596:	4626      	mov	r6, r4
 8005598:	2e00      	cmp	r6, #0
 800559a:	d145      	bne.n	8005628 <_malloc_r+0xdc>
 800559c:	2c00      	cmp	r4, #0
 800559e:	d048      	beq.n	8005632 <_malloc_r+0xe6>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	4631      	mov	r1, r6
 80055a4:	4638      	mov	r0, r7
 80055a6:	eb04 0903 	add.w	r9, r4, r3
 80055aa:	f000 fef1 	bl	8006390 <_sbrk_r>
 80055ae:	4581      	cmp	r9, r0
 80055b0:	d13f      	bne.n	8005632 <_malloc_r+0xe6>
 80055b2:	6821      	ldr	r1, [r4, #0]
 80055b4:	1a6d      	subs	r5, r5, r1
 80055b6:	4629      	mov	r1, r5
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff ffa7 	bl	800550c <sbrk_aligned>
 80055be:	3001      	adds	r0, #1
 80055c0:	d037      	beq.n	8005632 <_malloc_r+0xe6>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	442b      	add	r3, r5
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	f8d8 3000 	ldr.w	r3, [r8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d038      	beq.n	8005642 <_malloc_r+0xf6>
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	42a2      	cmp	r2, r4
 80055d4:	d12b      	bne.n	800562e <_malloc_r+0xe2>
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	e00f      	b.n	80055fc <_malloc_r+0xb0>
 80055dc:	6822      	ldr	r2, [r4, #0]
 80055de:	1b52      	subs	r2, r2, r5
 80055e0:	d41f      	bmi.n	8005622 <_malloc_r+0xd6>
 80055e2:	2a0b      	cmp	r2, #11
 80055e4:	d917      	bls.n	8005616 <_malloc_r+0xca>
 80055e6:	1961      	adds	r1, r4, r5
 80055e8:	42a3      	cmp	r3, r4
 80055ea:	6025      	str	r5, [r4, #0]
 80055ec:	bf18      	it	ne
 80055ee:	6059      	strne	r1, [r3, #4]
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	bf08      	it	eq
 80055f4:	f8c8 1000 	streq.w	r1, [r8]
 80055f8:	5162      	str	r2, [r4, r5]
 80055fa:	604b      	str	r3, [r1, #4]
 80055fc:	4638      	mov	r0, r7
 80055fe:	f104 060b 	add.w	r6, r4, #11
 8005602:	f000 f829 	bl	8005658 <__malloc_unlock>
 8005606:	f026 0607 	bic.w	r6, r6, #7
 800560a:	1d23      	adds	r3, r4, #4
 800560c:	1af2      	subs	r2, r6, r3
 800560e:	d0ae      	beq.n	800556e <_malloc_r+0x22>
 8005610:	1b9b      	subs	r3, r3, r6
 8005612:	50a3      	str	r3, [r4, r2]
 8005614:	e7ab      	b.n	800556e <_malloc_r+0x22>
 8005616:	42a3      	cmp	r3, r4
 8005618:	6862      	ldr	r2, [r4, #4]
 800561a:	d1dd      	bne.n	80055d8 <_malloc_r+0x8c>
 800561c:	f8c8 2000 	str.w	r2, [r8]
 8005620:	e7ec      	b.n	80055fc <_malloc_r+0xb0>
 8005622:	4623      	mov	r3, r4
 8005624:	6864      	ldr	r4, [r4, #4]
 8005626:	e7ac      	b.n	8005582 <_malloc_r+0x36>
 8005628:	4634      	mov	r4, r6
 800562a:	6876      	ldr	r6, [r6, #4]
 800562c:	e7b4      	b.n	8005598 <_malloc_r+0x4c>
 800562e:	4613      	mov	r3, r2
 8005630:	e7cc      	b.n	80055cc <_malloc_r+0x80>
 8005632:	230c      	movs	r3, #12
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4638      	mov	r0, r7
 8005638:	f000 f80e 	bl	8005658 <__malloc_unlock>
 800563c:	e797      	b.n	800556e <_malloc_r+0x22>
 800563e:	6025      	str	r5, [r4, #0]
 8005640:	e7dc      	b.n	80055fc <_malloc_r+0xb0>
 8005642:	605b      	str	r3, [r3, #4]
 8005644:	deff      	udf	#255	; 0xff
 8005646:	bf00      	nop
 8005648:	20000370 	.word	0x20000370

0800564c <__malloc_lock>:
 800564c:	4801      	ldr	r0, [pc, #4]	; (8005654 <__malloc_lock+0x8>)
 800564e:	f7ff bf0f 	b.w	8005470 <__retarget_lock_acquire_recursive>
 8005652:	bf00      	nop
 8005654:	2000036c 	.word	0x2000036c

08005658 <__malloc_unlock>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__malloc_unlock+0x8>)
 800565a:	f7ff bf0a 	b.w	8005472 <__retarget_lock_release_recursive>
 800565e:	bf00      	nop
 8005660:	2000036c 	.word	0x2000036c

08005664 <__ssputs_r>:
 8005664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	688e      	ldr	r6, [r1, #8]
 800566a:	461f      	mov	r7, r3
 800566c:	42be      	cmp	r6, r7
 800566e:	680b      	ldr	r3, [r1, #0]
 8005670:	4682      	mov	sl, r0
 8005672:	460c      	mov	r4, r1
 8005674:	4690      	mov	r8, r2
 8005676:	d82c      	bhi.n	80056d2 <__ssputs_r+0x6e>
 8005678:	898a      	ldrh	r2, [r1, #12]
 800567a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800567e:	d026      	beq.n	80056ce <__ssputs_r+0x6a>
 8005680:	6965      	ldr	r5, [r4, #20]
 8005682:	6909      	ldr	r1, [r1, #16]
 8005684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005688:	eba3 0901 	sub.w	r9, r3, r1
 800568c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005690:	1c7b      	adds	r3, r7, #1
 8005692:	444b      	add	r3, r9
 8005694:	106d      	asrs	r5, r5, #1
 8005696:	429d      	cmp	r5, r3
 8005698:	bf38      	it	cc
 800569a:	461d      	movcc	r5, r3
 800569c:	0553      	lsls	r3, r2, #21
 800569e:	d527      	bpl.n	80056f0 <__ssputs_r+0x8c>
 80056a0:	4629      	mov	r1, r5
 80056a2:	f7ff ff53 	bl	800554c <_malloc_r>
 80056a6:	4606      	mov	r6, r0
 80056a8:	b360      	cbz	r0, 8005704 <__ssputs_r+0xa0>
 80056aa:	6921      	ldr	r1, [r4, #16]
 80056ac:	464a      	mov	r2, r9
 80056ae:	f000 fe7f 	bl	80063b0 <memcpy>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	6126      	str	r6, [r4, #16]
 80056c0:	6165      	str	r5, [r4, #20]
 80056c2:	444e      	add	r6, r9
 80056c4:	eba5 0509 	sub.w	r5, r5, r9
 80056c8:	6026      	str	r6, [r4, #0]
 80056ca:	60a5      	str	r5, [r4, #8]
 80056cc:	463e      	mov	r6, r7
 80056ce:	42be      	cmp	r6, r7
 80056d0:	d900      	bls.n	80056d4 <__ssputs_r+0x70>
 80056d2:	463e      	mov	r6, r7
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	4632      	mov	r2, r6
 80056d8:	4641      	mov	r1, r8
 80056da:	f000 fe3e 	bl	800635a <memmove>
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	1b9b      	subs	r3, r3, r6
 80056e2:	60a3      	str	r3, [r4, #8]
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	4433      	add	r3, r6
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	2000      	movs	r0, #0
 80056ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f0:	462a      	mov	r2, r5
 80056f2:	f000 fe6b 	bl	80063cc <_realloc_r>
 80056f6:	4606      	mov	r6, r0
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d1e0      	bne.n	80056be <__ssputs_r+0x5a>
 80056fc:	6921      	ldr	r1, [r4, #16]
 80056fe:	4650      	mov	r0, sl
 8005700:	f7ff feb8 	bl	8005474 <_free_r>
 8005704:	230c      	movs	r3, #12
 8005706:	f8ca 3000 	str.w	r3, [sl]
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005710:	81a3      	strh	r3, [r4, #12]
 8005712:	f04f 30ff 	mov.w	r0, #4294967295
 8005716:	e7e9      	b.n	80056ec <__ssputs_r+0x88>

08005718 <_svfiprintf_r>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	4698      	mov	r8, r3
 800571e:	898b      	ldrh	r3, [r1, #12]
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	b09d      	sub	sp, #116	; 0x74
 8005724:	4607      	mov	r7, r0
 8005726:	460d      	mov	r5, r1
 8005728:	4614      	mov	r4, r2
 800572a:	d50e      	bpl.n	800574a <_svfiprintf_r+0x32>
 800572c:	690b      	ldr	r3, [r1, #16]
 800572e:	b963      	cbnz	r3, 800574a <_svfiprintf_r+0x32>
 8005730:	2140      	movs	r1, #64	; 0x40
 8005732:	f7ff ff0b 	bl	800554c <_malloc_r>
 8005736:	6028      	str	r0, [r5, #0]
 8005738:	6128      	str	r0, [r5, #16]
 800573a:	b920      	cbnz	r0, 8005746 <_svfiprintf_r+0x2e>
 800573c:	230c      	movs	r3, #12
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	e0d0      	b.n	80058e8 <_svfiprintf_r+0x1d0>
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	616b      	str	r3, [r5, #20]
 800574a:	2300      	movs	r3, #0
 800574c:	9309      	str	r3, [sp, #36]	; 0x24
 800574e:	2320      	movs	r3, #32
 8005750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005754:	f8cd 800c 	str.w	r8, [sp, #12]
 8005758:	2330      	movs	r3, #48	; 0x30
 800575a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005900 <_svfiprintf_r+0x1e8>
 800575e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005762:	f04f 0901 	mov.w	r9, #1
 8005766:	4623      	mov	r3, r4
 8005768:	469a      	mov	sl, r3
 800576a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576e:	b10a      	cbz	r2, 8005774 <_svfiprintf_r+0x5c>
 8005770:	2a25      	cmp	r2, #37	; 0x25
 8005772:	d1f9      	bne.n	8005768 <_svfiprintf_r+0x50>
 8005774:	ebba 0b04 	subs.w	fp, sl, r4
 8005778:	d00b      	beq.n	8005792 <_svfiprintf_r+0x7a>
 800577a:	465b      	mov	r3, fp
 800577c:	4622      	mov	r2, r4
 800577e:	4629      	mov	r1, r5
 8005780:	4638      	mov	r0, r7
 8005782:	f7ff ff6f 	bl	8005664 <__ssputs_r>
 8005786:	3001      	adds	r0, #1
 8005788:	f000 80a9 	beq.w	80058de <_svfiprintf_r+0x1c6>
 800578c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800578e:	445a      	add	r2, fp
 8005790:	9209      	str	r2, [sp, #36]	; 0x24
 8005792:	f89a 3000 	ldrb.w	r3, [sl]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80a1 	beq.w	80058de <_svfiprintf_r+0x1c6>
 800579c:	2300      	movs	r3, #0
 800579e:	f04f 32ff 	mov.w	r2, #4294967295
 80057a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a6:	f10a 0a01 	add.w	sl, sl, #1
 80057aa:	9304      	str	r3, [sp, #16]
 80057ac:	9307      	str	r3, [sp, #28]
 80057ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057b2:	931a      	str	r3, [sp, #104]	; 0x68
 80057b4:	4654      	mov	r4, sl
 80057b6:	2205      	movs	r2, #5
 80057b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057bc:	4850      	ldr	r0, [pc, #320]	; (8005900 <_svfiprintf_r+0x1e8>)
 80057be:	f7fa fd17 	bl	80001f0 <memchr>
 80057c2:	9a04      	ldr	r2, [sp, #16]
 80057c4:	b9d8      	cbnz	r0, 80057fe <_svfiprintf_r+0xe6>
 80057c6:	06d0      	lsls	r0, r2, #27
 80057c8:	bf44      	itt	mi
 80057ca:	2320      	movmi	r3, #32
 80057cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d0:	0711      	lsls	r1, r2, #28
 80057d2:	bf44      	itt	mi
 80057d4:	232b      	movmi	r3, #43	; 0x2b
 80057d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057da:	f89a 3000 	ldrb.w	r3, [sl]
 80057de:	2b2a      	cmp	r3, #42	; 0x2a
 80057e0:	d015      	beq.n	800580e <_svfiprintf_r+0xf6>
 80057e2:	9a07      	ldr	r2, [sp, #28]
 80057e4:	4654      	mov	r4, sl
 80057e6:	2000      	movs	r0, #0
 80057e8:	f04f 0c0a 	mov.w	ip, #10
 80057ec:	4621      	mov	r1, r4
 80057ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f2:	3b30      	subs	r3, #48	; 0x30
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	d94d      	bls.n	8005894 <_svfiprintf_r+0x17c>
 80057f8:	b1b0      	cbz	r0, 8005828 <_svfiprintf_r+0x110>
 80057fa:	9207      	str	r2, [sp, #28]
 80057fc:	e014      	b.n	8005828 <_svfiprintf_r+0x110>
 80057fe:	eba0 0308 	sub.w	r3, r0, r8
 8005802:	fa09 f303 	lsl.w	r3, r9, r3
 8005806:	4313      	orrs	r3, r2
 8005808:	9304      	str	r3, [sp, #16]
 800580a:	46a2      	mov	sl, r4
 800580c:	e7d2      	b.n	80057b4 <_svfiprintf_r+0x9c>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	1d19      	adds	r1, r3, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	9103      	str	r1, [sp, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfbb      	ittet	lt
 800581a:	425b      	neglt	r3, r3
 800581c:	f042 0202 	orrlt.w	r2, r2, #2
 8005820:	9307      	strge	r3, [sp, #28]
 8005822:	9307      	strlt	r3, [sp, #28]
 8005824:	bfb8      	it	lt
 8005826:	9204      	strlt	r2, [sp, #16]
 8005828:	7823      	ldrb	r3, [r4, #0]
 800582a:	2b2e      	cmp	r3, #46	; 0x2e
 800582c:	d10c      	bne.n	8005848 <_svfiprintf_r+0x130>
 800582e:	7863      	ldrb	r3, [r4, #1]
 8005830:	2b2a      	cmp	r3, #42	; 0x2a
 8005832:	d134      	bne.n	800589e <_svfiprintf_r+0x186>
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	9203      	str	r2, [sp, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	bfb8      	it	lt
 8005840:	f04f 33ff 	movlt.w	r3, #4294967295
 8005844:	3402      	adds	r4, #2
 8005846:	9305      	str	r3, [sp, #20]
 8005848:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005910 <_svfiprintf_r+0x1f8>
 800584c:	7821      	ldrb	r1, [r4, #0]
 800584e:	2203      	movs	r2, #3
 8005850:	4650      	mov	r0, sl
 8005852:	f7fa fccd 	bl	80001f0 <memchr>
 8005856:	b138      	cbz	r0, 8005868 <_svfiprintf_r+0x150>
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	eba0 000a 	sub.w	r0, r0, sl
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	4082      	lsls	r2, r0
 8005862:	4313      	orrs	r3, r2
 8005864:	3401      	adds	r4, #1
 8005866:	9304      	str	r3, [sp, #16]
 8005868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586c:	4825      	ldr	r0, [pc, #148]	; (8005904 <_svfiprintf_r+0x1ec>)
 800586e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005872:	2206      	movs	r2, #6
 8005874:	f7fa fcbc 	bl	80001f0 <memchr>
 8005878:	2800      	cmp	r0, #0
 800587a:	d038      	beq.n	80058ee <_svfiprintf_r+0x1d6>
 800587c:	4b22      	ldr	r3, [pc, #136]	; (8005908 <_svfiprintf_r+0x1f0>)
 800587e:	bb1b      	cbnz	r3, 80058c8 <_svfiprintf_r+0x1b0>
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	3307      	adds	r3, #7
 8005884:	f023 0307 	bic.w	r3, r3, #7
 8005888:	3308      	adds	r3, #8
 800588a:	9303      	str	r3, [sp, #12]
 800588c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588e:	4433      	add	r3, r6
 8005890:	9309      	str	r3, [sp, #36]	; 0x24
 8005892:	e768      	b.n	8005766 <_svfiprintf_r+0x4e>
 8005894:	fb0c 3202 	mla	r2, ip, r2, r3
 8005898:	460c      	mov	r4, r1
 800589a:	2001      	movs	r0, #1
 800589c:	e7a6      	b.n	80057ec <_svfiprintf_r+0xd4>
 800589e:	2300      	movs	r3, #0
 80058a0:	3401      	adds	r4, #1
 80058a2:	9305      	str	r3, [sp, #20]
 80058a4:	4619      	mov	r1, r3
 80058a6:	f04f 0c0a 	mov.w	ip, #10
 80058aa:	4620      	mov	r0, r4
 80058ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058b0:	3a30      	subs	r2, #48	; 0x30
 80058b2:	2a09      	cmp	r2, #9
 80058b4:	d903      	bls.n	80058be <_svfiprintf_r+0x1a6>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0c6      	beq.n	8005848 <_svfiprintf_r+0x130>
 80058ba:	9105      	str	r1, [sp, #20]
 80058bc:	e7c4      	b.n	8005848 <_svfiprintf_r+0x130>
 80058be:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c2:	4604      	mov	r4, r0
 80058c4:	2301      	movs	r3, #1
 80058c6:	e7f0      	b.n	80058aa <_svfiprintf_r+0x192>
 80058c8:	ab03      	add	r3, sp, #12
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	462a      	mov	r2, r5
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <_svfiprintf_r+0x1f4>)
 80058d0:	a904      	add	r1, sp, #16
 80058d2:	4638      	mov	r0, r7
 80058d4:	f3af 8000 	nop.w
 80058d8:	1c42      	adds	r2, r0, #1
 80058da:	4606      	mov	r6, r0
 80058dc:	d1d6      	bne.n	800588c <_svfiprintf_r+0x174>
 80058de:	89ab      	ldrh	r3, [r5, #12]
 80058e0:	065b      	lsls	r3, r3, #25
 80058e2:	f53f af2d 	bmi.w	8005740 <_svfiprintf_r+0x28>
 80058e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058e8:	b01d      	add	sp, #116	; 0x74
 80058ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ee:	ab03      	add	r3, sp, #12
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	462a      	mov	r2, r5
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <_svfiprintf_r+0x1f4>)
 80058f6:	a904      	add	r1, sp, #16
 80058f8:	4638      	mov	r0, r7
 80058fa:	f000 fa4b 	bl	8005d94 <_printf_i>
 80058fe:	e7eb      	b.n	80058d8 <_svfiprintf_r+0x1c0>
 8005900:	08006690 	.word	0x08006690
 8005904:	0800669a 	.word	0x0800669a
 8005908:	00000000 	.word	0x00000000
 800590c:	08005665 	.word	0x08005665
 8005910:	08006696 	.word	0x08006696

08005914 <_sungetc_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	1c4b      	adds	r3, r1, #1
 8005918:	4614      	mov	r4, r2
 800591a:	d103      	bne.n	8005924 <_sungetc_r+0x10>
 800591c:	f04f 35ff 	mov.w	r5, #4294967295
 8005920:	4628      	mov	r0, r5
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	8993      	ldrh	r3, [r2, #12]
 8005926:	f023 0320 	bic.w	r3, r3, #32
 800592a:	8193      	strh	r3, [r2, #12]
 800592c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800592e:	6852      	ldr	r2, [r2, #4]
 8005930:	b2cd      	uxtb	r5, r1
 8005932:	b18b      	cbz	r3, 8005958 <_sungetc_r+0x44>
 8005934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005936:	4293      	cmp	r3, r2
 8005938:	dd08      	ble.n	800594c <_sungetc_r+0x38>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	6022      	str	r2, [r4, #0]
 8005940:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	3301      	adds	r3, #1
 8005948:	6063      	str	r3, [r4, #4]
 800594a:	e7e9      	b.n	8005920 <_sungetc_r+0xc>
 800594c:	4621      	mov	r1, r4
 800594e:	f000 fcca 	bl	80062e6 <__submore>
 8005952:	2800      	cmp	r0, #0
 8005954:	d0f1      	beq.n	800593a <_sungetc_r+0x26>
 8005956:	e7e1      	b.n	800591c <_sungetc_r+0x8>
 8005958:	6921      	ldr	r1, [r4, #16]
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	b151      	cbz	r1, 8005974 <_sungetc_r+0x60>
 800595e:	4299      	cmp	r1, r3
 8005960:	d208      	bcs.n	8005974 <_sungetc_r+0x60>
 8005962:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005966:	42a9      	cmp	r1, r5
 8005968:	d104      	bne.n	8005974 <_sungetc_r+0x60>
 800596a:	3b01      	subs	r3, #1
 800596c:	3201      	adds	r2, #1
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	6062      	str	r2, [r4, #4]
 8005972:	e7d5      	b.n	8005920 <_sungetc_r+0xc>
 8005974:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800597c:	6363      	str	r3, [r4, #52]	; 0x34
 800597e:	2303      	movs	r3, #3
 8005980:	63a3      	str	r3, [r4, #56]	; 0x38
 8005982:	4623      	mov	r3, r4
 8005984:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	2301      	movs	r3, #1
 800598c:	e7dc      	b.n	8005948 <_sungetc_r+0x34>

0800598e <__ssrefill_r>:
 800598e:	b510      	push	{r4, lr}
 8005990:	460c      	mov	r4, r1
 8005992:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005994:	b169      	cbz	r1, 80059b2 <__ssrefill_r+0x24>
 8005996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800599a:	4299      	cmp	r1, r3
 800599c:	d001      	beq.n	80059a2 <__ssrefill_r+0x14>
 800599e:	f7ff fd69 	bl	8005474 <_free_r>
 80059a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	2000      	movs	r0, #0
 80059a8:	6360      	str	r0, [r4, #52]	; 0x34
 80059aa:	b113      	cbz	r3, 80059b2 <__ssrefill_r+0x24>
 80059ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	bd10      	pop	{r4, pc}
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	2300      	movs	r3, #0
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f043 0320 	orr.w	r3, r3, #32
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	e7f3      	b.n	80059b0 <__ssrefill_r+0x22>

080059c8 <__ssvfiscanf_r>:
 80059c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	460c      	mov	r4, r1
 80059ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80059d2:	2100      	movs	r1, #0
 80059d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80059d8:	49a6      	ldr	r1, [pc, #664]	; (8005c74 <__ssvfiscanf_r+0x2ac>)
 80059da:	91a0      	str	r1, [sp, #640]	; 0x280
 80059dc:	f10d 0804 	add.w	r8, sp, #4
 80059e0:	49a5      	ldr	r1, [pc, #660]	; (8005c78 <__ssvfiscanf_r+0x2b0>)
 80059e2:	4fa6      	ldr	r7, [pc, #664]	; (8005c7c <__ssvfiscanf_r+0x2b4>)
 80059e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005c80 <__ssvfiscanf_r+0x2b8>
 80059e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80059ec:	4606      	mov	r6, r0
 80059ee:	91a1      	str	r1, [sp, #644]	; 0x284
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	7813      	ldrb	r3, [r2, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 815a 	beq.w	8005cae <__ssvfiscanf_r+0x2e6>
 80059fa:	5cf9      	ldrb	r1, [r7, r3]
 80059fc:	f011 0108 	ands.w	r1, r1, #8
 8005a00:	f102 0501 	add.w	r5, r2, #1
 8005a04:	d019      	beq.n	8005a3a <__ssvfiscanf_r+0x72>
 8005a06:	6863      	ldr	r3, [r4, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dd0f      	ble.n	8005a2c <__ssvfiscanf_r+0x64>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	781a      	ldrb	r2, [r3, #0]
 8005a10:	5cba      	ldrb	r2, [r7, r2]
 8005a12:	0712      	lsls	r2, r2, #28
 8005a14:	d401      	bmi.n	8005a1a <__ssvfiscanf_r+0x52>
 8005a16:	462a      	mov	r2, r5
 8005a18:	e7eb      	b.n	80059f2 <__ssvfiscanf_r+0x2a>
 8005a1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005a1c:	3201      	adds	r2, #1
 8005a1e:	9245      	str	r2, [sp, #276]	; 0x114
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	3301      	adds	r3, #1
 8005a24:	3a01      	subs	r2, #1
 8005a26:	6062      	str	r2, [r4, #4]
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	e7ec      	b.n	8005a06 <__ssvfiscanf_r+0x3e>
 8005a2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4630      	mov	r0, r6
 8005a32:	4798      	blx	r3
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d0e9      	beq.n	8005a0c <__ssvfiscanf_r+0x44>
 8005a38:	e7ed      	b.n	8005a16 <__ssvfiscanf_r+0x4e>
 8005a3a:	2b25      	cmp	r3, #37	; 0x25
 8005a3c:	d012      	beq.n	8005a64 <__ssvfiscanf_r+0x9c>
 8005a3e:	469a      	mov	sl, r3
 8005a40:	6863      	ldr	r3, [r4, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f340 8091 	ble.w	8005b6a <__ssvfiscanf_r+0x1a2>
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	7813      	ldrb	r3, [r2, #0]
 8005a4c:	4553      	cmp	r3, sl
 8005a4e:	f040 812e 	bne.w	8005cae <__ssvfiscanf_r+0x2e6>
 8005a52:	6863      	ldr	r3, [r4, #4]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	9345      	str	r3, [sp, #276]	; 0x114
 8005a62:	e7d8      	b.n	8005a16 <__ssvfiscanf_r+0x4e>
 8005a64:	9141      	str	r1, [sp, #260]	; 0x104
 8005a66:	9143      	str	r1, [sp, #268]	; 0x10c
 8005a68:	7853      	ldrb	r3, [r2, #1]
 8005a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6c:	bf02      	ittt	eq
 8005a6e:	2310      	moveq	r3, #16
 8005a70:	1c95      	addeq	r5, r2, #2
 8005a72:	9341      	streq	r3, [sp, #260]	; 0x104
 8005a74:	220a      	movs	r2, #10
 8005a76:	46aa      	mov	sl, r5
 8005a78:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005a7c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005a80:	2b09      	cmp	r3, #9
 8005a82:	d91c      	bls.n	8005abe <__ssvfiscanf_r+0xf6>
 8005a84:	487e      	ldr	r0, [pc, #504]	; (8005c80 <__ssvfiscanf_r+0x2b8>)
 8005a86:	2203      	movs	r2, #3
 8005a88:	f7fa fbb2 	bl	80001f0 <memchr>
 8005a8c:	b138      	cbz	r0, 8005a9e <__ssvfiscanf_r+0xd6>
 8005a8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a90:	eba0 0009 	sub.w	r0, r0, r9
 8005a94:	2301      	movs	r3, #1
 8005a96:	4083      	lsls	r3, r0
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	9341      	str	r3, [sp, #260]	; 0x104
 8005a9c:	4655      	mov	r5, sl
 8005a9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005aa2:	2b78      	cmp	r3, #120	; 0x78
 8005aa4:	d806      	bhi.n	8005ab4 <__ssvfiscanf_r+0xec>
 8005aa6:	2b57      	cmp	r3, #87	; 0x57
 8005aa8:	d810      	bhi.n	8005acc <__ssvfiscanf_r+0x104>
 8005aaa:	2b25      	cmp	r3, #37	; 0x25
 8005aac:	d0c7      	beq.n	8005a3e <__ssvfiscanf_r+0x76>
 8005aae:	d857      	bhi.n	8005b60 <__ssvfiscanf_r+0x198>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d065      	beq.n	8005b80 <__ssvfiscanf_r+0x1b8>
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	9347      	str	r3, [sp, #284]	; 0x11c
 8005ab8:	230a      	movs	r3, #10
 8005aba:	9342      	str	r3, [sp, #264]	; 0x108
 8005abc:	e076      	b.n	8005bac <__ssvfiscanf_r+0x1e4>
 8005abe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ac0:	fb02 1103 	mla	r1, r2, r3, r1
 8005ac4:	3930      	subs	r1, #48	; 0x30
 8005ac6:	9143      	str	r1, [sp, #268]	; 0x10c
 8005ac8:	4655      	mov	r5, sl
 8005aca:	e7d4      	b.n	8005a76 <__ssvfiscanf_r+0xae>
 8005acc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005ad0:	2a20      	cmp	r2, #32
 8005ad2:	d8ef      	bhi.n	8005ab4 <__ssvfiscanf_r+0xec>
 8005ad4:	a101      	add	r1, pc, #4	; (adr r1, 8005adc <__ssvfiscanf_r+0x114>)
 8005ad6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b8f 	.word	0x08005b8f
 8005ae0:	08005ab5 	.word	0x08005ab5
 8005ae4:	08005ab5 	.word	0x08005ab5
 8005ae8:	08005bed 	.word	0x08005bed
 8005aec:	08005ab5 	.word	0x08005ab5
 8005af0:	08005ab5 	.word	0x08005ab5
 8005af4:	08005ab5 	.word	0x08005ab5
 8005af8:	08005ab5 	.word	0x08005ab5
 8005afc:	08005ab5 	.word	0x08005ab5
 8005b00:	08005ab5 	.word	0x08005ab5
 8005b04:	08005ab5 	.word	0x08005ab5
 8005b08:	08005c03 	.word	0x08005c03
 8005b0c:	08005be9 	.word	0x08005be9
 8005b10:	08005b67 	.word	0x08005b67
 8005b14:	08005b67 	.word	0x08005b67
 8005b18:	08005b67 	.word	0x08005b67
 8005b1c:	08005ab5 	.word	0x08005ab5
 8005b20:	08005ba5 	.word	0x08005ba5
 8005b24:	08005ab5 	.word	0x08005ab5
 8005b28:	08005ab5 	.word	0x08005ab5
 8005b2c:	08005ab5 	.word	0x08005ab5
 8005b30:	08005ab5 	.word	0x08005ab5
 8005b34:	08005c13 	.word	0x08005c13
 8005b38:	08005be1 	.word	0x08005be1
 8005b3c:	08005b87 	.word	0x08005b87
 8005b40:	08005ab5 	.word	0x08005ab5
 8005b44:	08005ab5 	.word	0x08005ab5
 8005b48:	08005c0f 	.word	0x08005c0f
 8005b4c:	08005ab5 	.word	0x08005ab5
 8005b50:	08005be9 	.word	0x08005be9
 8005b54:	08005ab5 	.word	0x08005ab5
 8005b58:	08005ab5 	.word	0x08005ab5
 8005b5c:	08005b8f 	.word	0x08005b8f
 8005b60:	3b45      	subs	r3, #69	; 0x45
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d8a6      	bhi.n	8005ab4 <__ssvfiscanf_r+0xec>
 8005b66:	2305      	movs	r3, #5
 8005b68:	e01f      	b.n	8005baa <__ssvfiscanf_r+0x1e2>
 8005b6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4630      	mov	r0, r6
 8005b70:	4798      	blx	r3
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f43f af68 	beq.w	8005a48 <__ssvfiscanf_r+0x80>
 8005b78:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f040 808d 	bne.w	8005c9a <__ssvfiscanf_r+0x2d2>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	e08f      	b.n	8005ca6 <__ssvfiscanf_r+0x2de>
 8005b86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b88:	f042 0220 	orr.w	r2, r2, #32
 8005b8c:	9241      	str	r2, [sp, #260]	; 0x104
 8005b8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b94:	9241      	str	r2, [sp, #260]	; 0x104
 8005b96:	2210      	movs	r2, #16
 8005b98:	2b6f      	cmp	r3, #111	; 0x6f
 8005b9a:	9242      	str	r2, [sp, #264]	; 0x108
 8005b9c:	bf34      	ite	cc
 8005b9e:	2303      	movcc	r3, #3
 8005ba0:	2304      	movcs	r3, #4
 8005ba2:	e002      	b.n	8005baa <__ssvfiscanf_r+0x1e2>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9342      	str	r3, [sp, #264]	; 0x108
 8005ba8:	2303      	movs	r3, #3
 8005baa:	9347      	str	r3, [sp, #284]	; 0x11c
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd3d      	ble.n	8005c2e <__ssvfiscanf_r+0x266>
 8005bb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bb4:	0659      	lsls	r1, r3, #25
 8005bb6:	d404      	bmi.n	8005bc2 <__ssvfiscanf_r+0x1fa>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	5cba      	ldrb	r2, [r7, r2]
 8005bbe:	0712      	lsls	r2, r2, #28
 8005bc0:	d43c      	bmi.n	8005c3c <__ssvfiscanf_r+0x274>
 8005bc2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	dc4b      	bgt.n	8005c60 <__ssvfiscanf_r+0x298>
 8005bc8:	466b      	mov	r3, sp
 8005bca:	4622      	mov	r2, r4
 8005bcc:	a941      	add	r1, sp, #260	; 0x104
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f000 fa02 	bl	8005fd8 <_scanf_chars>
 8005bd4:	2801      	cmp	r0, #1
 8005bd6:	d06a      	beq.n	8005cae <__ssvfiscanf_r+0x2e6>
 8005bd8:	2802      	cmp	r0, #2
 8005bda:	f47f af1c 	bne.w	8005a16 <__ssvfiscanf_r+0x4e>
 8005bde:	e7cb      	b.n	8005b78 <__ssvfiscanf_r+0x1b0>
 8005be0:	2308      	movs	r3, #8
 8005be2:	9342      	str	r3, [sp, #264]	; 0x108
 8005be4:	2304      	movs	r3, #4
 8005be6:	e7e0      	b.n	8005baa <__ssvfiscanf_r+0x1e2>
 8005be8:	220a      	movs	r2, #10
 8005bea:	e7d5      	b.n	8005b98 <__ssvfiscanf_r+0x1d0>
 8005bec:	4629      	mov	r1, r5
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f000 fb40 	bl	8006274 <__sccl>
 8005bf4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfa:	9341      	str	r3, [sp, #260]	; 0x104
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7d3      	b.n	8005baa <__ssvfiscanf_r+0x1e2>
 8005c02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c08:	9341      	str	r3, [sp, #260]	; 0x104
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e7cd      	b.n	8005baa <__ssvfiscanf_r+0x1e2>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e7cb      	b.n	8005baa <__ssvfiscanf_r+0x1e2>
 8005c12:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005c14:	06c3      	lsls	r3, r0, #27
 8005c16:	f53f aefe 	bmi.w	8005a16 <__ssvfiscanf_r+0x4e>
 8005c1a:	9b00      	ldr	r3, [sp, #0]
 8005c1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c1e:	1d19      	adds	r1, r3, #4
 8005c20:	9100      	str	r1, [sp, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	07c0      	lsls	r0, r0, #31
 8005c26:	bf4c      	ite	mi
 8005c28:	801a      	strhmi	r2, [r3, #0]
 8005c2a:	601a      	strpl	r2, [r3, #0]
 8005c2c:	e6f3      	b.n	8005a16 <__ssvfiscanf_r+0x4e>
 8005c2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c30:	4621      	mov	r1, r4
 8005c32:	4630      	mov	r0, r6
 8005c34:	4798      	blx	r3
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0bb      	beq.n	8005bb2 <__ssvfiscanf_r+0x1ea>
 8005c3a:	e79d      	b.n	8005b78 <__ssvfiscanf_r+0x1b0>
 8005c3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c3e:	3201      	adds	r2, #1
 8005c40:	9245      	str	r2, [sp, #276]	; 0x114
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	3a01      	subs	r2, #1
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	6062      	str	r2, [r4, #4]
 8005c4a:	dd02      	ble.n	8005c52 <__ssvfiscanf_r+0x28a>
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	e7b2      	b.n	8005bb8 <__ssvfiscanf_r+0x1f0>
 8005c52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c54:	4621      	mov	r1, r4
 8005c56:	4630      	mov	r0, r6
 8005c58:	4798      	blx	r3
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d0ac      	beq.n	8005bb8 <__ssvfiscanf_r+0x1f0>
 8005c5e:	e78b      	b.n	8005b78 <__ssvfiscanf_r+0x1b0>
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	dc0f      	bgt.n	8005c84 <__ssvfiscanf_r+0x2bc>
 8005c64:	466b      	mov	r3, sp
 8005c66:	4622      	mov	r2, r4
 8005c68:	a941      	add	r1, sp, #260	; 0x104
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 fa0e 	bl	800608c <_scanf_i>
 8005c70:	e7b0      	b.n	8005bd4 <__ssvfiscanf_r+0x20c>
 8005c72:	bf00      	nop
 8005c74:	08005915 	.word	0x08005915
 8005c78:	0800598f 	.word	0x0800598f
 8005c7c:	080066df 	.word	0x080066df
 8005c80:	08006696 	.word	0x08006696
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <__ssvfiscanf_r+0x2ec>)
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f43f aec5 	beq.w	8005a16 <__ssvfiscanf_r+0x4e>
 8005c8c:	466b      	mov	r3, sp
 8005c8e:	4622      	mov	r2, r4
 8005c90:	a941      	add	r1, sp, #260	; 0x104
 8005c92:	4630      	mov	r0, r6
 8005c94:	f3af 8000 	nop.w
 8005c98:	e79c      	b.n	8005bd4 <__ssvfiscanf_r+0x20c>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ca0:	bf18      	it	ne
 8005ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8005ca6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005cb0:	e7f9      	b.n	8005ca6 <__ssvfiscanf_r+0x2de>
 8005cb2:	bf00      	nop
 8005cb4:	00000000 	.word	0x00000000

08005cb8 <_printf_common>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	4616      	mov	r6, r2
 8005cbe:	4699      	mov	r9, r3
 8005cc0:	688a      	ldr	r2, [r1, #8]
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bfb8      	it	lt
 8005ccc:	4613      	movlt	r3, r2
 8005cce:	6033      	str	r3, [r6, #0]
 8005cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	b10a      	cbz	r2, 8005cde <_printf_common+0x26>
 8005cda:	3301      	adds	r3, #1
 8005cdc:	6033      	str	r3, [r6, #0]
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	0699      	lsls	r1, r3, #26
 8005ce2:	bf42      	ittt	mi
 8005ce4:	6833      	ldrmi	r3, [r6, #0]
 8005ce6:	3302      	addmi	r3, #2
 8005ce8:	6033      	strmi	r3, [r6, #0]
 8005cea:	6825      	ldr	r5, [r4, #0]
 8005cec:	f015 0506 	ands.w	r5, r5, #6
 8005cf0:	d106      	bne.n	8005d00 <_printf_common+0x48>
 8005cf2:	f104 0a19 	add.w	sl, r4, #25
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	6832      	ldr	r2, [r6, #0]
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	42ab      	cmp	r3, r5
 8005cfe:	dc26      	bgt.n	8005d4e <_printf_common+0x96>
 8005d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d04:	1e13      	subs	r3, r2, #0
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	bf18      	it	ne
 8005d0a:	2301      	movne	r3, #1
 8005d0c:	0692      	lsls	r2, r2, #26
 8005d0e:	d42b      	bmi.n	8005d68 <_printf_common+0xb0>
 8005d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d14:	4649      	mov	r1, r9
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d01e      	beq.n	8005d5c <_printf_common+0xa4>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	6922      	ldr	r2, [r4, #16]
 8005d22:	f003 0306 	and.w	r3, r3, #6
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	bf02      	ittt	eq
 8005d2a:	68e5      	ldreq	r5, [r4, #12]
 8005d2c:	6833      	ldreq	r3, [r6, #0]
 8005d2e:	1aed      	subeq	r5, r5, r3
 8005d30:	68a3      	ldr	r3, [r4, #8]
 8005d32:	bf0c      	ite	eq
 8005d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d38:	2500      	movne	r5, #0
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	bfc4      	itt	gt
 8005d3e:	1a9b      	subgt	r3, r3, r2
 8005d40:	18ed      	addgt	r5, r5, r3
 8005d42:	2600      	movs	r6, #0
 8005d44:	341a      	adds	r4, #26
 8005d46:	42b5      	cmp	r5, r6
 8005d48:	d11a      	bne.n	8005d80 <_printf_common+0xc8>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	e008      	b.n	8005d60 <_printf_common+0xa8>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4652      	mov	r2, sl
 8005d52:	4649      	mov	r1, r9
 8005d54:	4638      	mov	r0, r7
 8005d56:	47c0      	blx	r8
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d103      	bne.n	8005d64 <_printf_common+0xac>
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	3501      	adds	r5, #1
 8005d66:	e7c6      	b.n	8005cf6 <_printf_common+0x3e>
 8005d68:	18e1      	adds	r1, r4, r3
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	2030      	movs	r0, #48	; 0x30
 8005d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d72:	4422      	add	r2, r4
 8005d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	e7c7      	b.n	8005d10 <_printf_common+0x58>
 8005d80:	2301      	movs	r3, #1
 8005d82:	4622      	mov	r2, r4
 8005d84:	4649      	mov	r1, r9
 8005d86:	4638      	mov	r0, r7
 8005d88:	47c0      	blx	r8
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d0e6      	beq.n	8005d5c <_printf_common+0xa4>
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7d9      	b.n	8005d46 <_printf_common+0x8e>
	...

08005d94 <_printf_i>:
 8005d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	7e0f      	ldrb	r7, [r1, #24]
 8005d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d9c:	2f78      	cmp	r7, #120	; 0x78
 8005d9e:	4691      	mov	r9, r2
 8005da0:	4680      	mov	r8, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	469a      	mov	sl, r3
 8005da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005daa:	d807      	bhi.n	8005dbc <_printf_i+0x28>
 8005dac:	2f62      	cmp	r7, #98	; 0x62
 8005dae:	d80a      	bhi.n	8005dc6 <_printf_i+0x32>
 8005db0:	2f00      	cmp	r7, #0
 8005db2:	f000 80d4 	beq.w	8005f5e <_printf_i+0x1ca>
 8005db6:	2f58      	cmp	r7, #88	; 0x58
 8005db8:	f000 80c0 	beq.w	8005f3c <_printf_i+0x1a8>
 8005dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dc4:	e03a      	b.n	8005e3c <_printf_i+0xa8>
 8005dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dca:	2b15      	cmp	r3, #21
 8005dcc:	d8f6      	bhi.n	8005dbc <_printf_i+0x28>
 8005dce:	a101      	add	r1, pc, #4	; (adr r1, 8005dd4 <_printf_i+0x40>)
 8005dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dd4:	08005e2d 	.word	0x08005e2d
 8005dd8:	08005e41 	.word	0x08005e41
 8005ddc:	08005dbd 	.word	0x08005dbd
 8005de0:	08005dbd 	.word	0x08005dbd
 8005de4:	08005dbd 	.word	0x08005dbd
 8005de8:	08005dbd 	.word	0x08005dbd
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005dbd 	.word	0x08005dbd
 8005df4:	08005dbd 	.word	0x08005dbd
 8005df8:	08005dbd 	.word	0x08005dbd
 8005dfc:	08005dbd 	.word	0x08005dbd
 8005e00:	08005f45 	.word	0x08005f45
 8005e04:	08005e6d 	.word	0x08005e6d
 8005e08:	08005eff 	.word	0x08005eff
 8005e0c:	08005dbd 	.word	0x08005dbd
 8005e10:	08005dbd 	.word	0x08005dbd
 8005e14:	08005f67 	.word	0x08005f67
 8005e18:	08005dbd 	.word	0x08005dbd
 8005e1c:	08005e6d 	.word	0x08005e6d
 8005e20:	08005dbd 	.word	0x08005dbd
 8005e24:	08005dbd 	.word	0x08005dbd
 8005e28:	08005f07 	.word	0x08005f07
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	1d1a      	adds	r2, r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	602a      	str	r2, [r5, #0]
 8005e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e09f      	b.n	8005f80 <_printf_i+0x1ec>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	0607      	lsls	r7, r0, #24
 8005e46:	f103 0104 	add.w	r1, r3, #4
 8005e4a:	6029      	str	r1, [r5, #0]
 8005e4c:	d501      	bpl.n	8005e52 <_printf_i+0xbe>
 8005e4e:	681e      	ldr	r6, [r3, #0]
 8005e50:	e003      	b.n	8005e5a <_printf_i+0xc6>
 8005e52:	0646      	lsls	r6, r0, #25
 8005e54:	d5fb      	bpl.n	8005e4e <_printf_i+0xba>
 8005e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	da03      	bge.n	8005e66 <_printf_i+0xd2>
 8005e5e:	232d      	movs	r3, #45	; 0x2d
 8005e60:	4276      	negs	r6, r6
 8005e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e66:	485a      	ldr	r0, [pc, #360]	; (8005fd0 <_printf_i+0x23c>)
 8005e68:	230a      	movs	r3, #10
 8005e6a:	e012      	b.n	8005e92 <_printf_i+0xfe>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	1d19      	adds	r1, r3, #4
 8005e72:	6029      	str	r1, [r5, #0]
 8005e74:	0605      	lsls	r5, r0, #24
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0xe8>
 8005e78:	681e      	ldr	r6, [r3, #0]
 8005e7a:	e002      	b.n	8005e82 <_printf_i+0xee>
 8005e7c:	0641      	lsls	r1, r0, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0xe4>
 8005e80:	881e      	ldrh	r6, [r3, #0]
 8005e82:	4853      	ldr	r0, [pc, #332]	; (8005fd0 <_printf_i+0x23c>)
 8005e84:	2f6f      	cmp	r7, #111	; 0x6f
 8005e86:	bf0c      	ite	eq
 8005e88:	2308      	moveq	r3, #8
 8005e8a:	230a      	movne	r3, #10
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e92:	6865      	ldr	r5, [r4, #4]
 8005e94:	60a5      	str	r5, [r4, #8]
 8005e96:	2d00      	cmp	r5, #0
 8005e98:	bfa2      	ittt	ge
 8005e9a:	6821      	ldrge	r1, [r4, #0]
 8005e9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ea0:	6021      	strge	r1, [r4, #0]
 8005ea2:	b90e      	cbnz	r6, 8005ea8 <_printf_i+0x114>
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	d04b      	beq.n	8005f40 <_printf_i+0x1ac>
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eae:	fb03 6711 	mls	r7, r3, r1, r6
 8005eb2:	5dc7      	ldrb	r7, [r0, r7]
 8005eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005eb8:	4637      	mov	r7, r6
 8005eba:	42bb      	cmp	r3, r7
 8005ebc:	460e      	mov	r6, r1
 8005ebe:	d9f4      	bls.n	8005eaa <_printf_i+0x116>
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d10b      	bne.n	8005edc <_printf_i+0x148>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	07de      	lsls	r6, r3, #31
 8005ec8:	d508      	bpl.n	8005edc <_printf_i+0x148>
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	6861      	ldr	r1, [r4, #4]
 8005ece:	4299      	cmp	r1, r3
 8005ed0:	bfde      	ittt	le
 8005ed2:	2330      	movle	r3, #48	; 0x30
 8005ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005edc:	1b52      	subs	r2, r2, r5
 8005ede:	6122      	str	r2, [r4, #16]
 8005ee0:	f8cd a000 	str.w	sl, [sp]
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	aa03      	add	r2, sp, #12
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4640      	mov	r0, r8
 8005eec:	f7ff fee4 	bl	8005cb8 <_printf_common>
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d14a      	bne.n	8005f8a <_printf_i+0x1f6>
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	b004      	add	sp, #16
 8005efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	f043 0320 	orr.w	r3, r3, #32
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	4833      	ldr	r0, [pc, #204]	; (8005fd4 <_printf_i+0x240>)
 8005f08:	2778      	movs	r7, #120	; 0x78
 8005f0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	6829      	ldr	r1, [r5, #0]
 8005f12:	061f      	lsls	r7, r3, #24
 8005f14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f18:	d402      	bmi.n	8005f20 <_printf_i+0x18c>
 8005f1a:	065f      	lsls	r7, r3, #25
 8005f1c:	bf48      	it	mi
 8005f1e:	b2b6      	uxthmi	r6, r6
 8005f20:	07df      	lsls	r7, r3, #31
 8005f22:	bf48      	it	mi
 8005f24:	f043 0320 	orrmi.w	r3, r3, #32
 8005f28:	6029      	str	r1, [r5, #0]
 8005f2a:	bf48      	it	mi
 8005f2c:	6023      	strmi	r3, [r4, #0]
 8005f2e:	b91e      	cbnz	r6, 8005f38 <_printf_i+0x1a4>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	f023 0320 	bic.w	r3, r3, #32
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	2310      	movs	r3, #16
 8005f3a:	e7a7      	b.n	8005e8c <_printf_i+0xf8>
 8005f3c:	4824      	ldr	r0, [pc, #144]	; (8005fd0 <_printf_i+0x23c>)
 8005f3e:	e7e4      	b.n	8005f0a <_printf_i+0x176>
 8005f40:	4615      	mov	r5, r2
 8005f42:	e7bd      	b.n	8005ec0 <_printf_i+0x12c>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	6826      	ldr	r6, [r4, #0]
 8005f48:	6961      	ldr	r1, [r4, #20]
 8005f4a:	1d18      	adds	r0, r3, #4
 8005f4c:	6028      	str	r0, [r5, #0]
 8005f4e:	0635      	lsls	r5, r6, #24
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	d501      	bpl.n	8005f58 <_printf_i+0x1c4>
 8005f54:	6019      	str	r1, [r3, #0]
 8005f56:	e002      	b.n	8005f5e <_printf_i+0x1ca>
 8005f58:	0670      	lsls	r0, r6, #25
 8005f5a:	d5fb      	bpl.n	8005f54 <_printf_i+0x1c0>
 8005f5c:	8019      	strh	r1, [r3, #0]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	4615      	mov	r5, r2
 8005f64:	e7bc      	b.n	8005ee0 <_printf_i+0x14c>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	1d1a      	adds	r2, r3, #4
 8005f6a:	602a      	str	r2, [r5, #0]
 8005f6c:	681d      	ldr	r5, [r3, #0]
 8005f6e:	6862      	ldr	r2, [r4, #4]
 8005f70:	2100      	movs	r1, #0
 8005f72:	4628      	mov	r0, r5
 8005f74:	f7fa f93c 	bl	80001f0 <memchr>
 8005f78:	b108      	cbz	r0, 8005f7e <_printf_i+0x1ea>
 8005f7a:	1b40      	subs	r0, r0, r5
 8005f7c:	6060      	str	r0, [r4, #4]
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	2300      	movs	r3, #0
 8005f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f88:	e7aa      	b.n	8005ee0 <_printf_i+0x14c>
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	4649      	mov	r1, r9
 8005f90:	4640      	mov	r0, r8
 8005f92:	47d0      	blx	sl
 8005f94:	3001      	adds	r0, #1
 8005f96:	d0ad      	beq.n	8005ef4 <_printf_i+0x160>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	079b      	lsls	r3, r3, #30
 8005f9c:	d413      	bmi.n	8005fc6 <_printf_i+0x232>
 8005f9e:	68e0      	ldr	r0, [r4, #12]
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	4298      	cmp	r0, r3
 8005fa4:	bfb8      	it	lt
 8005fa6:	4618      	movlt	r0, r3
 8005fa8:	e7a6      	b.n	8005ef8 <_printf_i+0x164>
 8005faa:	2301      	movs	r3, #1
 8005fac:	4632      	mov	r2, r6
 8005fae:	4649      	mov	r1, r9
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	47d0      	blx	sl
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d09d      	beq.n	8005ef4 <_printf_i+0x160>
 8005fb8:	3501      	adds	r5, #1
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	9903      	ldr	r1, [sp, #12]
 8005fbe:	1a5b      	subs	r3, r3, r1
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	dcf2      	bgt.n	8005faa <_printf_i+0x216>
 8005fc4:	e7eb      	b.n	8005f9e <_printf_i+0x20a>
 8005fc6:	2500      	movs	r5, #0
 8005fc8:	f104 0619 	add.w	r6, r4, #25
 8005fcc:	e7f5      	b.n	8005fba <_printf_i+0x226>
 8005fce:	bf00      	nop
 8005fd0:	080066a1 	.word	0x080066a1
 8005fd4:	080066b2 	.word	0x080066b2

08005fd8 <_scanf_chars>:
 8005fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fdc:	4615      	mov	r5, r2
 8005fde:	688a      	ldr	r2, [r1, #8]
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	b932      	cbnz	r2, 8005ff4 <_scanf_chars+0x1c>
 8005fe6:	698a      	ldr	r2, [r1, #24]
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	bf0c      	ite	eq
 8005fec:	2201      	moveq	r2, #1
 8005fee:	f04f 32ff 	movne.w	r2, #4294967295
 8005ff2:	608a      	str	r2, [r1, #8]
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006088 <_scanf_chars+0xb0>
 8005ffa:	06d1      	lsls	r1, r2, #27
 8005ffc:	bf5f      	itttt	pl
 8005ffe:	681a      	ldrpl	r2, [r3, #0]
 8006000:	1d11      	addpl	r1, r2, #4
 8006002:	6019      	strpl	r1, [r3, #0]
 8006004:	6816      	ldrpl	r6, [r2, #0]
 8006006:	2700      	movs	r7, #0
 8006008:	69a0      	ldr	r0, [r4, #24]
 800600a:	b188      	cbz	r0, 8006030 <_scanf_chars+0x58>
 800600c:	2801      	cmp	r0, #1
 800600e:	d107      	bne.n	8006020 <_scanf_chars+0x48>
 8006010:	682a      	ldr	r2, [r5, #0]
 8006012:	7811      	ldrb	r1, [r2, #0]
 8006014:	6962      	ldr	r2, [r4, #20]
 8006016:	5c52      	ldrb	r2, [r2, r1]
 8006018:	b952      	cbnz	r2, 8006030 <_scanf_chars+0x58>
 800601a:	2f00      	cmp	r7, #0
 800601c:	d031      	beq.n	8006082 <_scanf_chars+0xaa>
 800601e:	e022      	b.n	8006066 <_scanf_chars+0x8e>
 8006020:	2802      	cmp	r0, #2
 8006022:	d120      	bne.n	8006066 <_scanf_chars+0x8e>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f819 3003 	ldrb.w	r3, [r9, r3]
 800602c:	071b      	lsls	r3, r3, #28
 800602e:	d41a      	bmi.n	8006066 <_scanf_chars+0x8e>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	06da      	lsls	r2, r3, #27
 8006034:	bf5e      	ittt	pl
 8006036:	682b      	ldrpl	r3, [r5, #0]
 8006038:	781b      	ldrbpl	r3, [r3, #0]
 800603a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800603e:	682a      	ldr	r2, [r5, #0]
 8006040:	686b      	ldr	r3, [r5, #4]
 8006042:	3201      	adds	r2, #1
 8006044:	602a      	str	r2, [r5, #0]
 8006046:	68a2      	ldr	r2, [r4, #8]
 8006048:	3b01      	subs	r3, #1
 800604a:	3a01      	subs	r2, #1
 800604c:	606b      	str	r3, [r5, #4]
 800604e:	3701      	adds	r7, #1
 8006050:	60a2      	str	r2, [r4, #8]
 8006052:	b142      	cbz	r2, 8006066 <_scanf_chars+0x8e>
 8006054:	2b00      	cmp	r3, #0
 8006056:	dcd7      	bgt.n	8006008 <_scanf_chars+0x30>
 8006058:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800605c:	4629      	mov	r1, r5
 800605e:	4640      	mov	r0, r8
 8006060:	4798      	blx	r3
 8006062:	2800      	cmp	r0, #0
 8006064:	d0d0      	beq.n	8006008 <_scanf_chars+0x30>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f013 0310 	ands.w	r3, r3, #16
 800606c:	d105      	bne.n	800607a <_scanf_chars+0xa2>
 800606e:	68e2      	ldr	r2, [r4, #12]
 8006070:	3201      	adds	r2, #1
 8006072:	60e2      	str	r2, [r4, #12]
 8006074:	69a2      	ldr	r2, [r4, #24]
 8006076:	b102      	cbz	r2, 800607a <_scanf_chars+0xa2>
 8006078:	7033      	strb	r3, [r6, #0]
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	443b      	add	r3, r7
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	2000      	movs	r0, #0
 8006082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006086:	bf00      	nop
 8006088:	080066df 	.word	0x080066df

0800608c <_scanf_i>:
 800608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	4698      	mov	r8, r3
 8006092:	4b74      	ldr	r3, [pc, #464]	; (8006264 <_scanf_i+0x1d8>)
 8006094:	460c      	mov	r4, r1
 8006096:	4682      	mov	sl, r0
 8006098:	4616      	mov	r6, r2
 800609a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800609e:	b087      	sub	sp, #28
 80060a0:	ab03      	add	r3, sp, #12
 80060a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060a6:	4b70      	ldr	r3, [pc, #448]	; (8006268 <_scanf_i+0x1dc>)
 80060a8:	69a1      	ldr	r1, [r4, #24]
 80060aa:	4a70      	ldr	r2, [pc, #448]	; (800626c <_scanf_i+0x1e0>)
 80060ac:	2903      	cmp	r1, #3
 80060ae:	bf18      	it	ne
 80060b0:	461a      	movne	r2, r3
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	9201      	str	r2, [sp, #4]
 80060b6:	1e5a      	subs	r2, r3, #1
 80060b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80060bc:	bf88      	it	hi
 80060be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80060c2:	4627      	mov	r7, r4
 80060c4:	bf82      	ittt	hi
 80060c6:	eb03 0905 	addhi.w	r9, r3, r5
 80060ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 80060ce:	60a3      	strhi	r3, [r4, #8]
 80060d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80060d4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80060d8:	bf98      	it	ls
 80060da:	f04f 0900 	movls.w	r9, #0
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	463d      	mov	r5, r7
 80060e2:	f04f 0b00 	mov.w	fp, #0
 80060e6:	6831      	ldr	r1, [r6, #0]
 80060e8:	ab03      	add	r3, sp, #12
 80060ea:	7809      	ldrb	r1, [r1, #0]
 80060ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f7fa f87d 	bl	80001f0 <memchr>
 80060f6:	b328      	cbz	r0, 8006144 <_scanf_i+0xb8>
 80060f8:	f1bb 0f01 	cmp.w	fp, #1
 80060fc:	d159      	bne.n	80061b2 <_scanf_i+0x126>
 80060fe:	6862      	ldr	r2, [r4, #4]
 8006100:	b92a      	cbnz	r2, 800610e <_scanf_i+0x82>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	2308      	movs	r3, #8
 8006106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	6022      	str	r2, [r4, #0]
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	68a2      	ldr	r2, [r4, #8]
 8006118:	1e51      	subs	r1, r2, #1
 800611a:	60a1      	str	r1, [r4, #8]
 800611c:	b192      	cbz	r2, 8006144 <_scanf_i+0xb8>
 800611e:	6832      	ldr	r2, [r6, #0]
 8006120:	1c51      	adds	r1, r2, #1
 8006122:	6031      	str	r1, [r6, #0]
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	f805 2b01 	strb.w	r2, [r5], #1
 800612a:	6872      	ldr	r2, [r6, #4]
 800612c:	3a01      	subs	r2, #1
 800612e:	2a00      	cmp	r2, #0
 8006130:	6072      	str	r2, [r6, #4]
 8006132:	dc07      	bgt.n	8006144 <_scanf_i+0xb8>
 8006134:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006138:	4631      	mov	r1, r6
 800613a:	4650      	mov	r0, sl
 800613c:	4790      	blx	r2
 800613e:	2800      	cmp	r0, #0
 8006140:	f040 8085 	bne.w	800624e <_scanf_i+0x1c2>
 8006144:	f10b 0b01 	add.w	fp, fp, #1
 8006148:	f1bb 0f03 	cmp.w	fp, #3
 800614c:	d1cb      	bne.n	80060e6 <_scanf_i+0x5a>
 800614e:	6863      	ldr	r3, [r4, #4]
 8006150:	b90b      	cbnz	r3, 8006156 <_scanf_i+0xca>
 8006152:	230a      	movs	r3, #10
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	4945      	ldr	r1, [pc, #276]	; (8006270 <_scanf_i+0x1e4>)
 800615a:	6960      	ldr	r0, [r4, #20]
 800615c:	1ac9      	subs	r1, r1, r3
 800615e:	f000 f889 	bl	8006274 <__sccl>
 8006162:	f04f 0b00 	mov.w	fp, #0
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d03d      	beq.n	80061ea <_scanf_i+0x15e>
 800616e:	6831      	ldr	r1, [r6, #0]
 8006170:	6960      	ldr	r0, [r4, #20]
 8006172:	f891 c000 	ldrb.w	ip, [r1]
 8006176:	f810 000c 	ldrb.w	r0, [r0, ip]
 800617a:	2800      	cmp	r0, #0
 800617c:	d035      	beq.n	80061ea <_scanf_i+0x15e>
 800617e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006182:	d124      	bne.n	80061ce <_scanf_i+0x142>
 8006184:	0510      	lsls	r0, r2, #20
 8006186:	d522      	bpl.n	80061ce <_scanf_i+0x142>
 8006188:	f10b 0b01 	add.w	fp, fp, #1
 800618c:	f1b9 0f00 	cmp.w	r9, #0
 8006190:	d003      	beq.n	800619a <_scanf_i+0x10e>
 8006192:	3301      	adds	r3, #1
 8006194:	f109 39ff 	add.w	r9, r9, #4294967295
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	6873      	ldr	r3, [r6, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	6073      	str	r3, [r6, #4]
 80061a2:	dd1b      	ble.n	80061dc <_scanf_i+0x150>
 80061a4:	6833      	ldr	r3, [r6, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	60a3      	str	r3, [r4, #8]
 80061b0:	e7d9      	b.n	8006166 <_scanf_i+0xda>
 80061b2:	f1bb 0f02 	cmp.w	fp, #2
 80061b6:	d1ae      	bne.n	8006116 <_scanf_i+0x8a>
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80061be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80061c2:	d1bf      	bne.n	8006144 <_scanf_i+0xb8>
 80061c4:	2310      	movs	r3, #16
 80061c6:	6063      	str	r3, [r4, #4]
 80061c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061cc:	e7a2      	b.n	8006114 <_scanf_i+0x88>
 80061ce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	780b      	ldrb	r3, [r1, #0]
 80061d6:	f805 3b01 	strb.w	r3, [r5], #1
 80061da:	e7de      	b.n	800619a <_scanf_i+0x10e>
 80061dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061e0:	4631      	mov	r1, r6
 80061e2:	4650      	mov	r0, sl
 80061e4:	4798      	blx	r3
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d0df      	beq.n	80061aa <_scanf_i+0x11e>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	05d9      	lsls	r1, r3, #23
 80061ee:	d50d      	bpl.n	800620c <_scanf_i+0x180>
 80061f0:	42bd      	cmp	r5, r7
 80061f2:	d909      	bls.n	8006208 <_scanf_i+0x17c>
 80061f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80061f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061fc:	4632      	mov	r2, r6
 80061fe:	4650      	mov	r0, sl
 8006200:	4798      	blx	r3
 8006202:	f105 39ff 	add.w	r9, r5, #4294967295
 8006206:	464d      	mov	r5, r9
 8006208:	42bd      	cmp	r5, r7
 800620a:	d028      	beq.n	800625e <_scanf_i+0x1d2>
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	f012 0210 	ands.w	r2, r2, #16
 8006212:	d113      	bne.n	800623c <_scanf_i+0x1b0>
 8006214:	702a      	strb	r2, [r5, #0]
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	9e01      	ldr	r6, [sp, #4]
 800621a:	4639      	mov	r1, r7
 800621c:	4650      	mov	r0, sl
 800621e:	47b0      	blx	r6
 8006220:	f8d8 3000 	ldr.w	r3, [r8]
 8006224:	6821      	ldr	r1, [r4, #0]
 8006226:	1d1a      	adds	r2, r3, #4
 8006228:	f8c8 2000 	str.w	r2, [r8]
 800622c:	f011 0f20 	tst.w	r1, #32
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	d00f      	beq.n	8006254 <_scanf_i+0x1c8>
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60e3      	str	r3, [r4, #12]
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	1bed      	subs	r5, r5, r7
 8006240:	445d      	add	r5, fp
 8006242:	442b      	add	r3, r5
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	2000      	movs	r0, #0
 8006248:	b007      	add	sp, #28
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	f04f 0b00 	mov.w	fp, #0
 8006252:	e7ca      	b.n	80061ea <_scanf_i+0x15e>
 8006254:	07ca      	lsls	r2, r1, #31
 8006256:	bf4c      	ite	mi
 8006258:	8018      	strhmi	r0, [r3, #0]
 800625a:	6018      	strpl	r0, [r3, #0]
 800625c:	e7eb      	b.n	8006236 <_scanf_i+0x1aa>
 800625e:	2001      	movs	r0, #1
 8006260:	e7f2      	b.n	8006248 <_scanf_i+0x1bc>
 8006262:	bf00      	nop
 8006264:	08006664 	.word	0x08006664
 8006268:	08006619 	.word	0x08006619
 800626c:	08006531 	.word	0x08006531
 8006270:	080066d3 	.word	0x080066d3

08006274 <__sccl>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	780b      	ldrb	r3, [r1, #0]
 8006278:	4604      	mov	r4, r0
 800627a:	2b5e      	cmp	r3, #94	; 0x5e
 800627c:	bf0b      	itete	eq
 800627e:	784b      	ldrbeq	r3, [r1, #1]
 8006280:	1c4a      	addne	r2, r1, #1
 8006282:	1c8a      	addeq	r2, r1, #2
 8006284:	2100      	movne	r1, #0
 8006286:	bf08      	it	eq
 8006288:	2101      	moveq	r1, #1
 800628a:	3801      	subs	r0, #1
 800628c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006290:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006294:	42a8      	cmp	r0, r5
 8006296:	d1fb      	bne.n	8006290 <__sccl+0x1c>
 8006298:	b90b      	cbnz	r3, 800629e <__sccl+0x2a>
 800629a:	1e50      	subs	r0, r2, #1
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	f081 0101 	eor.w	r1, r1, #1
 80062a2:	54e1      	strb	r1, [r4, r3]
 80062a4:	4610      	mov	r0, r2
 80062a6:	4602      	mov	r2, r0
 80062a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062ac:	2d2d      	cmp	r5, #45	; 0x2d
 80062ae:	d005      	beq.n	80062bc <__sccl+0x48>
 80062b0:	2d5d      	cmp	r5, #93	; 0x5d
 80062b2:	d016      	beq.n	80062e2 <__sccl+0x6e>
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	d0f1      	beq.n	800629c <__sccl+0x28>
 80062b8:	462b      	mov	r3, r5
 80062ba:	e7f2      	b.n	80062a2 <__sccl+0x2e>
 80062bc:	7846      	ldrb	r6, [r0, #1]
 80062be:	2e5d      	cmp	r6, #93	; 0x5d
 80062c0:	d0fa      	beq.n	80062b8 <__sccl+0x44>
 80062c2:	42b3      	cmp	r3, r6
 80062c4:	dcf8      	bgt.n	80062b8 <__sccl+0x44>
 80062c6:	3002      	adds	r0, #2
 80062c8:	461a      	mov	r2, r3
 80062ca:	3201      	adds	r2, #1
 80062cc:	4296      	cmp	r6, r2
 80062ce:	54a1      	strb	r1, [r4, r2]
 80062d0:	dcfb      	bgt.n	80062ca <__sccl+0x56>
 80062d2:	1af2      	subs	r2, r6, r3
 80062d4:	3a01      	subs	r2, #1
 80062d6:	1c5d      	adds	r5, r3, #1
 80062d8:	42b3      	cmp	r3, r6
 80062da:	bfa8      	it	ge
 80062dc:	2200      	movge	r2, #0
 80062de:	18ab      	adds	r3, r5, r2
 80062e0:	e7e1      	b.n	80062a6 <__sccl+0x32>
 80062e2:	4610      	mov	r0, r2
 80062e4:	e7da      	b.n	800629c <__sccl+0x28>

080062e6 <__submore>:
 80062e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ea:	460c      	mov	r4, r1
 80062ec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80062ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062f2:	4299      	cmp	r1, r3
 80062f4:	d11d      	bne.n	8006332 <__submore+0x4c>
 80062f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062fa:	f7ff f927 	bl	800554c <_malloc_r>
 80062fe:	b918      	cbnz	r0, 8006308 <__submore+0x22>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800630c:	63a3      	str	r3, [r4, #56]	; 0x38
 800630e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006312:	6360      	str	r0, [r4, #52]	; 0x34
 8006314:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006318:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800631c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006320:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006324:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006328:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800632c:	6020      	str	r0, [r4, #0]
 800632e:	2000      	movs	r0, #0
 8006330:	e7e8      	b.n	8006304 <__submore+0x1e>
 8006332:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006334:	0077      	lsls	r7, r6, #1
 8006336:	463a      	mov	r2, r7
 8006338:	f000 f848 	bl	80063cc <_realloc_r>
 800633c:	4605      	mov	r5, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	d0de      	beq.n	8006300 <__submore+0x1a>
 8006342:	eb00 0806 	add.w	r8, r0, r6
 8006346:	4601      	mov	r1, r0
 8006348:	4632      	mov	r2, r6
 800634a:	4640      	mov	r0, r8
 800634c:	f000 f830 	bl	80063b0 <memcpy>
 8006350:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006354:	f8c4 8000 	str.w	r8, [r4]
 8006358:	e7e9      	b.n	800632e <__submore+0x48>

0800635a <memmove>:
 800635a:	4288      	cmp	r0, r1
 800635c:	b510      	push	{r4, lr}
 800635e:	eb01 0402 	add.w	r4, r1, r2
 8006362:	d902      	bls.n	800636a <memmove+0x10>
 8006364:	4284      	cmp	r4, r0
 8006366:	4623      	mov	r3, r4
 8006368:	d807      	bhi.n	800637a <memmove+0x20>
 800636a:	1e43      	subs	r3, r0, #1
 800636c:	42a1      	cmp	r1, r4
 800636e:	d008      	beq.n	8006382 <memmove+0x28>
 8006370:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006374:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006378:	e7f8      	b.n	800636c <memmove+0x12>
 800637a:	4402      	add	r2, r0
 800637c:	4601      	mov	r1, r0
 800637e:	428a      	cmp	r2, r1
 8006380:	d100      	bne.n	8006384 <memmove+0x2a>
 8006382:	bd10      	pop	{r4, pc}
 8006384:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006388:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800638c:	e7f7      	b.n	800637e <memmove+0x24>
	...

08006390 <_sbrk_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d06      	ldr	r5, [pc, #24]	; (80063ac <_sbrk_r+0x1c>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	f7fa ff30 	bl	8001200 <_sbrk>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_sbrk_r+0x1a>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_sbrk_r+0x1a>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	20000368 	.word	0x20000368

080063b0 <memcpy>:
 80063b0:	440a      	add	r2, r1
 80063b2:	4291      	cmp	r1, r2
 80063b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063b8:	d100      	bne.n	80063bc <memcpy+0xc>
 80063ba:	4770      	bx	lr
 80063bc:	b510      	push	{r4, lr}
 80063be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c6:	4291      	cmp	r1, r2
 80063c8:	d1f9      	bne.n	80063be <memcpy+0xe>
 80063ca:	bd10      	pop	{r4, pc}

080063cc <_realloc_r>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	4680      	mov	r8, r0
 80063d2:	4614      	mov	r4, r2
 80063d4:	460e      	mov	r6, r1
 80063d6:	b921      	cbnz	r1, 80063e2 <_realloc_r+0x16>
 80063d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	4611      	mov	r1, r2
 80063de:	f7ff b8b5 	b.w	800554c <_malloc_r>
 80063e2:	b92a      	cbnz	r2, 80063f0 <_realloc_r+0x24>
 80063e4:	f7ff f846 	bl	8005474 <_free_r>
 80063e8:	4625      	mov	r5, r4
 80063ea:	4628      	mov	r0, r5
 80063ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f0:	f000 f914 	bl	800661c <_malloc_usable_size_r>
 80063f4:	4284      	cmp	r4, r0
 80063f6:	4607      	mov	r7, r0
 80063f8:	d802      	bhi.n	8006400 <_realloc_r+0x34>
 80063fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063fe:	d812      	bhi.n	8006426 <_realloc_r+0x5a>
 8006400:	4621      	mov	r1, r4
 8006402:	4640      	mov	r0, r8
 8006404:	f7ff f8a2 	bl	800554c <_malloc_r>
 8006408:	4605      	mov	r5, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	d0ed      	beq.n	80063ea <_realloc_r+0x1e>
 800640e:	42bc      	cmp	r4, r7
 8006410:	4622      	mov	r2, r4
 8006412:	4631      	mov	r1, r6
 8006414:	bf28      	it	cs
 8006416:	463a      	movcs	r2, r7
 8006418:	f7ff ffca 	bl	80063b0 <memcpy>
 800641c:	4631      	mov	r1, r6
 800641e:	4640      	mov	r0, r8
 8006420:	f7ff f828 	bl	8005474 <_free_r>
 8006424:	e7e1      	b.n	80063ea <_realloc_r+0x1e>
 8006426:	4635      	mov	r5, r6
 8006428:	e7df      	b.n	80063ea <_realloc_r+0x1e>
	...

0800642c <_strtol_l.constprop.0>:
 800642c:	2b01      	cmp	r3, #1
 800642e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006432:	d001      	beq.n	8006438 <_strtol_l.constprop.0+0xc>
 8006434:	2b24      	cmp	r3, #36	; 0x24
 8006436:	d906      	bls.n	8006446 <_strtol_l.constprop.0+0x1a>
 8006438:	f7fe fff0 	bl	800541c <__errno>
 800643c:	2316      	movs	r3, #22
 800643e:	6003      	str	r3, [r0, #0]
 8006440:	2000      	movs	r0, #0
 8006442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006446:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800652c <_strtol_l.constprop.0+0x100>
 800644a:	460d      	mov	r5, r1
 800644c:	462e      	mov	r6, r5
 800644e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006452:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006456:	f017 0708 	ands.w	r7, r7, #8
 800645a:	d1f7      	bne.n	800644c <_strtol_l.constprop.0+0x20>
 800645c:	2c2d      	cmp	r4, #45	; 0x2d
 800645e:	d132      	bne.n	80064c6 <_strtol_l.constprop.0+0x9a>
 8006460:	782c      	ldrb	r4, [r5, #0]
 8006462:	2701      	movs	r7, #1
 8006464:	1cb5      	adds	r5, r6, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d05b      	beq.n	8006522 <_strtol_l.constprop.0+0xf6>
 800646a:	2b10      	cmp	r3, #16
 800646c:	d109      	bne.n	8006482 <_strtol_l.constprop.0+0x56>
 800646e:	2c30      	cmp	r4, #48	; 0x30
 8006470:	d107      	bne.n	8006482 <_strtol_l.constprop.0+0x56>
 8006472:	782c      	ldrb	r4, [r5, #0]
 8006474:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006478:	2c58      	cmp	r4, #88	; 0x58
 800647a:	d14d      	bne.n	8006518 <_strtol_l.constprop.0+0xec>
 800647c:	786c      	ldrb	r4, [r5, #1]
 800647e:	2310      	movs	r3, #16
 8006480:	3502      	adds	r5, #2
 8006482:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006486:	f108 38ff 	add.w	r8, r8, #4294967295
 800648a:	f04f 0e00 	mov.w	lr, #0
 800648e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006492:	4676      	mov	r6, lr
 8006494:	fb03 8a19 	mls	sl, r3, r9, r8
 8006498:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800649c:	f1bc 0f09 	cmp.w	ip, #9
 80064a0:	d816      	bhi.n	80064d0 <_strtol_l.constprop.0+0xa4>
 80064a2:	4664      	mov	r4, ip
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	dd24      	ble.n	80064f2 <_strtol_l.constprop.0+0xc6>
 80064a8:	f1be 3fff 	cmp.w	lr, #4294967295
 80064ac:	d008      	beq.n	80064c0 <_strtol_l.constprop.0+0x94>
 80064ae:	45b1      	cmp	r9, r6
 80064b0:	d31c      	bcc.n	80064ec <_strtol_l.constprop.0+0xc0>
 80064b2:	d101      	bne.n	80064b8 <_strtol_l.constprop.0+0x8c>
 80064b4:	45a2      	cmp	sl, r4
 80064b6:	db19      	blt.n	80064ec <_strtol_l.constprop.0+0xc0>
 80064b8:	fb06 4603 	mla	r6, r6, r3, r4
 80064bc:	f04f 0e01 	mov.w	lr, #1
 80064c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064c4:	e7e8      	b.n	8006498 <_strtol_l.constprop.0+0x6c>
 80064c6:	2c2b      	cmp	r4, #43	; 0x2b
 80064c8:	bf04      	itt	eq
 80064ca:	782c      	ldrbeq	r4, [r5, #0]
 80064cc:	1cb5      	addeq	r5, r6, #2
 80064ce:	e7ca      	b.n	8006466 <_strtol_l.constprop.0+0x3a>
 80064d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80064d4:	f1bc 0f19 	cmp.w	ip, #25
 80064d8:	d801      	bhi.n	80064de <_strtol_l.constprop.0+0xb2>
 80064da:	3c37      	subs	r4, #55	; 0x37
 80064dc:	e7e2      	b.n	80064a4 <_strtol_l.constprop.0+0x78>
 80064de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80064e2:	f1bc 0f19 	cmp.w	ip, #25
 80064e6:	d804      	bhi.n	80064f2 <_strtol_l.constprop.0+0xc6>
 80064e8:	3c57      	subs	r4, #87	; 0x57
 80064ea:	e7db      	b.n	80064a4 <_strtol_l.constprop.0+0x78>
 80064ec:	f04f 3eff 	mov.w	lr, #4294967295
 80064f0:	e7e6      	b.n	80064c0 <_strtol_l.constprop.0+0x94>
 80064f2:	f1be 3fff 	cmp.w	lr, #4294967295
 80064f6:	d105      	bne.n	8006504 <_strtol_l.constprop.0+0xd8>
 80064f8:	2322      	movs	r3, #34	; 0x22
 80064fa:	6003      	str	r3, [r0, #0]
 80064fc:	4646      	mov	r6, r8
 80064fe:	b942      	cbnz	r2, 8006512 <_strtol_l.constprop.0+0xe6>
 8006500:	4630      	mov	r0, r6
 8006502:	e79e      	b.n	8006442 <_strtol_l.constprop.0+0x16>
 8006504:	b107      	cbz	r7, 8006508 <_strtol_l.constprop.0+0xdc>
 8006506:	4276      	negs	r6, r6
 8006508:	2a00      	cmp	r2, #0
 800650a:	d0f9      	beq.n	8006500 <_strtol_l.constprop.0+0xd4>
 800650c:	f1be 0f00 	cmp.w	lr, #0
 8006510:	d000      	beq.n	8006514 <_strtol_l.constprop.0+0xe8>
 8006512:	1e69      	subs	r1, r5, #1
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	e7f3      	b.n	8006500 <_strtol_l.constprop.0+0xd4>
 8006518:	2430      	movs	r4, #48	; 0x30
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1b1      	bne.n	8006482 <_strtol_l.constprop.0+0x56>
 800651e:	2308      	movs	r3, #8
 8006520:	e7af      	b.n	8006482 <_strtol_l.constprop.0+0x56>
 8006522:	2c30      	cmp	r4, #48	; 0x30
 8006524:	d0a5      	beq.n	8006472 <_strtol_l.constprop.0+0x46>
 8006526:	230a      	movs	r3, #10
 8006528:	e7ab      	b.n	8006482 <_strtol_l.constprop.0+0x56>
 800652a:	bf00      	nop
 800652c:	080066df 	.word	0x080066df

08006530 <_strtol_r>:
 8006530:	f7ff bf7c 	b.w	800642c <_strtol_l.constprop.0>

08006534 <_strtoul_l.constprop.0>:
 8006534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006538:	4f36      	ldr	r7, [pc, #216]	; (8006614 <_strtoul_l.constprop.0+0xe0>)
 800653a:	4686      	mov	lr, r0
 800653c:	460d      	mov	r5, r1
 800653e:	4628      	mov	r0, r5
 8006540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006544:	5d3e      	ldrb	r6, [r7, r4]
 8006546:	f016 0608 	ands.w	r6, r6, #8
 800654a:	d1f8      	bne.n	800653e <_strtoul_l.constprop.0+0xa>
 800654c:	2c2d      	cmp	r4, #45	; 0x2d
 800654e:	d130      	bne.n	80065b2 <_strtoul_l.constprop.0+0x7e>
 8006550:	782c      	ldrb	r4, [r5, #0]
 8006552:	2601      	movs	r6, #1
 8006554:	1c85      	adds	r5, r0, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d057      	beq.n	800660a <_strtoul_l.constprop.0+0xd6>
 800655a:	2b10      	cmp	r3, #16
 800655c:	d109      	bne.n	8006572 <_strtoul_l.constprop.0+0x3e>
 800655e:	2c30      	cmp	r4, #48	; 0x30
 8006560:	d107      	bne.n	8006572 <_strtoul_l.constprop.0+0x3e>
 8006562:	7828      	ldrb	r0, [r5, #0]
 8006564:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006568:	2858      	cmp	r0, #88	; 0x58
 800656a:	d149      	bne.n	8006600 <_strtoul_l.constprop.0+0xcc>
 800656c:	786c      	ldrb	r4, [r5, #1]
 800656e:	2310      	movs	r3, #16
 8006570:	3502      	adds	r5, #2
 8006572:	f04f 38ff 	mov.w	r8, #4294967295
 8006576:	2700      	movs	r7, #0
 8006578:	fbb8 f8f3 	udiv	r8, r8, r3
 800657c:	fb03 f908 	mul.w	r9, r3, r8
 8006580:	ea6f 0909 	mvn.w	r9, r9
 8006584:	4638      	mov	r0, r7
 8006586:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800658a:	f1bc 0f09 	cmp.w	ip, #9
 800658e:	d815      	bhi.n	80065bc <_strtoul_l.constprop.0+0x88>
 8006590:	4664      	mov	r4, ip
 8006592:	42a3      	cmp	r3, r4
 8006594:	dd23      	ble.n	80065de <_strtoul_l.constprop.0+0xaa>
 8006596:	f1b7 3fff 	cmp.w	r7, #4294967295
 800659a:	d007      	beq.n	80065ac <_strtoul_l.constprop.0+0x78>
 800659c:	4580      	cmp	r8, r0
 800659e:	d31b      	bcc.n	80065d8 <_strtoul_l.constprop.0+0xa4>
 80065a0:	d101      	bne.n	80065a6 <_strtoul_l.constprop.0+0x72>
 80065a2:	45a1      	cmp	r9, r4
 80065a4:	db18      	blt.n	80065d8 <_strtoul_l.constprop.0+0xa4>
 80065a6:	fb00 4003 	mla	r0, r0, r3, r4
 80065aa:	2701      	movs	r7, #1
 80065ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065b0:	e7e9      	b.n	8006586 <_strtoul_l.constprop.0+0x52>
 80065b2:	2c2b      	cmp	r4, #43	; 0x2b
 80065b4:	bf04      	itt	eq
 80065b6:	782c      	ldrbeq	r4, [r5, #0]
 80065b8:	1c85      	addeq	r5, r0, #2
 80065ba:	e7cc      	b.n	8006556 <_strtoul_l.constprop.0+0x22>
 80065bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80065c0:	f1bc 0f19 	cmp.w	ip, #25
 80065c4:	d801      	bhi.n	80065ca <_strtoul_l.constprop.0+0x96>
 80065c6:	3c37      	subs	r4, #55	; 0x37
 80065c8:	e7e3      	b.n	8006592 <_strtoul_l.constprop.0+0x5e>
 80065ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80065ce:	f1bc 0f19 	cmp.w	ip, #25
 80065d2:	d804      	bhi.n	80065de <_strtoul_l.constprop.0+0xaa>
 80065d4:	3c57      	subs	r4, #87	; 0x57
 80065d6:	e7dc      	b.n	8006592 <_strtoul_l.constprop.0+0x5e>
 80065d8:	f04f 37ff 	mov.w	r7, #4294967295
 80065dc:	e7e6      	b.n	80065ac <_strtoul_l.constprop.0+0x78>
 80065de:	1c7b      	adds	r3, r7, #1
 80065e0:	d106      	bne.n	80065f0 <_strtoul_l.constprop.0+0xbc>
 80065e2:	2322      	movs	r3, #34	; 0x22
 80065e4:	f8ce 3000 	str.w	r3, [lr]
 80065e8:	4638      	mov	r0, r7
 80065ea:	b932      	cbnz	r2, 80065fa <_strtoul_l.constprop.0+0xc6>
 80065ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065f0:	b106      	cbz	r6, 80065f4 <_strtoul_l.constprop.0+0xc0>
 80065f2:	4240      	negs	r0, r0
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	d0f9      	beq.n	80065ec <_strtoul_l.constprop.0+0xb8>
 80065f8:	b107      	cbz	r7, 80065fc <_strtoul_l.constprop.0+0xc8>
 80065fa:	1e69      	subs	r1, r5, #1
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	e7f5      	b.n	80065ec <_strtoul_l.constprop.0+0xb8>
 8006600:	2430      	movs	r4, #48	; 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1b5      	bne.n	8006572 <_strtoul_l.constprop.0+0x3e>
 8006606:	2308      	movs	r3, #8
 8006608:	e7b3      	b.n	8006572 <_strtoul_l.constprop.0+0x3e>
 800660a:	2c30      	cmp	r4, #48	; 0x30
 800660c:	d0a9      	beq.n	8006562 <_strtoul_l.constprop.0+0x2e>
 800660e:	230a      	movs	r3, #10
 8006610:	e7af      	b.n	8006572 <_strtoul_l.constprop.0+0x3e>
 8006612:	bf00      	nop
 8006614:	080066df 	.word	0x080066df

08006618 <_strtoul_r>:
 8006618:	f7ff bf8c 	b.w	8006534 <_strtoul_l.constprop.0>

0800661c <_malloc_usable_size_r>:
 800661c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006620:	1f18      	subs	r0, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	bfbc      	itt	lt
 8006626:	580b      	ldrlt	r3, [r1, r0]
 8006628:	18c0      	addlt	r0, r0, r3
 800662a:	4770      	bx	lr

0800662c <_init>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr

08006638 <_fini>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	bf00      	nop
 800663c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663e:	bc08      	pop	{r3}
 8006640:	469e      	mov	lr, r3
 8006642:	4770      	bx	lr
